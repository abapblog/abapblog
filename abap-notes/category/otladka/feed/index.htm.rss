<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Отладка | ABAP Blog</title>
	<atom:link href="https://abap-blog.ru/abap-notes/category/otladka/feed/" rel="self" type="application/rss+xml" />
	<link>https://abap-blog.ru</link>
	<description>Все о разработке в решениях от SAP</description>
	<lastBuildDate>Mon, 15 Mar 2021 19:19:57 +0000</lastBuildDate>
	<language>ru-RU</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>
	<item>
		<title>Просмотр содержимого SAP Memory / ABAP Memory / SCREEN Table / Open Datasets</title>
		<link>https://abap-blog.ru/abap-notes/prosmotr-soderzhimogo-sap-abap-memory/</link>
					<comments>https://abap-blog.ru/abap-notes/prosmotr-soderzhimogo-sap-abap-memory/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Mon, 15 Mar 2021 19:18:11 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=6706</guid>

					<description><![CDATA[<p>Просмотреть содержимое указанных областей можно двумя способами. В старом отладчике: В новом отладчике: Area Name Description SMEM SAP Memory MEMORIES ABAP Memory SCREEN Screen Table DATASETS Opened Files</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/prosmotr-soderzhimogo-sap-abap-memory/">Просмотр содержимого SAP Memory / ABAP Memory / SCREEN Table / Open Datasets</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Просмотреть содержимое указанных областей можно двумя способами.</p>
<p>В старом отладчике:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/03/old_debugger.png"><img loading="lazy" class="alignnone size-full wp-image-6707" src="https://abap-blog.ru/wp-content/uploads/2021/03/old_debugger.png" alt="" width="647" height="712" srcset="https://abap-blog.ru/wp-content/uploads/2021/03/old_debugger.png 647w, https://abap-blog.ru/wp-content/uploads/2021/03/old_debugger-273x300.png 273w" sizes="(max-width: 647px) 100vw, 647px" /></a></p>
<p>В новом отладчике:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/03/new-debugger.png"><img loading="lazy" class="alignnone size-full wp-image-6708" src="https://abap-blog.ru/wp-content/uploads/2021/03/new-debugger.png" alt="" width="1110" height="769" srcset="https://abap-blog.ru/wp-content/uploads/2021/03/new-debugger.png 1110w, https://abap-blog.ru/wp-content/uploads/2021/03/new-debugger-300x208.png 300w, https://abap-blog.ru/wp-content/uploads/2021/03/new-debugger-1024x709.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/03/new-debugger-768x532.png 768w" sizes="(max-width: 1110px) 100vw, 1110px" /></a></p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/03/area.png"><img loading="lazy" class="alignnone size-full wp-image-6709" src="https://abap-blog.ru/wp-content/uploads/2021/03/area.png" alt="" width="978" height="771" srcset="https://abap-blog.ru/wp-content/uploads/2021/03/area.png 978w, https://abap-blog.ru/wp-content/uploads/2021/03/area-300x237.png 300w, https://abap-blog.ru/wp-content/uploads/2021/03/area-768x605.png 768w" sizes="(max-width: 978px) 100vw, 978px" /></a></p>
<table class="myNNFV2-table" style="width: 44.4532%; height: 170px;" border="1" cellspacing="0" cellpadding="3">
<tbody>
<tr>
<td>Area Name</td>
<td>Description</td>
</tr>
<tr>
<td>SMEM</td>
<td>SAP Memory</td>
</tr>
<tr>
<td>MEMORIES</td>
<td>ABAP Memory</td>
</tr>
<tr>
<td>SCREEN</td>
<td>Screen Table</td>
</tr>
<tr>
<td>DATASETS</td>
<td>Opened Files</td>
</tr>
</tbody>
</table><p>The post <a href="https://abap-blog.ru/abap-notes/prosmotr-soderzhimogo-sap-abap-memory/">Просмотр содержимого SAP Memory / ABAP Memory / SCREEN Table / Open Datasets</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/prosmotr-soderzhimogo-sap-abap-memory/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Просмотр внешних точек прерывания</title>
		<link>https://abap-blog.ru/abap-notes/prosmotr-vsex-vneshnix-tochek-preryvaniya/</link>
					<comments>https://abap-blog.ru/abap-notes/prosmotr-vsex-vneshnix-tochek-preryvaniya/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Fri, 21 Aug 2020 19:35:25 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=4690</guid>

					<description><![CDATA[<p>SE38 RSBREAKPOINTS. Или в ноте 2305798 &#8212; Validity of an external Breakpoint</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/prosmotr-vsex-vneshnix-tochek-preryvaniya/">Просмотр внешних точек прерывания</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>SE38 <strong>RSBREAKPOINTS.</strong></p>
<p>Или в ноте <a href="https://launchpad.support.sap.com/#/notes/2305798/E">2305798 &#8212; Validity of an external Breakpoint</a></p><p>The post <a href="https://abap-blog.ru/abap-notes/prosmotr-vsex-vneshnix-tochek-preryvaniya/">Просмотр внешних точек прерывания</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/prosmotr-vsex-vneshnix-tochek-preryvaniya/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Отладка потоков операций</title>
		<link>https://abap-blog.ru/abap-notes/otladka-potokov-operacij/</link>
					<comments>https://abap-blog.ru/abap-notes/otladka-potokov-operacij/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Fri, 21 Aug 2020 19:20:49 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=4688</guid>

					<description><![CDATA[<p>Когда речь заходит об отладке потоков операций часто разработчики прибегают к всевозможным хитростям вроде бесконечного цикла по заданному флагу, однако есть вполне себе стандартное решение, транзакция SWW_BREAKPOINT, в которой активируется необходимость остановки для внешних точек прерывания. Другие способы отладки.</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/otladka-potokov-operacij/">Отладка потоков операций</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Когда речь заходит об отладке потоков операций часто разработчики прибегают к всевозможным хитростям вроде <a href="https://abap-blog.ru/abap-notes/beskonechnyj-cikl-dlya-otladki/">бесконечного цикла</a> по заданному флагу, однако есть вполне себе стандартное решение, транзакция <strong>SWW_BREAKPOINT, </strong>в которой активируется необходимость остановки для внешних точек прерывания.</p>
<p><a href="https://wiki.scn.sap.com/wiki/display/HOME/How+to+debug+background+workflow+steps">Другие способы отладки.</a></p><p>The post <a href="https://abap-blog.ru/abap-notes/otladka-potokov-operacij/">Отладка потоков операций</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/otladka-potokov-operacij/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Отладка от имени другого пользователя</title>
		<link>https://abap-blog.ru/abap-notes/otladka-ot-imeni-drugogo-polzovatelya/</link>
					<comments>https://abap-blog.ru/abap-notes/otladka-ot-imeni-drugogo-polzovatelya/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Wed, 22 Jul 2020 19:11:31 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=4458</guid>

					<description><![CDATA[<p>Представьте ситуацию: есть пользователь USER_A, под которым необходимо запустить отладку и выполнить анализ некоторой проблемы, однако полномочий отладки у пользователя нет или логин/пароль передать нет возможности у вас есть пользователь USER_B у которого есть полномочия на отладку, но нет соответствующих ролей для повторения действий пользователя В данном случае вам поможет следующая команда: /hext user = [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/otladka-ot-imeni-drugogo-polzovatelya/">Отладка от имени другого пользователя</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Представьте ситуацию:</p>
<ul>
<li>есть пользователь USER_A, под которым необходимо запустить отладку и выполнить анализ некоторой проблемы, однако полномочий отладки у пользователя нет или логин/пароль передать нет возможности</li>
<li>у вас есть пользователь USER_B у которого есть полномочия на отладку, но нет соответствующих ролей для повторения действий пользователя</li>
</ul>
<p>В данном случае вам поможет следующая команда: <strong>/hext user = USER_B</strong>, которую пользователь USER_A должен ввести перед моделированием проблемы (запуска отчёта, нажатия на кнопку и т.п.). Пользователь USER_B должен перед этим поставить внешнюю точку прерывания указав в качестве пользователя для внешней точки USER_A.</p>
<p>Если вдруг у вас при установке внешней точки прерывания не будет полномочий, но есть полномочия на изменения переменных, проверка полномочий на установку внешних точек можно пропустить внутри ФМ-а: <strong>SUSR_CHECK_DEBUG_ABILITY.</strong></p><p>The post <a href="https://abap-blog.ru/abap-notes/otladka-ot-imeni-drugogo-polzovatelya/">Отладка от имени другого пользователя</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/otladka-ot-imeni-drugogo-polzovatelya/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Скрипт для поиска расширений</title>
		<link>https://abap-blog.ru/abap-notes/skript-dlya-poiska-rasshirenij/</link>
					<comments>https://abap-blog.ru/abap-notes/skript-dlya-poiska-rasshirenij/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Thu, 16 Apr 2020 08:50:42 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=4126</guid>

					<description><![CDATA[<p>Скрипт позволяет найти расширения через отладчик. [crayon-618a1e36a99f2521301273/] Об использовании читайте в статье. https://github.com/MikeSidorochkin/ZSMG_DEBUG</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/skript-dlya-poiska-rasshirenij/">Скрипт для поиска расширений</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Скрипт позволяет найти расширения через отладчик.</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2020/04/ScriptOptions.png"><img loading="lazy" class="wp-image-4301 aligncenter" src="https://abap-blog.ru/wp-content/uploads/2020/04/ScriptOptions.png" alt="" width="783" height="257" srcset="https://abap-blog.ru/wp-content/uploads/2020/04/ScriptOptions.png 1219w, https://abap-blog.ru/wp-content/uploads/2020/04/ScriptOptions-300x98.png 300w, https://abap-blog.ru/wp-content/uploads/2020/04/ScriptOptions-1024x336.png 1024w, https://abap-blog.ru/wp-content/uploads/2020/04/ScriptOptions-768x252.png 768w" sizes="(max-width: 783px) 100vw, 783px" /></a></p><pre class="urvanov-syntax-highlighter-plain-tag">*&lt;SCRIPT:PERSISTENT&gt;
REPORT  rstpda_script_template.

*&lt;SCRIPT:HEADER&gt;
*&lt;SCRIPTNAME&gt;ZSB_ENHANCMENT_SEARCH&lt;/SCRIPTNAME&gt;
*&lt;SCRIPT_CLASS&gt;LCL_DEBUGGER_SCRIPT&lt;/SCRIPT_CLASS&gt;
*&lt;SCRIPT_COMMENT&gt;Поиск расширений&lt;/SCRIPT_COMMENT&gt;
*&lt;BP_REACHED&gt;X&lt;/BP_REACHED&gt;

*&lt;/SCRIPT:HEADER&gt;

*&lt;SCRIPT:PRESETTINGS&gt;

*&lt;/SCRIPT:PRESETTINGS&gt;

*&lt;SCRIPT:SCRIPT_CLASS&gt;
CLASS lcl_debugger_script DEFINITION INHERITING FROM  cl_tpda_script_class_super  .

  PUBLIC SECTION.
    METHODS: init    REDEFINITION,
      script  REDEFINITION,
      end     REDEFINITION,
      get_abap_src_info RETURNING VALUE(rs_info) TYPE tpda_scr_prg_info RAISING cx_tpda_src_info,
      check_stack,
      check_breakpoints,
      check_bp IMPORTING iv_bp_type TYPE string
                         it_stack   TYPE tpda_stack_view_it.

    METHODS: check_events_in_stack IMPORTING is_stack_view TYPE tpda_stack_view.
  PRIVATE SECTION.
    TYPES:
      BEGIN OF ts_script_params,
        trace          TYPE flag,
        debug          TYPE flag,
        customer_exits TYPE flag,
        new_badi       TYPE flag,
        old_badi       TYPE flag,
        enhancements   TYPE flag,
        bte            TYPE flag,
        user_exits     TYPE flag,
      END OF ts_script_params.

    DATA: mt_functions    TYPE RANGE OF tpda_event.
    DATA: mt_forms        TYPE RANGE OF tpda_event.
    DATA: mt_progs_cache  TYPE HASHED TABLE OF tpda_scr_prg_info WITH UNIQUE KEY program include line.

    DATA:
      ms_script_params TYPE ts_script_params.
ENDCLASS.                    "lcl_debugger_script DEFINITION
*---------------------------------------------------------------------*
*       CLASS lcl_debugger_script IMPLEMENTATION
*---------------------------------------------------------------------*
*
*---------------------------------------------------------------------*
CLASS lcl_debugger_script IMPLEMENTATION.

  METHOD init.
    ms_script_params-trace = ms_script_params-customer_exits = ms_script_params-old_badi =
    ms_script_params-new_badi = ms_script_params-enhancements = ms_script_params-bte = abap_true.

    cl_ci_query_attributes=&gt;generic(
      EXPORTING
        p_name       = CONV #( sy-repid )
        p_title      = 'Параметры скрипта'
        p_attributes = VALUE #(

                                ( kind  = 'G'
                                  text  = 'Параметры запуска'
                                  ref   = REF #( sy-subrc ) )

                                ( ref   = REF #( ms_script_params-trace )
                                  kind  = 'R'
                                  text  = 'Создать файл трассировки' )

                                ( ref   = REF #( ms_script_params-debug )
                                  kind  = 'R'
                                  text  = 'Прерывание в отладчике' )

                                ( kind  = 'G'
                                  text  = 'Типы расширений'
                                  ref   = REF #( sy-subrc ) )

                                ( ref   = REF #( ms_script_params-customer_exits )
                                  kind  = 'C'
                                  text  = 'Customer Exits' )

                                ( ref   = REF #( ms_script_params-new_badi )
                                  kind  = 'C'
                                  text  = 'New BAdI' )

                                ( ref   = REF #( ms_script_params-old_badi )
                                  kind  = 'C'
                                  text  = 'Old BAdI' )

                                ( ref   = REF #( ms_script_params-enhancements )
                                  kind  = 'C'
                                  text  = 'Enhancements' )

                                ( ref   = REF #( ms_script_params-bte )
                                  kind  = 'C'
                                  text  = 'BTE (OpenFI)' )

                                ( ref   = REF #( ms_script_params-user_exits )
                                  kind  = 'C'
                                  text  = 'User Exits' )
        )

        p_display    = '' ).

    TRY.
        IF ms_script_params-old_badi = abap_true.
          cl_tpda_script_bp_services=&gt;set_bp_method_global_class(
            p_methodname = 'GET_INSTANCE'
            p_classname  = 'CL_EXITHANDLER' ).
        ENDIF.

        IF ms_script_params-customer_exits = abap_true.
          cl_tpda_script_bp_services=&gt;set_bp_statement( p_statement = 'CALL CUSTOMER-FUNCTION' ).
        ENDIF.

        IF ms_script_params-enhancements = abap_true.
          cl_tpda_script_bp_services=&gt;set_bp_statement( p_statement = 'ENHANCEMENT' ).
        ENDIF.

        IF ms_script_params-new_badi = abap_true.
          cl_tpda_script_bp_services=&gt;set_bp_statement( p_statement = 'CALL BADI' ).
          cl_tpda_script_bp_services=&gt;set_bp_statement( p_statement = 'GET BADI' ).
        ENDIF.

        cl_tpda_script_bp_services=&gt;set_bp_stack_change( cl_tpda_script_bp_services=&gt;c_script_bp ).
      CATCH cx_tpda_scr_bp.
    ENDTRY.

    IF ms_script_params-bte = abap_true.
      mt_functions = VALUE #( ( sign = 'I' option = 'CP' low = 'OPEN_FI_PERFORM_*' )
                              ( sign = 'I' option = 'CP' low = 'OUTBOUND_CALL_*'   )
                              ( sign = 'I' option = 'CP' low = 'EXIT*' ) ).
    ENDIF.

    IF ms_script_params-user_exits = abap_true.
      mt_forms = VALUE #( ( sign = 'I' option = 'CP' low = 'USEREXIT*' ) ).
    ENDIF.
  ENDMETHOD.                    "init

  METHOD check_bp.
    CASE iv_bp_type.
      WHEN 'CALL CUSTOMER-FUNCTION'.
        CHECK ms_script_params-customer_exits = abap_true.
      WHEN 'ENHANCEMENT'.
        CHECK ms_script_params-enhancements = abap_true.
      WHEN 'CALL BADI' OR 'GET BADI'.
        CHECK ms_script_params-new_badi = abap_true.
      WHEN OTHERS.
        RETURN.
    ENDCASE.

    IF ms_script_params-debug = abap_true.
      me-&gt;break( ).
    ENDIF.

    IF ms_script_params-trace = abap_true.
      TRY.
          DATA(ls_program_info) = get_abap_src_info( ).
        CATCH cx_tpda_src_info.
          RETURN.
      ENDTRY.

      trace-&gt;add_custom_info(
        EXPORTING
          p_trace_entry = VALUE #( value = |{ iv_bp_type } AT: { it_stack[ 1 ]-eventtype } { it_stack[ 1 ]-eventname }, line: { it_stack[ 1 ]-line }, program:{ it_stack[ 1 ]-program }|
                                   type = iv_bp_type ) ).

      trace-&gt;add_src_info( ).
      trace-&gt;add_event_info(
        EXPORTING
          p_abap_only = abap_true ).
    ENDIF.
  ENDMETHOD.

  METHOD get_abap_src_info.
    cl_tpda_script_abapdescr=&gt;get_abap_src_info( IMPORTING p_prg_info = rs_info ).
    READ TABLE mt_progs_cache WITH TABLE KEY program = rs_info-program
                                             include = rs_info-include
                                             line    = rs_info-line
      TRANSPORTING NO FIELDS.

    IF sy-subrc = 0.
      RAISE EXCEPTION TYPE cx_tpda_src_info.
    ELSE.
      INSERT rs_info INTO TABLE mt_progs_cache.
    ENDIF.
  ENDMETHOD.

  METHOD check_stack.
    TRY.
        DATA(lt_stack) = cl_tpda_script_abapdescr=&gt;get_abap_dynp_stack( ).
      CATCH cx_tpda_stack_error.
    ENDTRY.

    check_events_in_stack( is_stack_view = lt_stack[ 1 ] ).
  ENDMETHOD.

  METHOD check_breakpoints.
    TRY.
        DATA(lt_stack) = cl_tpda_script_abapdescr=&gt;get_abap_dynp_stack( ).
      CATCH cx_tpda_stack_error.
        RETURN.
    ENDTRY.

    TRY.
        DATA(lt_breakpoints) = cl_tpda_script_bp_services=&gt;get_reached_script_bps( ).
      CATCH cx_root.
        RETURN.
    ENDTRY.

    LOOP AT lt_breakpoints ASSIGNING FIELD-SYMBOL(&lt;ls_breakpoint&gt;) WHERE statementsta IS NOT INITIAL.
      check_bp( it_stack = lt_stack
                iv_bp_type = CONV #( &lt;ls_breakpoint&gt;-statementsta ) ).
    ENDLOOP.
  ENDMETHOD.

  METHOD script.
    check_stack( ).
    check_breakpoints( ).
  ENDMETHOD.                    "script

  METHOD end.
  ENDMETHOD.                    "end

  METHOD check_events_in_stack.
    DATA:
      ls_program_info TYPE tpda_scr_prg_info.

    CASE is_stack_view-eventtype.
      WHEN 'FUNCTION'.
        CHECK is_stack_view-eventname IN mt_functions AND ms_script_params-bte = abap_true.

        IF ms_script_params-trace = abap_true.
          TRY.
              ls_program_info = get_abap_src_info( ).
            CATCH cx_tpda_src_info.
              RETURN.
          ENDTRY.

          trace-&gt;add_custom_info(
            EXPORTING
              p_trace_entry = VALUE #( value = |FM { is_stack_view-eventname }|
                                       type = 'BTE(FM)' ) ).
        ENDIF.

      WHEN 'FORM'.
        CHECK is_stack_view-eventname IN mt_forms AND ms_script_params-user_exits = abap_true.

        IF ms_script_params-trace = abap_true.
          TRY.
              ls_program_info = get_abap_src_info( ).
            CATCH cx_tpda_src_info.
              RETURN.
          ENDTRY.

          trace-&gt;add_custom_info(
            EXPORTING
              p_trace_entry = VALUE #( value = |PROGRAM: { ls_program_info-program }, INCLUDE: { ls_program_info-include }, FORM { is_stack_view-eventname }|
                                       type = 'USER-EXIT' ) ).
        ENDIF.

      WHEN 'METHOD'.
        IF is_stack_view-eventname = 'GET_INSTANCE' AND is_stack_view-program CP 'CL_EXITHANDLER*' AND ms_script_params-old_badi = abap_true.
          TRY.
              DATA(lv_exit_name) = cl_tpda_script_data_descr=&gt;get_simple_value( 'EXIT_NAME' ).
            CATCH cx_tpda_varname cx_tpda_script_no_simple_type.
          ENDTRY.

          IF ms_script_params-trace = abap_true.
            TRY.
                ls_program_info = get_abap_src_info( ).
              CATCH cx_tpda_src_info.
                RETURN.
            ENDTRY.
          ENDIF.

          IF NOT lv_exit_name IS INITIAL.
            IF ms_script_params-trace = abap_true.
              trace-&gt;add_custom_info(
                EXPORTING
                  p_trace_entry = VALUE #( value = | OLD BADI: { lv_exit_name }|
                                           type = 'OLD_BADI' ) ).
            ENDIF.
          ELSE.
            TRY.
                IF ms_script_params-trace = abap_true.
                  DATA(ls_instance) = cl_tpda_script_data_descr=&gt;get_variable_info( p_var_name  = 'INSTANCE' ).
                  trace-&gt;add_custom_info(
                    EXPORTING
                      p_trace_entry = VALUE #( value = |OLD BADI : { ls_instance-vartype } |
                                               type = 'OLD_BADI' ) ).
                ENDIF.
              CATCH cx_tpda_varname .
                RETURN.
            ENDTRY.
          ENDIF.
        ELSEIF ( is_stack_view-eventname CP  'IPR_*' OR
                 is_stack_view-eventname CP  'IPO_*' OR
                 is_stack_view-eventname CP  'IWO_*' ) AND ms_script_params-enhancements = abap_true.

          IF ms_script_params-trace = abap_true.
            DATA(lv_type) =  SWITCH string( is_stack_view-eventname+0(4)
                                            WHEN 'IPR_' THEN 'PreExit Method'
                                            WHEN 'IPO_' THEN 'PostExit Method'
                                            WHEN 'IWO_' THEN 'OverWrite-Exit Method'
                                            ELSE '' ).

            TRY.
                ls_program_info = get_abap_src_info( ).
              CATCH cx_tpda_src_info.
                RETURN.
            ENDTRY.

            SPLIT ls_program_info-program AT '=' INTO sy-msgv1 sy-msgv2 IN CHARACTER MODE.
            SPLIT ls_program_info-eventname AT '~' INTO sy-msgv2 sy-msgv3 IN CHARACTER MODE.

            trace-&gt;add_custom_info(
              EXPORTING
                p_trace_entry = VALUE #( value = |Class: { sy-msgv1 }, Method: { sy-msgv3  } |
                                             type = lv_type ) ).
          ENDIF.
        ELSE.
          RETURN.
        ENDIF.
      WHEN OTHERS.
        RETURN.
    ENDCASE.

    IF ms_script_params-trace = abap_true.
      trace-&gt;add_src_info( ).
      trace-&gt;add_event_info(
        EXPORTING
          p_abap_only = abap_true ).
    ENDIF.

    IF ms_script_params-debug = abap_true.
      me-&gt;break( ).
    ENDIF.
  ENDMETHOD.

ENDCLASS.                    "lcl_debugger_script IMPLEMENTATION
*&lt;/SCRIPT:SCRIPT_CLASS&gt;

*&lt;/SCRIPT:PERSISTENT&gt;</pre><p>Об использовании читайте в <a href="https://sapland.ru/kb/articles/stats/chetire-tehniki-praktiki-poiska-rasshirenii-koda.html#_Toc509223762">статье</a>.</p>
<p><a href="https://github.com/MikeSidorochkin/ZSMG_DEBUG">https://github.com/MikeSidorochkin/ZSMG_DEBUG</a></p><p>The post <a href="https://abap-blog.ru/abap-notes/skript-dlya-poiska-rasshirenij/">Скрипт для поиска расширений</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/skript-dlya-poiska-rasshirenij/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Скрипт для пропуска проверки полномочий</title>
		<link>https://abap-blog.ru/abap-notes/skript-dlya-propuska-proverki-polnomochij/</link>
					<comments>https://abap-blog.ru/abap-notes/skript-dlya-propuska-proverki-polnomochij/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Wed, 15 Apr 2020 16:58:43 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=4122</guid>

					<description><![CDATA[<p>[crayon-618a1e36aa653897181615/] https://github.com/MikeSidorochkin/ZSMG_DEBUG</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/skript-dlya-propuska-proverki-polnomochij/">Скрипт для пропуска проверки полномочий</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p></p><pre class="urvanov-syntax-highlighter-plain-tag">*&lt;SCRIPT:PERSISTENT&gt;


 *&lt;SCRIPT:HEADER&gt;
 *&lt;SCRIPTNAME&gt;ZBYPASS&lt;/SCRIPTNAME&gt;
 *&lt;SCRIPT_CLASS&gt;LCL_DEBUGGER_SCRIPT&lt;/SCRIPT_CLASS&gt;
 *&lt;SCRIPT_COMMENT&gt;Debugger Skript: Default Template&lt;/SCRIPT_COMMENT&gt;
 *&lt;BP_REACHED&gt;X&lt;/BP_REACHED&gt;

 *&lt;/SCRIPT:HEADER&gt;

 *&lt;SCRIPT:PRESETTINGS&gt;
 *&lt;BP&gt;
 *&lt;FLAGACTIVE&gt;X&lt;/FLAGACTIVE&gt;
 *&lt;KIND&gt;1 &lt;/KIND&gt;
 *&lt;STATEMENTSTA&gt;AUTHORITY-CHECK&lt;/STATEMENTSTA&gt;
 *&lt;/BP&gt;

 *&lt;/SCRIPT:PRESETTINGS&gt;

 *&lt;SCRIPT:SCRIPT_CLASS&gt;
 *---------------------------------------------------------------------*
 *       CLASS lcl_debugger_script DEFINITION
 *---------------------------------------------------------------------*
 *
 *---------------------------------------------------------------------*
 CLASS lcl_debugger_script DEFINITION INHERITING FROM  cl_tpda_script_class_super  .

   PUBLIC SECTION.
     METHODS: prologue  REDEFINITION,
       init    REDEFINITION,
       script  REDEFINITION,
       end     REDEFINITION.

 ENDCLASS.                  


 CLASS lcl_debugger_script IMPLEMENTATION.
   METHOD prologue.
     super-&gt;prologue( ).
   ENDMETHOD.                  

   METHOD init.
   ENDMETHOD.                 

   METHOD script.
     TRY.
         debugger_controller-&gt;debug_step(
           EXPORTING
             p_command = cl_tpda_script_debugger_ctrl=&gt;debug_step_over ).
       CATCH cx_tpda_scr_rtctrl_status .
       CATCH cx_tpda_scr_rtctrl .
     ENDTRY.

     TRY.
         cl_tpda_script_data_descr=&gt;change_value(
           EXPORTING
             p_new_value = '0'
             p_varname   = 'sy-subrc' ).
       CATCH cx_tpda_varname .
       CATCH cx_tpda_scr_auth .
     ENDTRY.
   ENDMETHOD.                    

   METHOD end.
   ENDMETHOD.                   
 ENDCLASS.                 

 *&lt;/SCRIPT:SCRIPT_CLASS&gt;

 *&lt;/SCRIPT:PERSISTENT&gt;</pre><p><a href="https://github.com/MikeSidorochkin/ZSMG_DEBUG">https://github.com/MikeSidorochkin/ZSMG_DEBUG</a></p><p>The post <a href="https://abap-blog.ru/abap-notes/skript-dlya-propuska-proverki-polnomochij/">Скрипт для пропуска проверки полномочий</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/skript-dlya-propuska-proverki-polnomochij/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Бесконечный цикл для отладки</title>
		<link>https://abap-blog.ru/abap-notes/beskonechnyj-cikl-dlya-otladki/</link>
					<comments>https://abap-blog.ru/abap-notes/beskonechnyj-cikl-dlya-otladki/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Sat, 04 Apr 2020 11:22:25 +0000</pubDate>
				<guid isPermaLink="false">https://abap-blog.ru/?post_type=epkb_post_type_1&#038;p=3905</guid>

					<description><![CDATA[<p>Для возможности отладки фоновых процессов можно воспользоваться функционалом класса CL_BCS_BREAKLOOP: [crayon-618a1e36aa82f515966421/] Для того чтобы активировать бесконечный цикл по модулю ZSOME_MODULE, необходимо запустить ФМ SBCS_BREAKLOOP и добавить соответствующее условие: Более подробно можете почитать в этой статье. В качестве альтернативного подхода часто используют вызов ФМ-а RSSM_SLEEP_DEBUG.</p>
<p>The post <a href="https://abap-blog.ru/abap-notes/beskonechnyj-cikl-dlya-otladki/">Бесконечный цикл для отладки</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Для возможности отладки фоновых процессов можно воспользоваться функционалом класса <strong>CL_BCS_BREAKLOOP:</strong></p><pre class="urvanov-syntax-highlighter-plain-tag">START-OF-SELECTION.
  cl_bcs_breakloop=&gt;execute_loop( iv_module = 'ZSOME_MODULE' ).
  WRITE 'End'.</pre><p>Для того чтобы активировать бесконечный цикл по модулю ZSOME_MODULE, необходимо запустить ФМ <strong>SBCS</strong><strong>_</strong><strong>BREAKLOOP </strong>и добавить соответствующее условие:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2020/04/break_loop.png"><img loading="lazy" class="alignnone size-full wp-image-3906" src="https://abap-blog.ru/wp-content/uploads/2020/04/break_loop.png" alt="" width="892" height="116" srcset="https://abap-blog.ru/wp-content/uploads/2020/04/break_loop.png 892w, https://abap-blog.ru/wp-content/uploads/2020/04/break_loop-300x39.png 300w, https://abap-blog.ru/wp-content/uploads/2020/04/break_loop-768x100.png 768w" sizes="(max-width: 892px) 100vw, 892px" /></a></p>
<p>Более подробно можете почитать в <a href="https://sapland.ru/kb/articles/stats/novie-instrumenti-otladki-v-sisteme-sap-erp-prakticheskie-rekomendatsii.html">этой статье</a>.</p>
<p>В качестве альтернативного подхода часто используют вызов ФМ-а <strong>RSSM_SLEEP_DEBUG</strong>.</p><p>The post <a href="https://abap-blog.ru/abap-notes/beskonechnyj-cikl-dlya-otladki/">Бесконечный цикл для отладки</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/abap-notes/beskonechnyj-cikl-dlya-otladki/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
