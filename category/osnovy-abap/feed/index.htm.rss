<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Основы ABAP | ABAP Blog</title>
	<atom:link href="https://abap-blog.ru/category/osnovy-abap/feed/" rel="self" type="application/rss+xml" />
	<link>https://abap-blog.ru</link>
	<description>Все о разработке в решениях от SAP</description>
	<lastBuildDate>Tue, 25 May 2021 16:30:00 +0000</lastBuildDate>
	<language>ru-RU</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>
	<item>
		<title>Вебинар на тему Clean Code</title>
		<link>https://abap-blog.ru/osnovy-abap/vebinar-na-temu-clean-code/</link>
					<comments>https://abap-blog.ru/osnovy-abap/vebinar-na-temu-clean-code/#comments</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Tue, 25 May 2021 16:30:00 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=7628</guid>

					<description><![CDATA[<p>Регистрация по ссылке.</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/vebinar-na-temu-clean-code/">Вебинар на тему Clean Code</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p><a href="https://abap-blog.ru/wp-content/uploads/2021/05/CleanCode.png"><img loading="lazy" class="alignnone size-full wp-image-7629" src="https://abap-blog.ru/wp-content/uploads/2021/05/CleanCode.png" alt="" width="1346" height="319" srcset="https://abap-blog.ru/wp-content/uploads/2021/05/CleanCode.png 1346w, https://abap-blog.ru/wp-content/uploads/2021/05/CleanCode-300x71.png 300w, https://abap-blog.ru/wp-content/uploads/2021/05/CleanCode-1024x243.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/05/CleanCode-768x182.png 768w" sizes="(max-width: 1346px) 100vw, 1346px" /></a></p>
<p>Регистрация <a href="https://t.co/9GheNVjAo4?amp=1" target="_blank" rel="noopener">по ссылке</a>.</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/vebinar-na-temu-clean-code/">Вебинар на тему Clean Code</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/vebinar-na-temu-clean-code/feed/</wfw:commentRss>
			<slash:comments>3</slash:comments>
		
		
			</item>
		<item>
		<title>Запуск транзакций из сообщений</title>
		<link>https://abap-blog.ru/osnovy-abap/call_transaction_se91_documentation/</link>
					<comments>https://abap-blog.ru/osnovy-abap/call_transaction_se91_documentation/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Thu, 22 Apr 2021 09:17:05 +0000</pubDate>
				<category><![CDATA[SAP Dynpro]]></category>
		<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=7192</guid>

					<description><![CDATA[<p>В подробных текстах сообщений (тр. SE91) или в документации (тр. SO10) мы кроме непосредственно описания можем так же вставлять ссылки на транзакции или отчёты для их запуска, что позволяет упростить жизнь пользователям. Однако у стандартной реализации данного механизма есть ряд ограничений: Длинна ссылки ограничена, из-за чего передать все необходимые параметры для запуска транзакции может не [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/call_transaction_se91_documentation/">Запуск транзакций из сообщений</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>В подробных текстах сообщений (тр. <strong>SE91</strong>) или в документации (тр. <strong>SO10</strong>) мы кроме непосредственно описания можем так же вставлять ссылки на транзакции или отчёты для их запуска, что позволяет упростить жизнь пользователям.</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/run_report.png"><img loading="lazy" class="alignnone size-full wp-image-7224" src="https://abap-blog.ru/wp-content/uploads/2021/04/run_report.png" alt="" width="424" height="179" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/run_report.png 424w, https://abap-blog.ru/wp-content/uploads/2021/04/run_report-300x127.png 300w" sizes="(max-width: 424px) 100vw, 424px" /></a></p>
<p>Однако у стандартной реализации данного механизма есть ряд ограничений:</p>
<ul>
<li>Длинна ссылки ограничена, из-за чего передать все необходимые параметры для запуска транзакции может не получиться.</li>
<li>Нет возможности вставки интернет-ссылок более 70 символов (ограничение стандарта).</li>
<li>Нет возможности запуска отчёта с параметрами (только запуск с вариантом).</li>
</ul>
<p>В статье рассмотрим каким образом можно расширить стандартные возможности чтобы избежать вышеуказанных ограничений.</p>
<p><span id="more-7192"></span></p>
<p>Для того чтобы вставить ссылку в подробном тексте сообщения, необходимо перейти в меню:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/insert_link.png"><img loading="lazy" class="alignnone size-full wp-image-7215" src="https://abap-blog.ru/wp-content/uploads/2021/04/insert_link.png" alt="" width="604" height="287" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/insert_link.png 604w, https://abap-blog.ru/wp-content/uploads/2021/04/insert_link-300x143.png 300w" sizes="(max-width: 604px) 100vw, 604px" /></a></p>
<p>При активации может возникнуть сообщение об ошибке, следует нажать кнопку игнорировать.</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/ignore_activation.png"><img loading="lazy" class="alignnone size-full wp-image-7216" src="https://abap-blog.ru/wp-content/uploads/2021/04/ignore_activation.png" alt="" width="475" height="147" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/ignore_activation.png 475w, https://abap-blog.ru/wp-content/uploads/2021/04/ignore_activation-300x93.png 300w" sizes="(max-width: 475px) 100vw, 475px" /></a></p>
<p>Для корректного отображения вставляемых ссылок следует отключить графический редактор:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/disable_graphical_editor.png"><img loading="lazy" class="alignnone size-full wp-image-7217" src="https://abap-blog.ru/wp-content/uploads/2021/04/disable_graphical_editor.png" alt="" width="611" height="349" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/disable_graphical_editor.png 611w, https://abap-blog.ru/wp-content/uploads/2021/04/disable_graphical_editor-300x171.png 300w" sizes="(max-width: 611px) 100vw, 611px" /></a></p>
<p>Существует несколько стандартных возможности по вставке ссылок на транзакции/отчёты, разберём на примере запуска транзакции просмотра журнала (тр. <strong>SLG1</strong>) и отчёта автоматического поиска нот (тр. <strong>ANST</strong>):</p>
<ul>
<li><strong>Запуск транзакции без пропуска экрана (связь с транзакцией&#8230;)</strong>: &lt;DS:TRAN.SLG1(BALOBJ.&amp;V1&amp;)(BALSUBOBJ.&amp;V2&amp;)&gt;Open SLG1&lt;/&gt;</li>
<li><strong>Запуск транзакции с пропуском экрана</strong>: &lt;DS:TRAS.SLG1(BALOBJ.&amp;V1&amp;)&gt;Run SLG1&lt;/&gt;</li>
<li><strong>Запуск отчёта (диалоговое выполнение отчёта&#8230;)</strong>: &lt;DS:REPO.ANST_SEARCH_TOOL.&amp;V3&amp;&gt;Open ANST Report&lt;/&gt;</li>
<li>Есть и другие варианты, например &#8212; немедленное планирование отчёта в фоне, но логика обработки там аналогичная.</li>
</ul>
<p>BALOBJ и BALSUBOBJ это ID параметров, которые можно передавать через память при запуске транзакции (SET MEMORY ID&#8230;):</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/memory_id.png"><img loading="lazy" class="alignnone size-full wp-image-7219" src="https://abap-blog.ru/wp-content/uploads/2021/04/memory_id.png" alt="" width="705" height="426" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/memory_id.png 705w, https://abap-blog.ru/wp-content/uploads/2021/04/memory_id-300x181.png 300w" sizes="(max-width: 705px) 100vw, 705px" /></a></p>
<p>При запуске диалогового выполнения отчёта мы указываем имя варианта. Во всех случаях для большей гибкости параметры передаются из программы через параметры к сообщению (хотя можно задавать и статически).</p>
<p>Пример вызова сообщения:</p><pre class="urvanov-syntax-highlighter-plain-tag">START-OF-SELECTION.   
  MESSAGE i000(zsm_mess) WITH 'ANST_TESTING' 'ANST_TESTING_AT_REC' 'VAR'.</pre><p>Стандартная реализация обработки таких ссылок лежит в классе <strong>CL_EPSS_SAPEVENT</strong>, а вызов его происходит по настройке в ракурсе <strong>EPSSA2</strong>. Чтобы создать свой обработчик для своих типов ссылок, следует создать наследуемый от вышеуказанного класс и добавить запись в ракурс через тр. <strong>SM30</strong>:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/new_epssa2.png"><img loading="lazy" class="alignnone size-full wp-image-7220" src="https://abap-blog.ru/wp-content/uploads/2021/04/new_epssa2.png" alt="" width="588" height="259" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/new_epssa2.png 588w, https://abap-blog.ru/wp-content/uploads/2021/04/new_epssa2-300x132.png 300w" sizes="(max-width: 588px) 100vw, 588px" /></a></p>
<p>При этом стандартную запись следует удалить, чтобы обеспечить корректность порядка вызовов (если этого не сделать, придётся вносить типы ссылок в настройку TDCLD). В наследуемом классе мы переопределим для Custom типов ссылок поведения обработчика &#8212; метод RESOLVE_LINK, для всех прочих типов ссылок будет отрабатывать стандартная логика.</p>
<p>Полный код нового класса:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS zcl_epss_sapevent DEFINITION
  PUBLIC
  INHERITING FROM cl_epss_sapevent
  FINAL
  CREATE PUBLIC.
  PUBLIC SECTION.

    TYPES:
      tt_report_parameters TYPE STANDARD TABLE OF rsparamsl_255 .

    CLASS-METHODS set_report_parameters
      IMPORTING
        !it_parameters TYPE tt_report_parameters .

    METHODS resolve_link
        REDEFINITION .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CONSTANTS:
      BEGIN OF gc_link_types,
        zrep TYPE string VALUE 'ZREP',
        zurl TYPE string VALUE 'ZURL',
      END OF gc_link_types .
    DATA mv_doc_link TYPE string.
    CLASS-DATA gt_report_parameters TYPE tt_report_parameters .

    METHODS process_report .
    METHODS process_url .
ENDCLASS.

CLASS zcl_epss_sapevent IMPLEMENTATION.

  METHOD process_report.
    " Пример: &lt;DS:ZREP.ANST_SEARCH_TOOL&gt;Open ANST&lt;/&gt;

    SPLIT mv_doc_link+8 AT '.' INTO TABLE DATA(lt_parts).
    DATA(lv_prog) = VALUE sy-cprog( lt_parts[ 1 ] OPTIONAL ).

    IF lv_prog IS INITIAL.
      CLEAR: gt_report_parameters.
      RETURN.
    ENDIF.

    SUBMIT (lv_prog)
      VIA SELECTION-SCREEN
      AND RETURN
      WITH SELECTION-TABLE gt_report_parameters.

    CLEAR: gt_report_parameters.
  ENDMETHOD.

  METHOD process_url.
    " Пример: &lt;DS:ZURL.http://abap-blog.ru&gt;Open ABAP Blog&lt;/&gt;
    DATA:
      lv_url TYPE bxmnodes-url.

    lv_url = mv_doc_link+8.

    CALL FUNCTION 'CALL_BROWSER'
      EXPORTING
        url    = lv_url
      EXCEPTIONS
        OTHERS = 0.
  ENDMETHOD.

  METHOD resolve_link.
    mv_doc_link = doc_link.

    CASE mv_doc_link+3(4).
      WHEN gc_link_types-zrep.
        process_report( ).
      WHEN gc_link_types-zurl.
        process_url( ).
      WHEN OTHERS.
        super-&gt;resolve_link(
          EXPORTING
            doc_link         = doc_link
            epss_html_viewer = epss_html_viewer
            help_info        = help_info ).
    ENDCASE.
  ENDMETHOD.

  METHOD set_report_parameters.
    gt_report_parameters = it_parameters.
  ENDMETHOD.
ENDCLASS.</pre><p>Новые типы ссылок:</p>
<ul>
<li><strong>Запуск URL</strong>: &lt;DS:ZURL.http://abap-blog.ru&gt;Open ABAP Blog&lt;/&gt;</li>
<li><strong>Запуск отчёта с заданными параметрами экрана</strong>: &lt;DS:ZREP.ANST_SEARCH_TOOL&gt;Open ANST&lt;/&gt;</li>
</ul>
<p>Для запуска отчёта мы предварительно заполняем параметры отчёта:</p><pre class="urvanov-syntax-highlighter-plain-tag">START-OF-SELECTION.
  zcl_epss_sapevent=&gt;set_report_parameters(
    it_parameters = VALUE #( ( selname = 'P_TRANS' kind = 'P' option = 'EQ' low = 'SE24' ) ) ).

  MESSAGE i000(zsm_mess) WITH 'ANST_TESTING' 'ANST_TESTING_AT_REC' 'VAR'.</pre><p>Подводя итог можно сказать что таким образом мы можем реализовать как собственные типы ссылок, так и расширять функционал стандартных.</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/call_transaction_se91_documentation/">Запуск транзакций из сообщений</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/call_transaction_se91_documentation/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Запуск транзакций из SBWP</title>
		<link>https://abap-blog.ru/osnovy-abap/call_transaction_sbwp/</link>
					<comments>https://abap-blog.ru/osnovy-abap/call_transaction_sbwp/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Wed, 21 Apr 2021 04:48:16 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=7156</guid>

					<description><![CDATA[<p>Иногда нам необходимо оповестить пользователя о каком-либо событии по внутренней почте, с возможностью его перехода к заданной транзакции и с учётом контекста оповещения, т.е. с заполнением параметров актуальных для данного оповещения. Во внутренней почте мы можем сформировать ссылку на бизнес объект (транзакция SWO1), а уже у бизнес объекта реализовать метод display для запуска нужной нам [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/call_transaction_sbwp/">Запуск транзакций из SBWP</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Иногда нам необходимо оповестить пользователя о каком-либо событии по внутренней почте, с возможностью его перехода к заданной транзакции и с учётом контекста оповещения, т.е. с заполнением параметров актуальных для данного оповещения.</p>
<p>Во внутренней почте мы можем сформировать ссылку на бизнес объект (транзакция <strong>SWO1</strong>), а уже у бизнес объекта реализовать метод <strong>display</strong> для запуска нужной нам транзакции.</p>
<p>Давайте разберёмся как это сделать.</p>
<p><span id="more-7156"></span></p>
<p>Для начала переходим в транзакцию <strong>SWO1</strong> и создаём новый объект &#8212; ZSMTRCALL:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/1swo_create.png"><img loading="lazy" class="alignnone size-full wp-image-7157" src="https://abap-blog.ru/wp-content/uploads/2021/04/1swo_create.png" alt="" width="415" height="226" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/1swo_create.png 415w, https://abap-blog.ru/wp-content/uploads/2021/04/1swo_create-300x163.png 300w" sizes="(max-width: 415px) 100vw, 415px" /></a></p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/2swo_create-1.png"><img loading="lazy" class="alignnone size-full wp-image-7160" src="https://abap-blog.ru/wp-content/uploads/2021/04/2swo_create-1.png" alt="" width="453" height="228" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/2swo_create-1.png 453w, https://abap-blog.ru/wp-content/uploads/2021/04/2swo_create-1-300x151.png 300w" sizes="(max-width: 453px) 100vw, 453px" /></a></p>
<p>Для запуска транзакции определим ключевое поле &#8212; ид. транзакции:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/3key_field.png"><img loading="lazy" class="alignnone size-full wp-image-7162" src="https://abap-blog.ru/wp-content/uploads/2021/04/3key_field.png" alt="" width="453" height="211" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/3key_field.png 453w, https://abap-blog.ru/wp-content/uploads/2021/04/3key_field-300x140.png 300w" sizes="(max-width: 453px) 100vw, 453px" /></a></p>
<p>Можно определить на базе стандартной таблицы TSTC:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/3tid_key.png"><img loading="lazy" class="alignnone size-full wp-image-7167" src="https://abap-blog.ru/wp-content/uploads/2021/04/3tid_key.png" alt="" width="587" height="165" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/3tid_key.png 587w, https://abap-blog.ru/wp-content/uploads/2021/04/3tid_key-300x84.png 300w" sizes="(max-width: 587px) 100vw, 587px" /></a></p>
<p>При запуске необходимо каким-то образом определять контекст запуска, для этого у нашего бизнес объекта определим ключевое поле в виде GUID-a:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/3key_description.png"><img loading="lazy" class="alignnone size-full wp-image-7163" src="https://abap-blog.ru/wp-content/uploads/2021/04/3key_description.png" alt="" width="594" height="161" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/3key_description.png 594w, https://abap-blog.ru/wp-content/uploads/2021/04/3key_description-300x81.png 300w" sizes="(max-width: 594px) 100vw, 594px" /></a></p>
<p>Переопределим метод <strong>display</strong>:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/4display.png"><img loading="lazy" class="alignnone size-full wp-image-7164" src="https://abap-blog.ru/wp-content/uploads/2021/04/4display.png" alt="" width="745" height="324" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/4display.png 745w, https://abap-blog.ru/wp-content/uploads/2021/04/4display-300x130.png 300w" sizes="(max-width: 745px) 100vw, 745px" /></a></p>
<p>И перейдём к коду:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/4display_change-1.png"><img loading="lazy" class="alignnone size-full wp-image-7166" src="https://abap-blog.ru/wp-content/uploads/2021/04/4display_change-1.png" alt="" width="704" height="324" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/4display_change-1.png 704w, https://abap-blog.ru/wp-content/uploads/2021/04/4display_change-1-300x138.png 300w" sizes="(max-width: 704px) 100vw, 704px" /></a></p>
<p>Код реализации метода display:</p><pre class="urvanov-syntax-highlighter-plain-tag">begin_method display changing container.
DATA:
  lt_params TYPE STANDARD TABLE OF tpara.

lt_params = VALUE #( ( paramid = 'ZSMGUID' partext = object-key-guid22 ) ).

CALL FUNCTION 'CC_CALL_TRANSACTION_NEW_TASK' DESTINATION 'NONE' STARTING NEW TASK space
  EXPORTING
    transaction       = CONV sy-tcode( object-key-transactioncode )
    skip_first_screen = abap_true
  TABLES
    paramtab          = lt_params
  EXCEPTIONS
    error             = 1
    OTHERS            = 2.
IF sy-subrc &lt;&gt; 0.
  MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.
end_method.</pre><p>Переведём статус БО (implemented затем released):</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/6release-1.png"><img loading="lazy" class="alignnone size-full wp-image-7171" src="https://abap-blog.ru/wp-content/uploads/2021/04/6release-1.png" alt="" width="970" height="327" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/6release-1.png 970w, https://abap-blog.ru/wp-content/uploads/2021/04/6release-1-300x101.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/6release-1-768x259.png 768w" sizes="(max-width: 970px) 100vw, 970px" /></a></p>
<p>И сгенерируем нажав на красную кнопку генерации.</p>
<p>Исходя из кода, в запускаемой транзакции должен быть SET/GET параметр с ID контекста, назовём его <!--StartFragment -->ZSMGUID, перейдём в SE80 и создадим параметр:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/5spa.png"><img loading="lazy" class="alignnone size-full wp-image-7168" src="https://abap-blog.ru/wp-content/uploads/2021/04/5spa.png" alt="" width="844" height="489" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/5spa.png 844w, https://abap-blog.ru/wp-content/uploads/2021/04/5spa-300x174.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/5spa-768x445.png 768w" sizes="(max-width: 844px) 100vw, 844px" /></a></p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/5spa_save.png"><img loading="lazy" class="alignnone size-full wp-image-7169" src="https://abap-blog.ru/wp-content/uploads/2021/04/5spa_save.png" alt="" width="449" height="184" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/5spa_save.png 449w, https://abap-blog.ru/wp-content/uploads/2021/04/5spa_save-300x123.png 300w" sizes="(max-width: 449px) 100vw, 449px" /></a></p>
<p>В транзакции относительно значения параметра привязанного к SET/GET параметру будет считываться контекст запуска (значения экрана выбора как правило).</p>
<p>Само сохранение и чтение контекста может быть реализовано множеством способов:</p>
<ul>
<li>своя Z таблица с хранением значений экрана выбора,</li>
<li>сохранение варианта в программе, тогда логичнее будет сделать не CALL TRANSACTION, а SUBMIT и ID контекста заменить на ID варианта,</li>
<li>сохранение в INDX таблице или подобной,</li>
<li>использовать какое-либо другое стандартное решение.</li>
</ul>
<p>В данном примере мы только выведем ID контекста, код программы:</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT zsm_demo_call.

PARAMETERS:
  p_guid TYPE swu_form-guid MEMORY ID zsmguid.

START-OF-SELECTION.
  WRITE: `Context ID: `, p_guid.</pre><p>Создадим транзакцию к программе &#8212; ZSM_CALL_DEMO</p>
<p>Уже сейчас мы можем протестировать наш БО, передав в него ключ в виде Транзакции и ID контекста, после чего вызвать метод display:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/7test.png"><img loading="lazy" class="alignnone size-full wp-image-7172" src="https://abap-blog.ru/wp-content/uploads/2021/04/7test.png" alt="" width="683" height="206" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/7test.png 683w, https://abap-blog.ru/wp-content/uploads/2021/04/7test-300x90.png 300w" sizes="(max-width: 683px) 100vw, 683px" /></a></p>
<p>Если всё сделано правильно, отобразиться наш отчёт с выводом GUID-a контекста.</p>
<blockquote><p>Если Вам достаточно лишь запустить транзакцию, необходимости в создании своего БО нет, т.к. есть несколько уже существующих, например: <strong>CUST_TRAN</strong>.</p></blockquote>
<p>Далее воспользуемся тестовой программой отправки письма в SBWP чтобы убедиться в корректном запуске транзакции из внутренней почты:</p><pre class="urvanov-syntax-highlighter-plain-tag">DATA:
  lv_transaction TYPE sy-tcode VALUE 'ZSM_CALL_DEMO',
  lv_guid        TYPE guid_22 VALUE '123',
  lv_object_key  TYPE string.

TRY.
    DATA(lo_msg) = NEW cl_bcs_message( ).
    lo_msg-&gt;set_subject( 'Тест отправки письма'  ).

    lo_msg-&gt;add_recipient(
      EXPORTING
        iv_address      = 'DEVELOPER'
        iv_commtype     = 'USR' ).

    CONCATENATE lv_transaction lv_guid INTO lv_object_key RESPECTING BLANKS.
    lv_object_key = shift_right( lv_object_key ).
    lv_object_key = replace( val = lv_object_key regex = '\s' with = '%20' occ = 0 ).

    lo_msg-&gt;set_main_doc(
      EXPORTING
        iv_contents_txt = |&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;br/&gt;&lt;b&gt;Тестовое сообщение&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;| &amp;&amp;
                          |&lt;A HREF="sap-object://ZSMTRCALL { lv_object_key }"&gt;| &amp;&amp;
                          |Call transaction ZSM_CALL_DEMO&lt;/A&gt;&lt;/body&gt;&lt;/html&gt;|
        iv_doctype      = 'htm' ).

    lo_msg-&gt;set_send_immediately( abap_true ).
    lo_msg-&gt;send( ).
  CATCH cx_bcs_send INTO DATA(lx_ex).
    MESSAGE lx_ex-&gt;get_text( ) TYPE 'E'.
ENDTRY.</pre><p>В программе отправки мы формируем HTML письмо со ссылкой на SAP объект с помощью специального префикса <strong>sap-object</strong>. После запуска Вы можете зайти в SBWP и убедиться в том, что ссылка работает.</p>
<h4>Альтернативное решение</h4>
<p>Если Вам не требуется формировать ссылку непосредственно в тексте письма, можно не создавать бизнес объект, а вместо этого сформировать вложение в виде ярлыка для запуска транзакции следующим образом:</p><pre class="urvanov-syntax-highlighter-plain-tag">TRY.
    DATA(lo_msg) = NEW cl_bcs_message( ).
    lo_msg-&gt;set_subject( 'Тест отправки письма'  ).

    lo_msg-&gt;add_recipient(
      EXPORTING
        iv_address      = 'DEVELOPER'
        iv_commtype     = 'USR' ).

    NEW cl_nwbc_sapgui_shortcut( 
      iv_transaction_code    = 'ZSM_CALL_DEMO'
      iv_skip_initial_screen = abap_true
      iv_gui_size            = cl_nwbc_sapgui_shortcut=&gt;sc_gui_size_maximized
      it_parameters          = VALUE #( ( name = 'p_guid' value = '123' ) ) 
    )-&gt;get_shortcut(
      IMPORTING
        et_shortcut = DATA(lt_shortcut) ).

    lo_msg-&gt;add_attachment(
      EXPORTING
        iv_description  = 'Open transaction'
        iv_filename     = 'transaction.sap'
        iv_contents_txt = concat_lines_of( table = lt_shortcut 
                                           sep   = cl_abap_char_utilities=&gt;cr_lf ) ).

    lo_msg-&gt;set_main_doc(
      EXPORTING
        iv_contents_txt = |'Shortcut sample|
        iv_doctype      = 'htm' ).

    lo_msg-&gt;set_send_immediately( abap_true ).
    lo_msg-&gt;send( ).
  CATCH cx_bcs_send INTO DATA(lx_ex).
    MESSAGE lx_ex-&gt;get_text( ) TYPE 'E'.
ENDTRY.</pre><p>&nbsp;</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/call_transaction_sbwp/">Запуск транзакций из SBWP</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/call_transaction_sbwp/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Внутренние таблицы как источник в SQL запросах</title>
		<link>https://abap-blog.ru/osnovy-abap/internal-table-as-data-source-select/</link>
					<comments>https://abap-blog.ru/osnovy-abap/internal-table-as-data-source-select/#comments</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Tue, 13 Apr 2021 17:58:58 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[Работа с БД]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=7127</guid>

					<description><![CDATA[<p>В релизе ABAP 7.52 стало возможным использование внутренних таблиц как источника данных в ABAP SQL: [crayon-618a04bb192cb018774362/] Существует два сценария выполнения таких запросов: Для выполнения SQL запроса не требуется переноса содержимого внутренней таблицы на уровень СУБД. В таком случае обработка запроса осуществляется непосредственно на сервере приложений, по аналогии с табличным буфером. Для выполнения SQL запроса требуется [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/internal-table-as-data-source-select/">Внутренние таблицы как источник в SQL запросах</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>В релизе ABAP 7.52 стало возможным использование внутренних таблиц как <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abapselect_itab.htm" target="_blank" rel="noopener">источника данных</a> в ABAP SQL:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT FROM ...@itab AS table_alias...</pre><p>Существует два сценария выполнения таких запросов:</p>
<ul>
<li>Для выполнения SQL запроса не требуется переноса содержимого внутренней таблицы на уровень СУБД. В таком случае обработка запроса осуществляется непосредственно на сервере приложений, по аналогии с табличным буфером.</li>
<li>Для выполнения SQL запроса требуется перенести содержимое внутренней таблицы во временную таблицу на уровень СУБД. Этот сценарий поддерживается не всеми СУБД и чтобы статический анализ кода не ругался, следует использовать прагму: <strong>##itab_db_select</strong>. При отсутствии поддержки система выдаст исключение в runtime &#8212; CX_SY_SQL_UNSUPPORTED_FEATURE.</li>
</ul>
<p>Разберём текущие особенности использования этих сценариев.</p>
<p><span id="more-7127"></span></p>
<p>Основным предназначением данного синтаксиса безусловно является использование внутренней таблицы и JOIN её данных с данными в СУБД. По сути это еще одна альтернатива<strong> FOR ALL ENTRIES</strong>, но без тех ограничений что есть в <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenwhere_all_entries.htm" target="_blank" rel="noopener">FAE</a>.</p>
<p>Использовать этот синтаксис как замену операций READ TABLE и LOOP в первом сценарии допустимо, но как правило выполняться это будет медленнее. Говоря о первом сценарии следует упомянуть что <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenbuffer_restrictions.htm" target="_blank" rel="noopener">условия</a>, по которым система решает следует ли переносить таблицу на уровень СУБД аналогичны тем условиям, что используются для определения необходимости обращения к СУБД при использовании буферизированных таблиц. Таким образом таблица будет переносится на уровень СУБД если:</p>
<ul>
<li>Используются агрегатные функции,</li>
<li>Используется DISTINCT,</li>
<li>Используются JOIN-ы,</li>
<li>Используется WITH,</li>
<li>Используются SQL выражения не из <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenbuffer_expressions.htm" target="_blank" rel="noopener">списка совместимых</a>,</li>
<li>Множество других ограничений&#8230;</li>
</ul>
<p>Убедиться в том что таблица переносится в СУБД можно посмотрев трассировку запроса, выглядеть это будет примерно следующим образом:<a href="https://abap-blog.ru/wp-content/uploads/2021/04/fda_write.png"><img loading="lazy" class="alignnone size-full wp-image-7131" src="https://abap-blog.ru/wp-content/uploads/2021/04/fda_write.png" alt="" width="1114" height="445" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/fda_write.png 1114w, https://abap-blog.ru/wp-content/uploads/2021/04/fda_write-300x120.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/fda_write-1024x409.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/04/fda_write-768x307.png 768w" sizes="(max-width: 1114px) 100vw, 1114px" /></a></p>
<p>Есть ряд особенностей SQL запросов с внутренней таблицей как источником данных:</p>
<ul>
<li>Нельзя указать более одной таблицы в SQL запросе, JOIN двух внутренних таблиц сделать не выйдет. Нельзя использовать одну и ту же таблицу в запросе несколько раз, например с дополнением WITH.</li>
<li>Обязательно требуется указание псевдонима для внутренней таблицы через дополнение AS.</li>
<li>Тип строки таблицы может быть как элементарным, так и структурным:
<ul>
<li>Если строка элементарного типа, обращаться к столбцу этой таблицы можно через <strong>table_line</strong>. В списке полей для table_line можно задать псевдоним через AS. Тип таблицы в данном случае не может быть строкой (допустимо использование строк ссылающихся на словарный тип SSTRING) или ссылочным типом.</li>
<li>Если строка структурного типа, недопустимо обращение в SQL запросе к полям являющимися вложенными структурами, строками или таблицами.</li>
</ul>
</li>
<li>Если используется дополнение <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abaporderby_clause.htm#!ABAP_ALTERNATIVE_1@1@" target="_blank" rel="noopener">ORDER BY PRIMARY KEY</a> во внутренней таблице обязательно должен быть указан <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenprimary_table_key_glosry.htm" target="_blank" rel="noopener">primary key</a>.</li>
<li>Нельзя при статическом указании таблицы во FROM использовать обобщённые типы таблиц (вроде INDEX TABLE). Обобщённые типы могут быть использованы при динамическом FROM. Пример:<br />
<pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_test DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      start,
      test IMPORTING it_table TYPE INDEX TABLE.
ENDCLASS.

CLASS lcl_test IMPLEMENTATION.

  METHOD test.
    DATA:
      lt_keys TYPE STANDARD TABLE OF sflight.

    SELECT connid, price, carrid
      FROM ('@it_table') AS sflight_tab
        INTO CORRESPONDING FIELDS OF TABLE @lt_keys.

    cl_demo_output=&gt;display( lt_keys ).
  ENDMETHOD.

ENDCLASS.</pre>
</li>
<li>Внутренняя таблица не может содержать столбцов со ссылкой на устаревшие типы данных: DF16_SCL и DF34_SCL.</li>
<li>Если внутренняя таблица имеет элементарный тип, при использовании <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abencommon_table_expression_glosry.htm" target="_blank" rel="noopener">CTE</a>, после WITH нельзя указывать поля через * или data_source~*.</li>
<li>Для внутренней таблицы необходимо указывать primary key явным образом, при использовании стандартного ключа (with default key) система выдаст предупреждение.</li>
</ul>
<p>Даже если таблица не будет перенесена на уровень СУБД, данные в ней обрабатываются так как же как и в СУБД:</p>
<ul>
<li>Строки со ссылкой на SSTRING обрабатываются как строки с фиксированной длинной и игнорированием завершающих пробелов.</li>
<li>SQL выражения работают таким же образом, как если бы они работали на уровне СУБД:
<ul>
<li>DIV и MOD могут выдавать отличные от аналогичных в ABAP результаты</li>
<li>Обработка NULL значений аналогична тому как это работает в SQL запросах.</li>
</ul>
</li>
<li>Таблица всегда рассматривается как независимая от манданта.</li>
</ul>
<h3>Примеры</h3>
<p>Следующий пример демонстрирует типичный случай использования внутренних таблиц как источника данных, а именно перенос таблицы на уровень СУБД и выполнение JOIN:</p><pre class="urvanov-syntax-highlighter-plain-tag">DATA lt_itab TYPE HASHED TABLE OF scarr
                 WITH UNIQUE KEY mandt carrid.

    IF NOT cl_abap_dbfeatures=&gt;use_features(
             EXPORTING
               requested_features =
                 VALUE #( ( cl_abap_dbfeatures=&gt;itabs_in_from_clause ) ) ).
      cl_demo_output=&gt;display(
        `Система не поддерживает внутренние таблицы как источник данных` ).
      RETURN.
    ENDIF.

    lt_itab =  VALUE #( ( carrid = 'LH' carrname = 'L.H.' )
                        ( carrid = 'UA' carrname = 'U.A.' ) ).

    SELECT scarr~carrid, scarr~carrname, spfli~connid
           FROM @lt_itab AS scarr
             INNER JOIN spfli ON scarr~carrid = spfli~carrid
           INTO TABLE @DATA(lt_result)
           ##db_feature_mode[itabs_in_from_clause] ##itab_db_select.</pre><p>Пример в котором не происходит обращения к СУБД:</p><pre class="urvanov-syntax-highlighter-plain-tag">TYPES:
      BEGIN OF ts_line,
        id     TYPE c LENGTH 1,
        number TYPE i,
      END OF ts_line.

    DATA lt_itab TYPE HASHED TABLE OF ts_line
                 WITH UNIQUE KEY id.

    DATA(lo_rnd) = cl_abap_random_int=&gt;create( seed = CONV i( sy-uzeit ) min = 1 max = 100 ).

    lt_itab = VALUE #(
      FOR i = 1 UNTIL i &gt; 25
      ( id = substring( val = sy-abcde off = i len = 1 )
        number = lo_rnd-&gt;get_next( ) ) ).

    SELECT *
      FROM @lt_itab AS numbers
      WHERE number &gt; 50
      ORDER BY id
      INTO TABLE @DATA(lt_result)
      ##db_feature_mode[itabs_in_from_clause] ##itab_db_select.

    cl_demo_output=&gt;display( lt_result ).</pre><p>Формирование результата элементарного типа (lt_result1) и структурного (lt_result2):</p><pre class="urvanov-syntax-highlighter-plain-tag">DATA lt_itab TYPE SORTED TABLE OF i WITH UNIQUE KEY table_line.
lt_itab =  VALUE #( ( 1 )
                    ( 2 )
                    ( 3 ) ).

DATA lt_result1 LIKE lt_itab.

SELECT table_line
       FROM @lt_itab AS numbers
       INTO TABLE @lt_result1.

cl_demo_output=&gt;write( lt_result1 ).

SELECT table_line AS number
       FROM @lt_itab AS numbers
       INTO TABLE @DATA(lt_result2).

cl_demo_output=&gt;display( lt_result2 ).</pre><p></p>
<h3>Производительность</h3>
<p>Если сравнивать скорость выполнения FAE с FDA и JOIN с внутренней таблицей, скорость работы <a href="https://blogs.sap.com/2019/03/31/compare-performance-between-select-for-all-entries-and-amdp/" target="_blank" rel="noopener">практически не отличается</a>, оба сценария выигрывают у сценария переноса внутренней таблицы через AMDP.</p>
<h3>Итого</h3>
<p>Подводя итоги, данный механизм выглядит вполне привлекательной заменой использования запросов с FOR ALL ENTRIES, если сравнивать с точки зрения накладываемых в обоих случаях ограничений и безопасности в части необходимости доп. проверок в коде при использовании FAE.</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/internal-table-as-data-source-select/">Внутренние таблицы как источник в SQL запросах</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/internal-table-as-data-source-select/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Динамические журнальные точки</title>
		<link>https://abap-blog.ru/osnovy-abap/dinamicheskie-zhurnalnye-tochki/</link>
					<comments>https://abap-blog.ru/osnovy-abap/dinamicheskie-zhurnalnye-tochki/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Thu, 08 Apr 2021 13:52:18 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=7082</guid>

					<description><![CDATA[<p>В ABAP довольно таки давно существует функционал журнальных точек, который позволяет активировать запись в журнал (в тр. SAAB) определённых данных из программы. Для этого необходимо завести ключ (ID группы контрольных точек) и в коде использовать оператор LOG-POINT. Но что если необходимо поместить в журнал некоторые данные при выполнении программы, а менять код нельзя? Или необходимо [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/dinamicheskie-zhurnalnye-tochki/">Динамические журнальные точки</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>В ABAP довольно таки давно существует функционал журнальных точек, который позволяет активировать запись в журнал (в тр. SAAB) определённых данных из программы. Для этого необходимо завести ключ (ID группы контрольных точек) и в коде использовать оператор <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abaplog-point.htm" target="_blank" rel="noopener">LOG-POINT.</a></p>
<p>Но что если необходимо поместить в журнал некоторые данные при выполнении программы, а менять код нельзя? Или необходимо понять откуда конкретно вызывается анализируемый код?</p>
<p>Для этих целей начиная с ABAP 7.5 ввели так называемые динамические журнальные точки, которые позволяют:</p>
<ul>
<li>Сохранять значения переменных по определённым условиям</li>
<li>Записывать стек вызовов, чтобы понять откуда происходит вызов того или иного кода</li>
<li>Выполнять анализ выполнения отдельного SQL выражения</li>
<li>Активировать запись SQL трассировки для заданного выражения оп указанному условию</li>
<li>Активировать трассировку использования табличного буфера заданного SQL выражения для анализа потребляемой памяти</li>
</ul>
<p>Создавать или модифицировать журнальные точки можно либо через ADT (Eclipse), либо через транзакцию <strong>SDLP</strong>.</p>
<p>Далее на простых примерах рассмотрим вариант использования.</p>
<p><span id="more-7082"></span></p>
<h3>Полномочия</h3>
<p>Для работы с динамическими точками нужно иметь соответствующие полномочия &#8212; объект <strong>S_DYNLGPTS</strong>.</p>
<h3>Логирование простых переменных</h3>
<p>Под логированием простых переменных понимается возможность сохранения в журнал значений переменных элементарного типа (не ссылок, не структур и не табличных значений).</p>
<p>Рассмотрим пример кода:</p><pre class="urvanov-syntax-highlighter-plain-tag">START-OF-SELECTION.
  DATA(lo_rnd) = cl_abap_random_int=&gt;create( seed = CONV #( sy-uzeit )
                                             min  = 10
                                             max  = 100 ).

  DO 10 TIMES.
    DATA(lv_random_value) = lo_rnd-&gt;get_next( ).
  ENDDO.</pre><p>Каждый раз запуская отчёт генерируется произвольное значение. Зайдём в Eclipse и создадим точку, для этого перейдём на нужную нам строку кода и правой кнопкой по столбцу с номерами строк вызовем контекстное меню:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/create_log_pont.png"><img loading="lazy" class="alignnone size-full wp-image-7085" src="https://abap-blog.ru/wp-content/uploads/2021/04/create_log_pont.png" alt="" width="621" height="359" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/create_log_pont.png 621w, https://abap-blog.ru/wp-content/uploads/2021/04/create_log_pont-300x173.png 300w" sizes="(max-width: 621px) 100vw, 621px" /></a></p>
<p>Откроется экран создания (по умолчанию логирование простых переменных):</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/log_simple_variable_values.png"><img loading="lazy" class="alignnone size-full wp-image-7086" src="https://abap-blog.ru/wp-content/uploads/2021/04/log_simple_variable_values.png" alt="" width="537" height="662" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/log_simple_variable_values.png 537w, https://abap-blog.ru/wp-content/uploads/2021/04/log_simple_variable_values-243x300.png 243w" sizes="(max-width: 537px) 100vw, 537px" /></a></p>
<p><strong>Основные настройки</strong></p>
<ul>
<li>В разделе <strong>Location</strong> можно убедиться в корректности определения места вызова.</li>
<li>В разделе <strong>Activity</strong> нас интересует тип точки: <strong>Log Simple Variable Values</strong>.</li>
<li>В разделе<strong> Variable(s)</strong> можно определить набор переменных значения которых нужно записать в журнал. Имена переменных можно перечислить через запятую.</li>
<li>В разделе <strong>Conditions</strong> определяются условия запуска.</li>
<li>В разделе <strong>Description</strong> определяется имя журнальной точки.</li>
<li>В разделе <strong>Activation</strong> определяется:
<ul>
<li>Статус &#8212; по умолчанию активно</li>
<li>Для какого пользователя должна срабатывать точка</li>
<li>На каких серверах</li>
<li>Предел по времени, после которого точка деактивируется</li>
<li>Время хранения журналов</li>
<li>Максимальное число срабатывания на сессию</li>
</ul>
</li>
</ul>
<p>В разделе <strong>Optional Conditions</strong> можно задать простые условия для срабатывания точек:</p>
<div id="wrapper">
<div id="container">
<div class="body conbody">
<ul id="loioe5a4d03ceaa0419e9f1f075af0af6b9a__ul_rkc_sh5_fq" class="ul">
<li class="li">Стандартные операторы сравнения: <strong class="ph b"> EQ,=,NE,&lt;&gt;,&gt;&lt;,&lt;,LT,&gt;,GT,&lt;=,=&lt;,LE,&gt;=,=&lt;,GE</strong></li>
<li class="li">Операторы для анализа строк: <strong class="ph b">CO,CN,CA,NA,CS,NS,CP,NP</strong></li>
<li class="li">Унарные операторы: <strong class="ph b">IS INITIAL, IS BOUND, IS ASSIGNED</strong></li>
</ul>
<p>Примеры:</p><pre class="urvanov-syntax-highlighter-plain-tag">sy-subrc &lt;&gt; 0
" Или	
oref IS BOUND and oref-&gt;attr = `abc`
" Или	
( itab[1]-string IS INITIAL OR NOT itab[1]-string CO `0123456789` ) AND
( itab[2]-string IS INITIAL OR NOT itab[2]-string CO `0123456789` )</pre><p>Как видно из последнего примера, условия можно группировать используя скобки.</p>
</div>
</div>
</div>
<p>Созданная активная точка сразу же отображается (по аналогии с точкой прерывания) в редакторе кода:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/active_log_point.png"><img loading="lazy" class="alignnone size-full wp-image-7087" src="https://abap-blog.ru/wp-content/uploads/2021/04/active_log_point.png" alt="" width="601" height="126" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/active_log_point.png 601w, https://abap-blog.ru/wp-content/uploads/2021/04/active_log_point-300x63.png 300w" sizes="(max-width: 601px) 100vw, 601px" /></a></p>
<p>Так же во View <strong>Logpoints</strong>:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/logpoints_view.png"><img loading="lazy" class="alignnone size-full wp-image-7088" src="https://abap-blog.ru/wp-content/uploads/2021/04/logpoints_view.png" alt="" width="1360" height="158" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/logpoints_view.png 1360w, https://abap-blog.ru/wp-content/uploads/2021/04/logpoints_view-300x35.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/logpoints_view-1024x119.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/04/logpoints_view-768x89.png 768w" sizes="(max-width: 1360px) 100vw, 1360px" /></a></p>
<p>И там и там она может быть удалена/активирована/изменена/деактивирована. Там же можно сбросить/очистить журнал.</p>
<p>Посмотреть журнал после выполнения отчёта можно в том же View, нажав на столбец <strong>Log Events </strong>предварительно обновив (по кнопке или нажав F5):</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/simple_view.png"><img loading="lazy" class="alignnone size-full wp-image-7089" src="https://abap-blog.ru/wp-content/uploads/2021/04/simple_view.png" alt="" width="1103" height="274" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/simple_view.png 1103w, https://abap-blog.ru/wp-content/uploads/2021/04/simple_view-300x75.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/simple_view-1024x254.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/04/simple_view-768x191.png 768w" sizes="(max-width: 1103px) 100vw, 1103px" /></a></p>
<p>В качестве ключа журнальной точки у нас выступает значение переменной, как видно на картинке, значение 74 у нас было присвоено переменной два раза. Если в журнальной точке будет несколько переменных, в качестве ключа уже будет составной ключ из их значений:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/combined_key.png"><img loading="lazy" class="alignnone size-full wp-image-7099" src="https://abap-blog.ru/wp-content/uploads/2021/04/combined_key.png" alt="" width="660" height="253" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/combined_key.png 660w, https://abap-blog.ru/wp-content/uploads/2021/04/combined_key-300x115.png 300w" sizes="(max-width: 660px) 100vw, 660px" /></a></p>
<h3>Сохранение стека вызовов</h3>
<p>Иногда полезно узнать откуда был вызван тот или иной код, например: когда статически это выявить невозможно (динамические вызовы ФМ-ов или методов). Для этих целей служит следующий тип журнальных точек &#8212; <strong>Log Call Stack</strong>.</p>
<p>В качестве примера выставим такую точку в конструкторе ALV cl_gui_alv_grid:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/alv_call_stack.png"><img loading="lazy" class="alignnone size-full wp-image-7092" src="https://abap-blog.ru/wp-content/uploads/2021/04/alv_call_stack.png" alt="" width="736" height="552" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/alv_call_stack.png 736w, https://abap-blog.ru/wp-content/uploads/2021/04/alv_call_stack-300x225.png 300w" sizes="(max-width: 736px) 100vw, 736px" /></a></p>
<p>И откроем несколько раз SE16 и SE11 с просмотром данных в ALV. Журнал будет выглядеть примерно следующим образом:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/log_stack.png"><img loading="lazy" class="alignnone size-full wp-image-7093" src="https://abap-blog.ru/wp-content/uploads/2021/04/log_stack.png" alt="" width="1153" height="244" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/log_stack.png 1153w, https://abap-blog.ru/wp-content/uploads/2021/04/log_stack-300x63.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/log_stack-1024x217.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/04/log_stack-768x163.png 768w" sizes="(max-width: 1153px) 100vw, 1153px" /></a></p>
<p>Я вызывал просмотр из SE16 и SE11 &#8212; два вызова, но запись одна.</p>
<p>Обратите внимание на ключ &#8212; в данном случае для каждого уникального стека вызовов генерируется хэш стека (функция STACK_HASH) и записывается в качестве ключа. Несмотря на запуск просмотра данных из SE16 и SE11 обе транзакции стартуют внутри себя просмотр через одну и ту же сгенерированную программу, именно её <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abeninternal_session.htm" target="_blank" rel="noopener">internal session</a> стек и будет записан в журнал.</p>
<h3>Определяемые пользователем журнальные точки</h3>
<p>Наиболее гибким вариантом журнальных точек являются &#8212; <strong>User Defined Logging</strong>.</p>
<p>Основные отличия:</p>
<ul>
<li>Возможность определения ключа для журнала (при одинаковом значении ключа в журнале отображается последняя запись)</li>
<li>Возможность записи в журнал не только элементарных типов, но и структур и таблиц (не полностью).</li>
</ul>
<p>В качестве ключа не следует использовать таблицы, ссылочные переменные или глубокие структуры, т.к. они не могут быть преобразованы к типу string, который используется как тип ключа.</p>
<p>Допустим мы захотели записать в журнал данные по всем отображаемым в ALV таблицам, для этого перейдём в ФМ REUSE_ALV_GRID_DISPLAY и сразу на входе создадим следующую журнальную точку:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/user_defined_logs.png"><img loading="lazy" class="alignnone size-full wp-image-7101" src="https://abap-blog.ru/wp-content/uploads/2021/04/user_defined_logs.png" alt="" width="511" height="609" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/user_defined_logs.png 511w, https://abap-blog.ru/wp-content/uploads/2021/04/user_defined_logs-252x300.png 252w" sizes="(max-width: 511px) 100vw, 511px" /></a></p>
<p>Запустим например в SE11 на просмотр таблицу SBOOK и SFLIGHT, после чего в журнале обнаружим следующий результат:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/04/table_rows.png"><img loading="lazy" class="alignnone size-full wp-image-7102" src="https://abap-blog.ru/wp-content/uploads/2021/04/table_rows.png" alt="" width="1024" height="373" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/table_rows.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/04/table_rows-300x109.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/table_rows-768x280.png 768w" sizes="(max-width: 1024px) 100vw, 1024px" /></a></p>
<p>В данной точке мы использовали встроенные функции для формирования ключа:</p>
<ul>
<li><strong>REQ_TYPE</strong> &#8212; позволяет определить тип входной точки (RFC, SUBMIT, HTTP запрос и т.п.)</li>
<li><strong>REQ_ENTRYPOINT</strong> &#8212; имя входной точки (отчёт, RFC модуль и т.п.)</li>
<li><strong>LINES</strong> &#8212; подсчёт количества строк в таблице</li>
</ul>
<p>В качестве значения пожелали увидеть значения в таблице. Но т.к. размер хранимых значений ограничен базисным параметром <strong>abap/aab_log_field_size_limit</strong>, строки вывелись не все.</p>
<h3>SQL трассировка</h3>
<p>Для того чтобы снять трассировку нужного запроса с возможностью определения условий можно воспользоваться отдельным типом журнальных точек &#8212; <strong>SQL Trace For Current Statement</strong>.</p>
<p>Как понятно из названия, необходимо выставить данный тип точки на SQL запросе и в момент его обработки будет включена трассировка в транзакции ST05 после выполнения автоматически отключена.</p>
<p>После формирования журнала двойной щелчок по нему приведёт к открытию транзакции ST05.</p>
<h3>Встроенные функции</h3>
<p>Ранее мы уже рассмотрели ряд встроенных функций в управление журнальными точками, рассмотрим кратко другие:</p>
<div id="wrapper">
<div id="container">
<div class="body refbody">
<div class="section">
<ul>
<li class="p"><strong>INEXACT_DF</strong>() &#8212; предоставляет информацию о точности выполнения арифметической операции с типами DECFLOAT16/34 (Не представляю чтобы мне это понадобилось <img src="https://s.w.org/images/core/emoji/13.1.0/72x72/1f601.png" alt="😁" class="wp-smiley" style="height: 1em; max-height: 1em;" />)</li>
<li class="p"><strong>SQL_TRACE</strong>( StackOn|StackOff ) &#8212; позволяет активировать в указанной точке SQL трассировку либо с записью ABAP стека, либо без. После прохода выражения на котором выставляется трейс (SQL запроса) запись трассировки отключается. Результат можно посмотреть в транзакции ST05.</li>
<li class="p"><strong>STACK</strong>( ) &#8212; получает стек в виде строки</li>
<li class="p"><strong>STACK_HASH</strong>( ) &#8212; получает base64 от стека в виде строки</li>
<li class="p"><strong>STRLEN</strong>( &lt;arg&gt; ) &#8212; размер строки</li>
<li class="p"><strong>SYSTEM_INFO</strong>( ) &#8212; получение системной информации. В качестве аргументов могут быть:
<ul>
<li>&#8216;A&#8217; : Имя текущего сервера приложений</li>
<li>&#8216;T&#8217; : Полный UTC Time stamp</li>
<li>&#8216;t&#8217; : Сокращённый UTS Time stamp</li>
</ul>
</li>
<li><strong>TABLEBUF_TRACE</strong>( StackOn|StackOff ) &#8212; Аналогичен SQL_TRACE но для трассировки использования табличного буфера</li>
<li><strong>XSTRLEN</strong>( &lt;arg&gt; ) &#8212; размер строки для XSTRING и X</li>
<li class="p"><strong>_DEBUG_INFO</strong>() &#8212; для внутреннего использования SAP-ом, выдаёт всякую интересную информацию:<a href="https://abap-blog.ru/wp-content/uploads/2021/04/debug_info.png"><img loading="lazy" class="alignnone size-full wp-image-7103" src="https://abap-blog.ru/wp-content/uploads/2021/04/debug_info.png" alt="" width="1164" height="584" srcset="https://abap-blog.ru/wp-content/uploads/2021/04/debug_info.png 1164w, https://abap-blog.ru/wp-content/uploads/2021/04/debug_info-300x151.png 300w, https://abap-blog.ru/wp-content/uploads/2021/04/debug_info-1024x514.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/04/debug_info-768x385.png 768w" sizes="(max-width: 1164px) 100vw, 1164px" /></a></li>
<li class="p"><strong>_SET_DEVTRACE</strong>(&lt;trace_activation&gt;) &#8212; опять же для внутреннего использования, управляет параметрами <strong>rdisp/TRACE</strong> и <strong>rdisp/TRACE_COMPS</strong></li>
</ul>
</div>
</div>
</div>
</div>
<p>Более подробную документацию по каждой функции вы можете найти в документации к ADT (Eclipse).</p>
<h3>Дополнительно</h3>
<ul>
<li>Отчёт<strong> RS_DLP_ANALYZE_CONDITION_LOAD</strong> &#8212; позволяет проверить условия на ошибки (если в ADT не ясно с чем связана ошибка проверки условия), проанализировать LOAD существующего в БД или введенного вручную условия.</li>
<li>Проверка на авторизацию осуществляется в классе <strong>CL_DLP_AUTHORITY</strong>, на случай если хотите пропустить.</li>
</ul><p>The post <a href="https://abap-blog.ru/osnovy-abap/dinamicheskie-zhurnalnye-tochki/">Динамические журнальные точки</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/dinamicheskie-zhurnalnye-tochki/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>AMDP Функции</title>
		<link>https://abap-blog.ru/osnovy-abap/amdp-funkcii/</link>
					<comments>https://abap-blog.ru/osnovy-abap/amdp-funkcii/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Sat, 03 Apr 2021 16:46:08 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[Работа с БД]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=7028</guid>

					<description><![CDATA[<p>Начиная с релиза ABAP 7.50 у нас появилась возможность создания не только AMDP процедур, но и AMDP функций. В зависимости от типа AMDP функции они могут быть вызваны: непосредственно из ABAP кода, из других AMDP методов, как источник данных для специальной ABAP CDS сущности называемой табличной функцией CDS. Далее рассмотрим все варианты использования AMDP функций. [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/amdp-funkcii/">AMDP Функции</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Начиная с релиза ABAP 7.50 у нас появилась возможность создания не только AMDP процедур, но и <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenamdp_function_methods.htm" target="_blank" rel="noopener">AMDP функций</a>. В зависимости от типа AMDP функции они могут быть вызваны:</p>
<ul>
<li>непосредственно из ABAP кода,</li>
<li>из других AMDP методов,</li>
<li>как источник данных для специальной ABAP CDS сущности называемой <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abencds_table_functions.htm" target="_blank" rel="noopener">табличной функцией CDS</a>.</li>
</ul>
<p>Далее рассмотрим все варианты использования AMDP функций.</p>
<p><span id="more-7028"></span></p>
<p>В отличие от AMDP процедур, AMDP функция реализуется как AMDP метод, но с указанием дополнения BY DATABASE FUNCTION:</p><pre class="urvanov-syntax-highlighter-plain-tag">METHOD meth BY DATABASE FUNCTION
            FOR db
            LANGUAGE db_lang
            [OPTIONS db_options]
            [USING   db_entities]
            [USING   SCHEMA schema1 OBJECTS db_entities]
            [USING   SCHEMA schema2 OBJECTS db_entities]
            ... .
  ...
ENDMETHOD.</pre><p>Существует следующие виды AMDP функций:</p>
<ul>
<li><strong>AMDP табличная функция</strong> &#8212; в контексте HANA это функция БД, которая в качестве результата возвращает табличный результат. В SQLScript табличные функции могут быть использованы как источник данных вместо таблиц или ракурсов.
<ul>
<li>AMDP табличная функция для AMDP методов.</li>
<li>AMDP табличная функция для табличной функции ABAP CDS.</li>
</ul>
</li>
<li><strong>AMDP скалярная функция</strong> &#8212; функция в БД, которая в качестве результата возвращает результат <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenelementary_data_type_glosry.htm" target="_blank" rel="noopener">элементарного типа</a>.</li>
</ul>
<p>Несмотря на возможность вызова AMDP функций из объектов HANA Native разработки, таких как хранимые процедуры или calculation view, SAP <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abendatabase_access_recomm.htm" target="_blank" rel="noopener">не рекомендует</a> так делать.</p>
<h2>Скалярные AMDP функции</h2>
<p>Особенности:</p>
<ul>
<li>Должна иметь RETURNING параметр элементарного типа.</li>
<li>IMPORING параметры должны быть элементарного типа.</li>
<li>Не допускается объявление исключений в определении через дополнение RAISING.</li>
<li>Допускается использование дополнения <a href="https://help.sap.com/doc/abapdocu_753_index_htm/7.53/en-US/abapmethod_by_db_proc.htm#!ABAP_ADDITION_3@3@" rel="nofollow "><strong>DETERMINISTIC</strong></a> после <strong>OPTIONS</strong> &#8212; чтобы обеспечить кеширование результата функции в рамках запроса, если входные параметры вызова функции будут идентичными. <a href="https://help.sap.com/viewer/de2486ee947e43e684d39702027f8a94/2.0.02/en-US/67c9b0f0b18c487b95f54a4a95e6b88f.html" target="_blank" rel="noopener">Более подробно.</a></li>
</ul>
<p>Допускается вызов скалярных AMDP функций непосредственно из ABAP, в т.ч. как функциональных методов.</p>
<p>Рассмотрим простой пример:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS zcl_amdp_scalar_function_demo DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC.
  PUBLIC SECTION.
    INTERFACES: if_amdp_marker_hdb.
    CLASS-METHODS:
      get_max_payment_sum IMPORTING VALUE(iv_mandt)           TYPE mandt
                                    VALUE(iv_carrid)          TYPE s_carr_id
                                    VALUE(iv_connid)          TYPE s_conn_id
                          RETURNING VALUE(rv_max_payment_sum) TYPE s_sum,
      get_flight_with_max_sum IMPORTING VALUE(iv_carrid)  TYPE s_carr_id
                                        VALUE(iv_connid)  TYPE s_conn_id
                              EXPORTING VALUE(et_flights) TYPE ty_flights.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_amdp_scalar_function_demo IMPLEMENTATION.
  METHOD get_max_payment_sum BY DATABASE FUNCTION
                             FOR HDB LANGUAGE SQLSCRIPT
                             OPTIONS READ-ONLY DETERMINISTIC
                             USING sflight.
    SELECT MAX( paymentsum ) INTO rv_max_payment_sum
        FROM sflight WHERE mandt  = :iv_mandt AND
                           carrid = :iv_carrid AND
                           connid = :iv_connid;
  ENDMETHOD.

  METHOD get_flight_with_max_sum BY DATABASE PROCEDURE
                                 FOR HDB LANGUAGE SQLSCRIPT
                                 OPTIONS READ-ONLY
                                 USING sflight
                                 zcl_amdp_scalar_function_demo=&gt;get_max_payment_sum.

    et_flights = SELECT * FROM sflight WHERE mandt = SESSION_CONTEXT('CLIENT') AND
                                             paymentsum = "ZCL_AMDP_SCALAR_FUNCTION_DEMO=&gt;GET_MAX_PAYMENT_SUM" ( iv_mandt =&gt; SESSION_CONTEXT('CLIENT'),
                                                                                                                 iv_carrid =&gt; :iv_carrid,
                                                                                                                 iv_connid =&gt; :iv_connid );
  ENDMETHOD.
ENDCLASS.</pre><p>В данном примере мы создали скалярную функцию get_max_payment_sum, которая возвращает максимальную сумму платежей по авиакомпании и рейсу вне зависимости от даты. А внутри AMDP процедуры get_flight_with_max_sum получили записи, где paymentsum равна максимальной в разрезе авиакомпании и рейса.</p>
<p>Обратите внимание на опцию <strong>DETERMINISTIC</strong>, если вы её используете, вы не можете получить мандант из функции SESSION_CONTEXT( &#8216;CLIENT&#8217; ).</p>
<p>Как уже было упомянуто ранее, такие функции могут быть вызваны из ABAP кода:</p><pre class="urvanov-syntax-highlighter-plain-tag">PARAMETERS: p_carrid TYPE s_carr_id,
            p_connid TYPE s_conn_id.

START-OF-SELECTION.
  cl_demo_output=&gt;display( |{ zcl_amdp_scalar_function_demo=&gt;get_max_payment_sum( iv_mandt = sy-mandt
                                                                                  iv_carrid = p_carrid
                                                                                  iv_connid = p_connid ) DECIMALS = 2 }| ).</pre><p></p>
<h2>Табличные AMDP функции</h2>
<h3>Табличная функция для AMDP методов</h3>
<p>Особенности:</p>
<ul>
<li>Функция должна иметь RETURNING параметр табличного типа, все компоненты структуры которого должны иметь <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abenelementary_data_type_glosry.htm" target="_blank" rel="noopener">элементарный тип</a>.</li>
<li>Не допускается использование CHANGING или EXPORTING параметров.</li>
<li>Не допускается объявление исключений в определении через дополнение RAISING.</li>
<li>Обязательно должно быть указание READ-ONLY.</li>
<li>Нельзя вызвать непосредственно из ABAP кода.</li>
</ul>
<p>Пример:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS zcl_amdp_function_demo DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES: if_amdp_marker_hdb.
    CLASS-METHODS:
      get_flight_with_max_sum IMPORTING VALUE(iv_carrid)  TYPE s_carr_id
                                        VALUE(iv_connid)  TYPE s_conn_id
                              RETURNING VALUE(rt_flights) TYPE ty_flights.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_amdp_function_demo IMPLEMENTATION.
  METHOD get_flight_with_max_sum BY DATABASE FUNCTION
                                 FOR HDB LANGUAGE SQLSCRIPT
                                 OPTIONS READ-ONLY
                                 USING sflight
                                 zcl_amdp_scalar_function_demo=&gt;get_max_payment_sum.

    RETURN SELECT * FROM sflight WHERE mandt = session_context('CLIENT') AND
                                       paymentsum = "ZCL_AMDP_SCALAR_FUNCTION_DEMO=&gt;GET_MAX_PAYMENT_SUM" ( iv_mandt =&gt; SESSION_CONTEXT('CLIENT'),
                                                                                                           iv_carrid =&gt; :iv_carrid,
                                                                                                           iv_connid =&gt; :iv_connid );
  ENDMETHOD.
ENDCLASS.</pre><p>Обратите внимание на использование ключевого слова RETURN для передачи результата функции.</p>
<p>В примере мы вновь использовали ранее определённую скалярную функцию для формирования табличного результата новой табличной функции.</p>
<p>При вызове из ABAP на этапе компиляции не будет предупреждения, но в момент запуска возникнет дамп &#8212; <strong>CALL_METHOD_AMDP_FUNC_ILLEGAL</strong>:</p><pre class="urvanov-syntax-highlighter-plain-tag">PARAMETERS: p_carrid TYPE s_carr_id,
            p_connid TYPE s_conn_id.

START-OF-SELECTION.
    DATA(lt_flights) = zcl_amdp_function_demo=&gt;get_flight_with_max_sum( iv_carrid = p_carrid
                                                                        iv_connid = p_connid ).</pre><p></p>
<h3>Табличная функция для ABAP CDS Table Functions</h3>
<p>В ABAP CDS можно объявить так называемую табличную функцию, основное предназначение которой &#8212; предоставить некоторый набор данных сформированный внутри AMDP функции. Сделан такой функционал прежде всего для возможностей использования HANA Native функционала, который пока по той или иной причине не доступен в ABAP CDS.</p>
<p>Особенности:</p>
<ul>
<li>Функция может быть объявлена только как статический метод с публичной областью видимости. Не допускается объявление через интерфейсы.</li>
<li>В определении метода должно использоваться ключевое дополнение <strong>FOR TABLE FUNCTION</strong> имяABAPCDSфункции. Соответственно одна и та же функция может быть использована только для одной ABAP CDS Table function.</li>
<li>Параметры AMDP табличной функции не объявляются в описании метода, они должны быть описаны как параметры ABAP CDS. Параметры всегда имеют элементарный тип, не допускается опциональных параметров.</li>
<li>Возвращаемый табличный тип определяется относительно структуры ABAP CDS, для зависимых от манданта CDS в структуре компонентов будет так же поле мандант. Тип таблицы &#8212; стандартная, ключ по умолчанию с именем <strong>result</strong> включает в себя все поля таблицы.</li>
<li>Не могут быть напрямую вызваны из ABAP.</li>
<li>Сначала создаётcя ABAP CDS с описанием входных параметров и структуры, а уже затем создаётся AMDP функция.</li>
</ul>
<p>Созданный таким образом ABAP CDS мы можем использовать в других CDS или непосредственно для вызова из ABAP кода.</p>
<p>Рассмотрим пример ABAP CDS:</p><pre class="urvanov-syntax-highlighter-plain-tag">@ClientHandling.type: #CLIENT_DEPENDENT
define table function ZDEMO_CDS_GET_SCARR_SPFLI
  with parameters
    @Environment.systemField: #CLIENT
    clnt   :abap.clnt,
    carrid :s_carr_id
returns
{
  client   :s_mandt;
  carrname :s_carrname;
  connid   :s_conn_id;
  cityfrom :s_from_cit;
  cityto   :s_to_city;
}
implemented by method
  zcl_amdp_cds_function_demo=&gt;get_scarr_spfli_for_cds;</pre><p>Код AMDP функции:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS zcl_amdp_cds_function_demo DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES: if_amdp_marker_hdb.
    CLASS-METHODS get_scarr_spfli_for_cds
        FOR TABLE FUNCTION zdemo_cds_get_scarr_spfli.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.

CLASS zcl_amdp_cds_function_demo IMPLEMENTATION.
  METHOD get_scarr_spfli_for_cds
         BY DATABASE FUNCTION FOR HDB
         LANGUAGE SQLSCRIPT
         OPTIONS READ-ONLY
         USING scarr spfli.
    RETURN SELECT sc.mandt as client,
                  sc.carrname, sp.connid, sp.cityfrom, sp.cityto
                  from scarr as sc
                    inner join spfli as sp on sc.mandt = sp.mandt and
                                              sc.carrid = sp.carrid
                    where sp.mandt = :clnt AND
                          sp.carrid = :carrid
                    ORDER BY sc.mandt, sc.carrname, sp.connid;

  endmethod.
ENDCLASS.</pre><p>Вызов из ABAP кода:</p><pre class="urvanov-syntax-highlighter-plain-tag">PARAMETERS: p_carrid TYPE s_carr_id,
            p_connid TYPE s_conn_id.

START-OF-SELECTION.
  SELECT * FROM zdemo_cds_get_scarr_spfli( carrid = @p_carrid )
    WHERE connid = @p_connid
      INTO TABLE @DATA(lt_flights).</pre><p>&nbsp;</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/amdp-funkcii/">AMDP Функции</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/amdp-funkcii/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Короткая форма VALUE при формировании таблиц</title>
		<link>https://abap-blog.ru/osnovy-abap/korotkaya-forma-value-pri-formirovanii-vnutrennix-tablic/</link>
					<comments>https://abap-blog.ru/osnovy-abap/korotkaya-forma-value-pri-formirovanii-vnutrennix-tablic/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Sun, 28 Mar 2021 13:07:26 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=6923</guid>

					<description><![CDATA[<p>У оператора VALUE #( ) при формировании внутренних таблиц есть так называемая короткая форма: [crayon-618a04bb19d35651269207/] Что соответствует следующему полному синтаксису: [crayon-618a04bb19d3c296767170/] Таким образом мы можем не указывать все столбцы, если хотим их заполнить на основе столбцов вне внутренних скобок. Удобно использовать для формирования диапазонов: [crayon-618a04bb19d3f983011669/] Все что указано за пределами внутренних скобок дублируется в следующие [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/korotkaya-forma-value-pri-formirovanii-vnutrennix-tablic/">Короткая форма VALUE при формировании таблиц</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>У оператора VALUE #( ) при формировании внутренних таблиц есть так называемая <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/index.htm?file=abenvalue_constructor_params_lspc.htm" target="_blank" rel="noopener">короткая форма</a>:</p><pre class="urvanov-syntax-highlighter-plain-tag">VALUE dtype|#( [let_exp]
               [BASE itab]
               col1 = dobj11 ... ( col2 = dobj12 col3 = dobj13 ... )
                                 ( col2 = dobj22 col3 = dobj23 ... )
                                 ...
               col1 = dobj31 col2 = dobj32 ... ( col3 = dobj33 ... )
                                               ( col3 = dobj43 ... )
               ... ).</pre><p>Что соответствует следующему полному синтаксису:</p><pre class="urvanov-syntax-highlighter-plain-tag">VALUE dtype|#( [let_exp]
               [BASE itab]
               ( col1 = dobj11 ... col2 = dobj12 col3 = dobj13 ... )
               ( col1 = dobj11 ... col2 = dobj22 col3 = dobj23 ... )
               ...
               ( col1 = dobj31 col2 = dobj32 ... col3 = dobj33 ... )
               ( col1 = dobj31 col2 = dobj32 ... col3 = dobj43 ... )
               ... ).</pre><p>Таким образом мы можем не указывать все столбцы, если хотим их заполнить на основе столбцов вне внутренних скобок.</p>
<p>Удобно использовать для формирования диапазонов:</p><pre class="urvanov-syntax-highlighter-plain-tag">DATA lt_range TYPE RANGE OF i.

lt_range = VALUE #( sign = 'I'  option = 'BT' ( low = 1  high = 10 )
                                              ( low = 21 high = 30 )
                                              ( low = 41 high = 50 )
                                option = 'GE' ( low = 61 )  ).</pre><p>Все что указано за пределами внутренних скобок дублируется в следующие строки:</p>
<table style="width: 100%; height: 130px;" title="ABAP Data" border="0" summary="data display">
<tbody>
<tr class="header" style="height: 26px;">
<td style="width: 20.8122%; height: 26px;"><strong>SIGN</strong></td>
<td style="width: 31.9797%; height: 26px;"><strong>OPTION</strong></td>
<td style="width: 19.2893%; height: 26px;"><strong>LOW</strong></td>
<td style="width: 21.8274%; height: 26px;"><strong>HIGH</strong></td>
</tr>
<tr class="body" style="height: 26px;">
<td style="width: 20.8122%; height: 26px;"><span class="nprpnwrp">I</span></td>
<td style="width: 31.9797%; height: 26px;"><span class="nprpnwrp">BT </span></td>
<td style="width: 19.2893%; height: 26px;"><span class="nprpnwrp">1</span></td>
<td style="width: 21.8274%; height: 26px;"><span class="nprpnwrp">10</span></td>
</tr>
<tr class="body" style="height: 26px;">
<td style="width: 20.8122%; height: 26px;"><span class="nprpnwrp">I </span></td>
<td style="width: 31.9797%; height: 26px;"><span class="nprpnwrp">BT </span></td>
<td style="width: 19.2893%; height: 26px;"><span class="nprpnwrp">21</span></td>
<td style="width: 21.8274%; height: 26px;"><span class="nprpnwrp">30</span></td>
</tr>
<tr class="body" style="height: 26px;">
<td style="width: 20.8122%; height: 26px;"><span class="nprpnwrp">I</span></td>
<td style="width: 31.9797%; height: 26px;"><span class="nprpnwrp">BT</span></td>
<td style="width: 19.2893%; height: 26px;"><span class="nprpnwrp">41</span></td>
<td style="width: 21.8274%; height: 26px;"><span class="nprpnwrp">50</span></td>
</tr>
<tr class="body" style="height: 26px;">
<td style="width: 20.8122%; height: 26px;"><span class="nprpnwrp">I</span></td>
<td style="width: 31.9797%; height: 26px;"><span class="nprpnwrp">GE</span></td>
<td style="width: 19.2893%; height: 26px;"><span class="nprpnwrp">61</span></td>
<td style="width: 21.8274%; height: 26px;"><span class="nprpnwrp">0</span></td>
</tr>
</tbody>
</table>
<p>Но данный синтаксис в случае вложенных конструкторных операторов может приводить к непредвиденным <a href="https://answers.sap.com/questions/13314582/weird-behaviour-with-value-and-switch.html" target="_blank" rel="noopener">результатам</a>.</p><pre class="urvanov-syntax-highlighter-plain-tag">DATA lt_range TYPE RANGE OF i.

lt_range = VALUE #( (                                   low = 1 )
                    ( VALUE #( sign = 'I' option = 'EQ' low = 2 ) )
                    (                                   low = 3 ) ).</pre><p>Исходя из документации в третьей строке мы должны увидеть пустые значения sign и option, т.к. мы ничего не указывали за пределами внутренних скобок, однако они заполнены из второй строки:</p>
<table title="ABAP Data" border="0" summary="data display">
<tbody>
<tr class="header">
<td><strong>SIGN</strong></td>
<td><strong>OPTION</strong></td>
<td><strong>LOW</strong></td>
<td><strong>HIGH</strong></td>
</tr>
<tr class="body">
<td><span class="nprpnwrp"> </span></td>
<td><span class="nprpnwrp"> </span></td>
<td><span class="nprpnwrp">1</span></td>
<td><span class="nprpnwrp">0</span></td>
</tr>
<tr class="body">
<td><span class="nprpnwrp">I</span></td>
<td><span class="nprpnwrp">EQ</span></td>
<td><span class="nprpnwrp">2</span></td>
<td><span class="nprpnwrp">0</span></td>
</tr>
<tr class="body">
<td><span class="nprpnwrp">I</span></td>
<td><span class="nprpnwrp">EQ</span></td>
<td><span class="nprpnwrp">3</span></td>
<td><span class="nprpnwrp">0</span></td>
</tr>
</tbody>
</table>
<p>Описанное поведение судя по всему является багом, исправление будет под нотой: <a href="https://launchpad.support.sap.com/#/notes/3042453" target="_blank" rel="noopener">3042453</a></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/korotkaya-forma-value-pri-formirovanii-vnutrennix-tablic/">Короткая форма VALUE при формировании таблиц</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/korotkaya-forma-value-pri-formirovanii-vnutrennix-tablic/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>SELECT SINGLE и UP TO 1 ROWS</title>
		<link>https://abap-blog.ru/osnovy-abap/select-single-i-up-to-1-rows/</link>
					<comments>https://abap-blog.ru/osnovy-abap/select-single-i-up-to-1-rows/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Sun, 28 Mar 2021 11:07:25 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[Работа с БД]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=6909</guid>

					<description><![CDATA[<p>Казалось бы, выборка единственной записи из таблицы довольно простая и логически понятная операция, однако все еще частой ошибкой находимой на code-review является следующее предупреждение Code Inspector&#8217;a: Syntax check warning In &#171;SELECT SINGLE &#8230;&#187;, the WHERE condition for a key field does not test for equality or the FROM clause contains a join. This means the [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/select-single-i-up-to-1-rows/">SELECT SINGLE и UP TO 1 ROWS</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Казалось бы, выборка единственной записи из таблицы довольно простая и логически понятная операция, однако все еще частой ошибкой находимой на code-review является следующее предупреждение Code Inspector&#8217;a:</p>
<blockquote><p><strong>Syntax check warning</strong></p>
<p>In &#171;SELECT SINGLE &#8230;&#187;, the WHERE condition for a key field does not test for equality or the FROM clause contains a join. This means the result is possibly not unique. Internal message code: MESSAGE GSB</p>
<p>Deactivatable using pragma ##WARN_OK. Message Code WRN 1305</p></blockquote>
<p>Далее рассмотрим что это такое и почему это не нужно игнорировать.</p>
<p><span id="more-6909"></span></p>
<h3>Выборка с указанием полного ключа</h3>
<p>Однозначное определение записи в таблице может быть выполнено только при передаче полного ключа таблицы.</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT *
  FROM dbtab
    INTO TABLE @DATA(lt_itab)
      WHERE full_key.</pre><p>Либо через цикл:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT *
  FROM dbtab
    INTO  @DATA(ls_result)
      WHERE full_key.
ENDSELECT.</pre><p>Но чтобы более точно передать намерение в коде <strong>о выборке единственной записи из таблицы</strong>, следует использовать либо SELECT SINGLE и тогда результат формируется в виде структуры:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT SINGLE *
  FROM dbtab 
    INTO @DATA(ls_result)
      WHERE full_key.</pre><p>Либо использовать дополнение <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abapselect_up_to_offset.htm" target="_blank" rel="noopener">UP TO 1 ROWS</a> в цикле:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT * UP TO 1 ROWS
  FROM dbtab
    INTO @DATA(ls_result)
      WHERE full_key.
ENDSELECT.</pre><p>Либо тоже дополнение без цикла и тогда получаем табличный результат, но с одной единственной строкой:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT * UP TO 1 ROWS
  FROM dbtab
    INTO TABLE @DATA(lt_itab)
      WHERE full_key.</pre><p>Не следует использовать FAE и UP TO 1 ROWS:</p>
<blockquote>
<ul class="disc">
<li>If the addition <a class="blue"><span class="qtext">FOR ALL ENTRIES</span></a> is also specified, all selected rows are initially read into a system table and the addition <span class="qtext">UP TO n ROWS</span> only takes effect during the passing from the system table to the actual target area. This can produce unexpected memory bottlenecks.</li>
</ul>
</blockquote>
<h3>Выборка с указанием частичного ключа</h3>
<p>Возвращаясь к рассматриваемой ошибке в Code Inspector-е, одна возникает в случае использования SELECT SINGLE с указанием не всех полей первичного ключа таблицы.</p>
<p>Подобный код может быть логичен с точки зрения разработчика если он точно знает что структура таблицы и содержащихся в ней данных позволяет выбрать уникальную запись по неполному ключу. Однако разработчик не всегда может быть уверенным на 100% что структура хранимых в таблице данных не поменяется (особенно для custom таблиц) и его код не перестанет работать в будущем.</p>
<p>Кроме того, с точки зрения СУБД такая операция позволяет выбрать абсолютно <strong>любую </strong>запись из таблицы удовлетворяющей указанному неполному ключу, что может приводить к плавающим ошибкам в одной системе и отсутствию таких же на другой, просто потому что записались они в в таблице в разном порядке и данные анализируемые после выборки отличаются в этих записях.</p>
<p>Кроме того тут следует быть внимательным в случае использования конструкции UP TO 1 ROWS, несмотря на семантику выбора единственной записи, никакого предупреждения мы не увидим в случае указания неполного ключа.</p>
<p>Относительно безопасным решением в данном случае является выборка с использованием UP TO 1 ROWS и указанием порядка сортировки в дополнении <strong>ORDER BY </strong>по первичному ключу:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT * UP TO 1 ROWS
  FROM dbtab 
    INTO TABLE @DATA(lt_result)
      WHERE partly_specified_key
        ORDER BY PRIMARY KEY.
" Или...
SELECT * UP TO 1 ROWS
  FROM dbtab 
    INTO @DATA(ls_result)
      WHERE partly_specified_key
        ORDER BY PRIMARY KEY.
ENDSELECT.</pre><p>Однако дополнение не может быть использовано в случае JOIN или при использовании PATH EXPRESSIONS. Кроме того там еще много <a href="https://help.sap.com/doc/abapdocu_latest_index_htm/latest/en-US/abaporderby_clause.htm#!ABAP_ALTERNATIVE_1@1@" target="_blank" rel="noopener">других ограничений</a>. Соответственно ключевые поля лучше указывать вручную:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT dbtab~* UP TO 1 ROWS
  FROM dbtab INNER JOIN another_dbtab ON ...
    INTO TABLE @DATA(lt_result)
      WHERE partly_specified_key
        ORDER BY key_fields.
" Или...
SELECT dbtab~* UP TO 1 ROWS
  FROM dbtab INNER JOIN another_dbtab ON ...
    INTO @DATA(ls_result)
      WHERE partly_specified_key
        ORDER BY key_fields.
ENDSELECT.</pre><p>Еще менее безопасным является указание сортировки без указания всех полей первичного ключа, т.к. есть вероятность наличия дубликатов относительно отсортированного массива, среди которых та запись которую мы выбираем опять будет неоднозначной.</p>
<p>Указать ORDER BY в SELECT SINGLE не позволит синтаксис, просто потому что это противоречит назначению данной конструкции.</p>
<h3>Проверка существования записи в таблице</h3>
<p>Если же конструкция SELECT SINGLE используется для анализа существования записи в таблице, без необходимости анализа самих данных, вы вполне можете использовать данную конструкцию без указания полного ключа. Но если оставить конструкцию просто в следующем виде:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT SINGLE *
  FROM dbtab
    INTO @DATA(ls_result)
      WHERE partly_specified_key.</pre><p>Code-Inspector продолжит ругаться. Соответственно чтобы QA-менеджер (ревьювер) не обратил внимание на данную ошибку, мы либо можем воспользоваться следующей конструкцией (ABAP 7.40 SP5+):</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT SINGLE @abap_true
  FROM dbtab
    INTO @DATA(lv_exists)
      WHERE partly_specified_key.</pre><p>И тогда Code-Inspector не покажет ошибку (кажется эта проверка была исправлена только в 7.50, в ABAP Platform 1909 она точно исчезла).</p>
<p>Либо воспользоваться прагмой для сокрытия предупреждения (желательно с комментарием почему применили прагму):</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT SINGLE *
  FROM dbtab ##WARN_OK
    INTO @DATA(ls_result)
      WHERE partly_specified_key.</pre><p>Либо если такие прагмы запрещены, должны переделать запрос на использование дополнения UP TO 1 ROWS.</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT * UP TO 1 ROWS
  FROM dbtab 
    INTO TABLE @DATA(lt_result)
      WHERE partly_specified_key.
" Или...
SELECT * UP TO 1 ROWS
  FROM dbtab 
    INTO @DATA(ls_result)
      WHERE partly_specified_key.
ENDSELECT.

IF sy-subrc = 0...</pre><p></p>
<h3>Экзотические варианты</h3>
<p>Еще одним вариантом без использования дополнительных переменных может быть использование агрегата COUNT( * ), однако производительность такого варианта может быть ниже, т.к. СУБД будет вынуждена не просто взять запись, а еще выполнить подсчёт записей.</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT COUNT( * ) FROM dbtab
  WHERE partly_specified_key.

IF sy-dbcnt &gt; 0...</pre><p>Можно еще так, но с точки зрения семантики выглядит странно:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT COUNT( * ) UP TO 1 ROWS FROM dbtab
  WHERE partly_specified_key.</pre><p>Будет преобразовано в NativeSQL:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT COUNT( * ) FROM 
 ( SELECT 1 FROM dbtab WHERE partly_specified_key LIMIT 1 )</pre><p>Еще экзотические варианты:</p><pre class="urvanov-syntax-highlighter-plain-tag">SELECT * PACKAGE SIZE 1
  FROM dbtab 
    INTO TABLE @DATA(lt_result)
      WHERE partly_specified_key
        ORDER BY key_fields.
  EXIT.
ENDSELECT.

" Либо
OPEN CURSOR с PACKAGE SIZE 1...</pre><p>&nbsp;</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/select-single-i-up-to-1-rows/">SELECT SINGLE и UP TO 1 ROWS</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/select-single-i-up-to-1-rows/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Просмотр каталога полей любого ALV</title>
		<link>https://abap-blog.ru/osnovy-abap/prosmotr-kataloga-polej-lyubogo-alv/</link>
					<comments>https://abap-blog.ru/osnovy-abap/prosmotr-kataloga-polej-lyubogo-alv/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Sun, 28 Mar 2021 06:00:48 +0000</pubDate>
				<category><![CDATA[SAP Dynpro]]></category>
		<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=6902</guid>

					<description><![CDATA[<p>Иногда бывает полезно посмотреть каталог ALV без погружения в код или в отладку. Cделать это можно для любого ALV зажав Shift и щёлкнув два раза правой кнопкой мыши на не занятом данными месте, пример: Откроется сервисный инструмент (alv consistency check), где среди прочего есть каталог полей: В полноэкранных ALV можно просто набрать команду &#38;SOS.</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/prosmotr-kataloga-polej-lyubogo-alv/">Просмотр каталога полей любого ALV</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Иногда бывает полезно посмотреть каталог ALV без погружения в код или в отладку. Cделать это можно для любого ALV зажав Shift и щёлкнув два раза правой кнопкой мыши на не занятом данными месте, пример:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/03/alv_settings.png"><img loading="lazy" class="alignnone size-full wp-image-6903" src="https://abap-blog.ru/wp-content/uploads/2021/03/alv_settings.png" alt="" width="983" height="184" srcset="https://abap-blog.ru/wp-content/uploads/2021/03/alv_settings.png 983w, https://abap-blog.ru/wp-content/uploads/2021/03/alv_settings-300x56.png 300w, https://abap-blog.ru/wp-content/uploads/2021/03/alv_settings-768x144.png 768w" sizes="(max-width: 983px) 100vw, 983px" /></a></p>
<p>Откроется сервисный инструмент (alv consistency check), где среди прочего есть каталог полей:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/03/consistency_check_alv.png"><img loading="lazy" class="alignnone size-full wp-image-6904" src="https://abap-blog.ru/wp-content/uploads/2021/03/consistency_check_alv.png" alt="" width="1083" height="350" srcset="https://abap-blog.ru/wp-content/uploads/2021/03/consistency_check_alv.png 1083w, https://abap-blog.ru/wp-content/uploads/2021/03/consistency_check_alv-300x97.png 300w, https://abap-blog.ru/wp-content/uploads/2021/03/consistency_check_alv-1024x331.png 1024w, https://abap-blog.ru/wp-content/uploads/2021/03/consistency_check_alv-768x248.png 768w" sizes="(max-width: 1083px) 100vw, 1083px" /></a></p>
<p>В полноэкранных ALV можно просто набрать команду <strong>&amp;SOS.</strong></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/prosmotr-kataloga-polej-lyubogo-alv/">Просмотр каталога полей любого ALV</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/prosmotr-kataloga-polej-lyubogo-alv/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Табличные выражения и исключения</title>
		<link>https://abap-blog.ru/osnovy-abap/isklyucheniya-i-tablichnye-vyrazheniya/</link>
					<comments>https://abap-blog.ru/osnovy-abap/isklyucheniya-i-tablichnye-vyrazheniya/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Sat, 27 Mar 2021 15:45:48 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<guid isPermaLink="false">https://abap-blog.ru/?p=6876</guid>

					<description><![CDATA[<p>Начиная с версии ABAP 7.40 мы можем считывать данные из таблиц через табличные выражения следующим образом: [crayon-618a04bb1a358198993476/] Однако такой вариант кроме того что является слишком длинным аналогом других, может оказывать существенное влияние на производительность в случае частого отсутствия записей, т.к. старт исключения довольно затратная операция. Альтернативные варианты могут быть следующими: [crayon-618a04bb1a35f714682670/] Сравнение на примере:</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/isklyucheniya-i-tablichnye-vyrazheniya/">Табличные выражения и исключения</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Начиная с версии ABAP 7.40 мы можем считывать данные из таблиц через табличные выражения следующим образом:</p><pre class="urvanov-syntax-highlighter-plain-tag">TRY.
    ls_row = lt_itab[ id = lv_find_id ].
  CATCH cx_sy_itab_line_not_found. " INTO DATA(lo_exception)
  " В случае отсутствия записи необходимо обработать исключение.
ENDTRY.</pre><p>Однако такой вариант кроме того что является слишком длинным аналогом других, может оказывать существенное влияние на производительность в случае частого отсутствия записей, т.к. старт исключения довольно затратная операция. Альтернативные варианты могут быть следующими:</p><pre class="urvanov-syntax-highlighter-plain-tag">" Все эти варианты не требуют обработки исключений в блоке TRY..CATCH
ls_row = VALUE #( lt_itab[ id = lv_find_id ] OPTIONAL ). 
" IF ls_row IS NOT INITIAL...
ls_row = VALUE #( lt_itab[ id = lv_find_id ] DEFAULT ls_default ).
DATA(lr_row) = REF #( lt_itab[ id = lv_find_id ] OPTIONAL ). 
" IF lr_row IS BOUND...
ASSIGN lt_itab[ id = lv_find_id ] TO FIELD-SYMBOL(&lt;ls_row&gt;). 
" IF sy-subrc = 0...
READ TABLE lt_itab INTO row WITH KEY id = lv_find_id. 
" IF sy-subrc = 0...

" Если нужно проверить только наличие записи
DATA(lv_idx) = line_index( lt_itab[ id = lv_find_id ] ).
READ TABLE lt_itab WITH KEY id = lv_find_id TRANSPORTING NO FIELDS. 
" IF sy-subrc = 0...</pre><p>Сравнение на <a href="https://github.com/pokrakam/abap_itab_perf/blob/master/src/ztest_itab_search_perf.prog.abap" target="_blank" rel="noopener">примере</a>:</p>
<p><a href="https://abap-blog.ru/wp-content/uploads/2021/03/read_perfomance-1.png"><img loading="lazy" class="alignnone size-full wp-image-6882" src="https://abap-blog.ru/wp-content/uploads/2021/03/read_perfomance-1.png" alt="" width="375" height="353" srcset="https://abap-blog.ru/wp-content/uploads/2021/03/read_perfomance-1.png 375w, https://abap-blog.ru/wp-content/uploads/2021/03/read_perfomance-1-300x282.png 300w" sizes="(max-width: 375px) 100vw, 375px" /></a></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/isklyucheniya-i-tablichnye-vyrazheniya/">Табличные выражения и исключения</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/isklyucheniya-i-tablichnye-vyrazheniya/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
