<!DOCTYPE html>
<html lang="en" data-vue-meta="%7B%22lang%22:%7B%22ssr%22:%22en%22%7D%7D">
<head >
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width,initial-scale=1.0,viewport-fit=cover">
  <title>Singleton (Одиночка) или статический класс? / Habr</title>
  <style>
    /* cyrillic-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSxf6TF0.woff2) format('woff2');
      unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
    }

    /* cyrillic */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveQhf6TF0.woff2) format('woff2');
      unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
    }

    /* latin-ext */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveSBf6TF0.woff2) format('woff2');
      unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
    }

    /* latin */
    @font-face {
      font-family: 'Fira Sans';
      font-style: normal;
      font-weight: 500;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/firasans/v11/va9B4kDNxMZdWfMOD5VnZKveRhf6.woff2) format('woff2');
      unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
    }
  </style>
  <link rel="preload" href="https://assets.habr.com/habr-web/css/chunk-vendors.961b6771.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/chunk-vendors.881c3e9d.js" as="script"><link rel="preload" href="https://assets.habr.com/habr-web/css/app.204e3e20.css" as="style"><link rel="preload" href="https://assets.habr.com/habr-web/js/app.fdbba7e2.js" as="script">
  <link rel="stylesheet" href="https://assets.habr.com/habr-web/css/chunk-vendors.961b6771.css"><link rel="stylesheet" href="https://assets.habr.com/habr-web/css/app.204e3e20.css">
  <script>window.i18nFetch = new Promise((res, rej) => {
          const xhr = new XMLHttpRequest();
          xhr.open('GET', '/js/i18n/en-compiled.66c1ca62e1b536e255d334fce9a49f38.json');
          xhr.responseType = 'json';
          xhr.onload = function(e) {
            if (this.status === 200) {
              res({en: xhr.response});
            } else {
              rej(e);
            }
          };
          xhr.send();
        });</script>
  
  <script data-vue-meta="ssr" src="/js/ads.js" onload="window['zhY4i4nJ9K'] = true" data-vmid="checkad"></script><script data-vue-meta="ssr" type="application/ld+json" data-vmid="ldjson-schema">{"@context":"http:\/\/schema.org","@type":"Article","mainEntityOfPage":{"@type":"WebPage","@id":"https:\/\/habr.com\/ru\/post\/103681\/"},"headline":"Singleton (Одиночка) или статический класс?","datePublished":"2010-09-18T05:52:48+04:00","dateModified":"2010-09-18T05:57:18+04:00","author":{"@type":"Person","name":"Хитман"},"publisher":{"@type":"Organization","name":"Habr","logo":{"@type":"ImageObject","url":"https:\/\/habrastorage.org\/webt\/a_\/lk\/9m\/a_lk9mjkccjox-zccjrpfolmkmq.png"}},"description":"Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос &laquo;Назовите основные отличия синглтона от статического...","url":"https:\/\/habr.com\/ru\/post\/103681\/#post-content-body","about":["h_refactoring","f_develop"],"image":["https:\/\/habr.com\/share\/publication\/103681\/74cf9278abb833c5451a5e8db52a9eb4\/"]}</script>
  <script src="//www.googletagservices.com/tag/js/gpt.js" async></script>
  <style>.grecaptcha-badge{visibility: hidden;}</style>
  <meta name="habr-version" content="2.50.0">
  
  <meta data-vue-meta="ssr" property="fb:app_id" content="444736788986613"><meta data-vue-meta="ssr" property="fb:pages" content="472597926099084"><meta data-vue-meta="ssr" name="twitter:card" content="summary_large_image"><meta data-vue-meta="ssr" name="twitter:site" content="@habr_eng"><meta data-vue-meta="ssr" property="og:site_name" content="Habr" data-vmid="og:site_name"><meta data-vue-meta="ssr" property="og:title" content="Singleton (Одиночка) или статический класс?" data-vmid="og:title"><meta data-vue-meta="ssr" name="twitter:title" content="Singleton (Одиночка) или статический класс?" data-vmid="twitter:title"><meta data-vue-meta="ssr" name="aiturec:title" content="Singleton (Одиночка) или статический класс?" data-vmid="aiturec:title"><meta data-vue-meta="ssr" name="description" content="Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать..." data-vmid="description"><meta data-vue-meta="ssr" itemprop="description" content="Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать..." data-vmid="description:itemprop"><meta data-vue-meta="ssr" property="og:description" content="Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать..." data-vmid="og:description"><meta data-vue-meta="ssr" name="twitter:description" content="Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать..." data-vmid="twitter:description"><meta data-vue-meta="ssr" property="aiturec:description" content="Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать..." data-vmid="aiturec:description"><meta data-vue-meta="ssr" itemprop="image" content="https://habr.com/share/publication/103681/74cf9278abb833c5451a5e8db52a9eb4/" data-vmid="image:itemprop"><meta data-vue-meta="ssr" property="og:image" content="https://habr.com/share/publication/103681/74cf9278abb833c5451a5e8db52a9eb4/" data-vmid="og:image"><meta data-vue-meta="ssr" property="og:image:width" content="1200" data-vmid="og:image:width"><meta data-vue-meta="ssr" property="og:image:height" content="630" data-vmid="og:image:height"><meta data-vue-meta="ssr" property="aiturec:image" content="https://habr.com/share/publication/103681/74cf9278abb833c5451a5e8db52a9eb4/" data-vmid="aiturec:image"><meta data-vue-meta="ssr" name="twitter:image" content="https://habr.com/share/publication/103681/74cf9278abb833c5451a5e8db52a9eb4/" data-vmid="twitter:image"><meta data-vue-meta="ssr" property="vk:image" content="https://habr.com/share/publication/103681/74cf9278abb833c5451a5e8db52a9eb4/" data-vmid="vk:image"><meta data-vue-meta="ssr" property="aiturec:item_id" content="103681" data-vmid="aiturec:item_id"><meta data-vue-meta="ssr" property="aiturec:datetime" content="2010-09-18T01:52:48.000Z" data-vmid="aiturec:datetime"><meta data-vue-meta="ssr" property="og:type" content="article" data-vmid="og:type"><meta data-vue-meta="ssr" property="og:locale" content="ru_RU" data-vmid="og:locale"><meta data-vue-meta="ssr" name="keywords" content="проектирование, паттерны, классы, .net">
  <link data-vue-meta="ssr" href="https://habr.com/en/post/103681/" rel="og:url" data-vmid="og:url"><link data-vue-meta="ssr" href="https://habr.com/en/rss/post/103681/?fl=en" type="application/rss+xml" title="" rel="alternate" name="rss"><link data-vue-meta="ssr" href="https://habr.com/ru/post/103681/" rel="canonical" data-vmid="canonical"><link data-vue-meta="ssr" data-vmid="hreflang"><link data-vue-meta="ssr" image_src="image" href="https://habr.com/share/publication/103681/74cf9278abb833c5451a5e8db52a9eb4/" data-vmid="image:href">
  <meta name="apple-mobile-web-app-status-bar-style" content="#303b44">
  <meta name="msapplication-TileColor" content="#629FBC">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="16x16"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-16.png"
  >
  <link
    rel="shortcut icon"
    type="image/png"
    sizes="32x32"
    href="https://assets.habr.com/habr-web/img/favicons/favicon-32.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="76x76"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-76.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="120x120"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="152x152"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-152.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="180x180"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-180.png"
  >
  <link
    rel="apple-touch-icon"
    type="image/png"
    sizes="256x256"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-256.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1136x640.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2436x1125.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1792x828.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_828x1792.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1334x750.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2208x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 812px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1125x2436.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 736px) and (-webkit-device-pixel-ratio: 3) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1242x2208.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2732x2048.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 414px) and (device-height: 896px) and (-webkit-device-pixel-ratio: 3) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2688x1242.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2224x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 375px) and (device-height: 667px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_750x1334.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 1024px) and (device-height: 1366px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x2732.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2388x1668.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1112px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2224.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 320px) and (device-height: 568px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_640x1136.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 834px) and (device-height: 1194px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1668x2388.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: landscape)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_2048x1536.png"
  >
  <link
    rel="apple-touch-startup-image"
    media="screen and (device-width: 768px) and (device-height: 1024px) and (-webkit-device-pixel-ratio: 2) and (orientation: portrait)"
    href="https://assets.habr.com/habr-web/img/splashes/splash_1536x2048.png"
  >
  <link
    rel="mask-icon"
    color="#77a2b6"
    href="https://assets.habr.com/habr-web/img/favicons/apple-touch-icon-120.svg"
  >
  <link
    crossorigin="use-credentials"
    href="/manifest.webmanifest"
    rel="manifest"
  >
</head>
<body>


<div id="app" data-server-rendered="true" data-async-called="true"><div class="tm-layout__wrapper"><!----> <div></div> <!----> <header class="tm-header"><div class="tm-page-width"><div class="tm-header__container"><!----> <span class="tm-header__logo-wrap"><a href="/en/" class="tm-header__logo tm-header__logo_en"><svg height="16" width="16" class="tm-svg-img tm-header__icon"><title>Habr</title> <use xlink:href="/img/habr-logo-en.svg#logo"></use></svg></a> <span class="tm-header__beta-sign" style="display:none;">β</span></span> <!----> <a href="/en/sandbox/start/" class="tm-header__become-author-btn">
            How to become an author
          </a> <!----> <!----> <!----></div></div></header> <div class="tm-layout"><div class="tm-page-progress-bar"></div> <div data-menu-sticky="true" class="tm-base-layout__header tm-base-layout__header_is-sticky"><div class="tm-page-width"><div class="tm-base-layout__header-wrapper"><div class="tm-main-menu"><div class="tm-main-menu__section"><nav class="tm-main-menu__section-content"><!----> <a href="/en/all/" class="tm-main-menu__item">
        All streams
      </a> <a href="/en/flows/develop/" class="tm-main-menu__item">
          Development
        </a><a href="/en/flows/admin/" class="tm-main-menu__item">
          Admin
        </a><a href="/en/flows/design/" class="tm-main-menu__item">
          Design
        </a><a href="/en/flows/management/" class="tm-main-menu__item">
          Management
        </a><a href="/en/flows/marketing/" class="tm-main-menu__item">
          Marketing
        </a><a href="/en/flows/popsci/" class="tm-main-menu__item">
          PopSci
        </a></nav></div></div> <div class="tm-header-user-menu tm-base-layout__user-menu"><a href="/en/search/" class="tm-header-user-menu__item tm-header-user-menu__search"><svg height="24" width="24" class="tm-svg-img tm-header-user-menu__icon tm-header-user-menu__icon_search tm-header-user-menu__icon_dark"><title>Search</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#search"></use></svg></a> <!----> <!----> <!----> <div class="tm-header-user-menu__item tm-header-user-menu__user_desktop"><div class="tm-dropdown"><div class="tm-dropdown__head"><svg height="24" width="24" data-test-id="menu-toggle-guest" class="tm-svg-img tm-header-user-menu__icon"><title>Profile</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#header-user"></use></svg> <!----></div> <!----></div> <!----></div> <!----></div></div></div></div> <!----> <div class="tm-page-width"></div> <main class="tm-layout__container"><div hl="en" data-async-called="true" class="tm-page"><div class="tm-page-width"><!----> <div class="tm-page__wrapper"><div class="tm-page__main tm-page__main_has-sidebar"><div class="pull-down"><div class="pull-down__header" style="height:0px;"><div class="pull-down__content" style="bottom:10px;"><svg height="24" width="24" class="tm-svg-img pull-down__arrow"><title>Pull to refresh</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#pull-arrow"></use></svg></div></div> <div class="tm-article-presenter"> <div class="tm-article-presenter__body"><div class="tm-misprint-area"><div class="tm-misprint-area__wrapper"><article class="tm-article-presenter__content tm-article-presenter__content_narrow"><div class="tm-article-presenter__header"> <div class="tm-article-snippet tm-article-presenter__snippet"><div class="tm-article-snippet__meta-container"><div class="tm-article-snippet__meta"><span class="tm-user-info tm-article-snippet__author"><a href="/en/users/DangerT/" title="DangerT" class="tm-user-info__userpic"><div class="tm-entity-image"><img alt="" height="24" loading="lazy" src="//habrastorage.org/r/w32/getpro/habr/avatars/587/56e/8ee/58756e8eeb2d7b1851d8735b860c695a.jpg" width="24" class="tm-entity-image__pic"></div></a> <span class="tm-user-info__user"><a href="/en/users/DangerT/" class="tm-user-info__username">
      DangerT
    </a> </span></span> <span class="tm-article-snippet__datetime-published"><time datetime="2010-09-18T01:52:48.000Z" title="2010-09-18, 05:52">18  September  2010 at 05:52</time></span></div> <!----></div> <h1 lang="ru" class="tm-article-snippet__title tm-article-snippet__title_h1"><span>Singleton (Одиночка) или статический класс?</span></h1> <div class="tm-article-snippet__hubs"><span class="tm-article-snippet__hubs-item"><a href="/en/hub/refactoring/" class="tm-article-snippet__hubs-item-link"><span>Designing and refactoring</span> <span title="Core hub" class="tm-article-snippet__profiled-hub">*</span></a></span></div> <!----> <!----> <!----></div></div> <!----> <div data-gallery-root="" lang="ru" class="tm-article-body"><div id="post-content-body" class="article-formatted-body article-formatted-body_version-1"><div xmlns="http://www.w3.org/1999/xhtml">Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать один, а когда другой?». И безусловно будет полезна для тех разработчиков, которые при слове «паттерн» впадают в уныние или просят прекратить выражаться :)<br/>
<br/>
<h4>Что такое статический класс?</h4><br/>
Для начала вспомним что такое статический класс и для чего он нужен. В любом CLI-совместимом языке используется следующая парадигма инкапсуляции глобальных переменных: <i>глобальных перменных нет</i>. Все члены, в том числе и статические, могут быть объявлены только в рамках какого-либо класса, а сами классы могут (<i>но не должны</i>) быть сгруппированы в каком-либо пространстве имен. И если раньше приходилось иммитировать поведение статического класса с помощью закрытого конструктора, то в .NET Framework 2.0 была добавлена поддержка статических классов на уровне платформы. Основное отличие статического класса от обычного, нестатического, в том, что невозможно создать экземпляр этого класса с помощью оператора <i>new</i>. Статические классы по сути являются некой разновидностью простанства имен — только в отличие от последних предназначены для размещения статических переменных и методов а не типов.<br/>
<br/>
<a name="habracut"></a><br/>
<h4>Что такое Singleton (Одиночка)?</h4><br/>
Один из <i>порождающих</i> паттернов, впервые описанный <a href="http://c2.com/cgi/wiki?GangOfFour">«бандой четырех»</a> (GoF). Гарантирует, что у класса есть <i>только один экземпляр</i>, и предоставляет к нему <i>глобальную точку доступа</i>. Мы не будем подробно рассматривать здесь этот паттерн, его предназначение и решаемые им задачи — в сети существует масса подробной информации о нем (например <a href="http://ru.wikipedia.org/wiki/%D0%9E%D0%B4%D0%B8%D0%BD%D0%BE%D1%87%D0%BA%D0%B0_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29">здесь</a> и <a href="http://www.rsdn.ru/article/patterns/singleton.xml#EXH">здесь</a>). Отмечу лишь что синглтоны бывают потокобезопасные и нет, с простой и отложенной инициализацией.<br/>
<br/>
<h4>А если нет разницы — зачем плодить больше?</h4><br/>
Так в чем же все-таки разница между этими двумя сущностями и когда следует их использовать? Думаю что лучше всего это проиллюстрировать в следующей таблице:<br/>
<table>
<tr>
<th></th>
<th>Singleton<br/>
</th>
<th>Static class<br/>
</th>
</tr>
<tr>
<td><i><b>Количество точек доступа</b></i><br/>
</td>
<td>Одна (и только одна) точка доступа — статическое поле <i>Instance</i><br/>
</td>
<td>N (зависит от количества публичных членов класса и методов)<br/>
</td>
</tr>
<tr>
<td><i><b>Наследование классов </b></i><br/>
</td>
<td>Возможно, но не всегда (об этом — ниже)<br/>
</td>
<td>Невозможно — статические классы не могут быть экземплярными, поскольку нельзя создавать экземпляры объекты статических классов<br/>
</td>
</tr>
<tr>
<td><i><b>Наследование интерфейсов</b></i><br/>
</td>
<td>Возможно, безо всяких ограничений<br/>
</td>
<td>Невозможно по той же причине, по которой невозможно наследование классов<br/>
</td>
</tr>
<tr>
<td><i><b>Возможность передачи в качестве параметров</b></i><br/>
</td>
<td>Возможно, поскольку Singleton предоставляет <i>реальный</i> объект<br/>
</td>
<td>Отсутствует<br/>
</td>
</tr>
<tr>
<td><i><b>Контроль времени жизни объекта</b></i><br/>
</td>
<td>Возможно — например, <i>отложенная инициализация</i> (или <i>создание по требованию</i>)<br/>
</td>
<td>Невозможно по той же причине, по которой невозможно наследование классов<br/>
</td>
</tr>
<tr>
<td><i><b>Использование абстрактной фабрики для создания экземпляра класса</b></i><br/>
</td>
<td>Возможно<br/>
</td>
<td>Невозможно по причине осутствия самой возможности создания экземпляра<br/>
</td>
</tr>
<tr>
<td><i><b>Сериализация</b></i><br/>
</td>
<td>Возможно<br/>
</td>
<td>Неприменима по причине отсутствия экземпляра<br/>
</td>
</tr>
</table> <br/>
Рассмотрим подробнее перечисленные выше критерии.<br/>
<br/>
<h5>Количество точек доступа</h5><br/>
Конечно же имеются ввиду <i>внешние</i> точки доступа, другими словами — публичный контракт взаимодействия класса и его клиентов. Это удобнее проиллюстрировать с помощью кода:<br/>
<br/>
Singleton в «канонической» реализации:<br/>
<pre><code class="cs">public class Session
{
    private static Session _instance;

    // Реализация паттерна ...

    public static Session Instance
    {
        get
        {
            // ...
            return _instance;
        }
    }

    public IUser GetUser()
    {
        // ...
    }

    public bool IsSessionExpired()
    {
        // ...
    }

    public Guid SessionID
    {
        get
        {
            // ...
        }
    }
}
</code></pre><br/>
<br/>
Статический класс:<br/>
<pre><code class="cs">public static class Session
{
    // Точка доступа 1
    public static IUser GetUser()
    {
        // ...
    }

    // Точка доступа 2
    public static bool IsSessionExpired()
    {
        // ...
    }

    // ...

    // Точка доступа N
    public static Guid SessionID
    {
        get
        {
            // ...
        }
    }
}
</code></pre><br/>
<br/>
<h5>Наследование классов</h5><br/>
С наследованием статических классов все просто — оно просто не поддерживается на уровне языка. С Singleton все несколько сложнее. Для удобства использования многие разработчики чаще всего используют следующую реализацию паттерна:<br/>
<pre><code class="cs">public class Singleton&lt;T> where T : class
{
    private static T _instance;

    protected Singleton()
    {
    }
        
    private static T CreateInstance()
    {            
        ConstructorInfo cInfo = typeof(T).GetConstructor(
            BindingFlags.Instance | BindingFlags.NonPublic,
            null,
            new Type[0],
            new ParameterModifier[0]);

        return (T)cInfo.Invoke(null);
    }

    public static T Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = CreateInstance();
            }

            return _instance;
        }
    }
}

public class Session : Singleton&lt;Session>
{
    public IUser GetUser()
    {
        // ...
    }

    public bool IsSessionExpired()
    {
        // ...
    }

    public Guid SessionID
    {
        get
        {
            // ...
        }
    }
}
</code></pre><br/>
А поскольку множественное наследование в C# и в любом CLI-совместимом языке запрещено — это означает что мы не сможем унаследовать класс Session от любого другого <i>полезного</i> класса. Выходом является делагирование синглтону управления доступом к экземпляру объекта:<br/>
<pre><code class="cs">public class Session : CoreObject
{
    private Session()
    {
    }

    public static Session Instance
    {
        get
        {
            return Singleton&lt;Session>.Instance;
        }             
    }
}
</code></pre><br/>
<h5>Наследование интерфейсов</h5><br/>
Использование интерфейсов позволяет достичь большей гибкости, увеличить количество повторно используемого кода, повысить тестируемость, и, самое главное — избежать <i>сильной связности</i> объектов. Статические классы не поддерживают наследования в принципе. Синглтон, напротив, наследование интерфейсов поддерживает в полной мере, поскольку это обычный класс. Но вот использовать эту возможность стоит только в том случае, если экземпляр синглтона планируется передавать в качестве входных параметров в смешанных сценариях или транслировать за границу домена. Пример смешанного сценария:<br/>
<pre><code class="cs">// Этот класс является синглтоном и реализует интерфейс ISession
public class Session: CoreObject, ISession
{
    private Session()
    {
    }

    public static Session Instance
    {
        get
        {
            return Singleton&lt;Session>.Instance;
        }             
    }
}

// Этот класс не является синглтоном и вообще может быть объявлен и реализован в другой сборке
// полностью скрывая детали реализации
public class VpnSession : ISession
{

}

public interface ISessionManager
{
    ISession GetSession(Guid sessionID);

    // Принимает интерфейс ISession, следуя принципам уменьшения связности
    bool IsSessionExpired(ISession session);        
}
</code></pre><br/>
<br/>
<h5>Возможность передачи в качестве параметров</h5><br/>
Для статических классов это не поддерживается — можно передать разве что тип, но в большинстве ситуаций это бесполезно, за исключением случаев применения механизмов отражения (<i>reflection</i>). Синглтон же по сути является обычным экземпляром объекта:<br/>
<pre><code class="cs">
// ...
ISessionManager _sessionManager;

// ...
bool isExpired = _sessionManager.IsSessionExpired(Session.Instance);
</code></pre><br/>
<h5>Контроль времени жизни объекта</h5><br/>
Время жизни статического класса ограничено временем жизни домена — если мы создали этот домен вручную, то мы косвенно управляем временем жизни всех его статических типов. Временем жизни синглтона мы можем управлять по нашему желанию. Яркий пример — отложенная инициализация:<br/>
<pre><code class="cs">public class Singleton&lt;T> where T : class
{
    // ...

    public static T Instance
    {
        get
        {
            if (_instance == null)
            {
               // Создание "по требованию"
                _instance = CreateInstance();
            }

            return _instance;
        }
    }
}
</code></pre><br/>
Можно также добавить операцию удаления экземпляра синглтона:<br/>
<pre><code class="cs">public class Singleton&lt;T> where T : class
{
    // ...

    public static T Instance
    {
       // ...
    }

    // Очень опасная операция!
    public void RemoveInstance()
    {
        _instance = null;
    }
}
</code></pre><br/>
Данная операция является крайне небезопасной, поскольку синглтон может хранить некоторое состояние и поэтому его пересоздание может иметь нежелательные последствия для его клиентов. Если все же необходимость в таком методе возникла (что скорее всего указывает на ошибки проектирования) то нужно постараться свести к минимуму возможное зло от его использования — например сделать его закрытым и вызывать внутри свойства Instance при определенных условиях:<br/>
<pre><code class="cs">public class Singleton&lt;T> where T : class
{
    // ...

    public static T Instance
    {
        get
        {
            if (!IsAlive)
            {
               // Удаление по условию
                RemoveInstance();
            }
            if (_instance == null)
            {
               // Создание "по требованию"
                _instance = CreateInstance();
            }

            return _instance;
        }
    }

    private void RemoveInstance()
    {
        _instance = null;
    }
}
</code></pre><br/>
<br/>
<h5>Использование абстрактной фабрики для создания экземпляра класса</h5><br/>
Статический класс не поддерживает данной возможности ввиду того, что нельзя создать экземпляр статического класса. В случае с синглтоном все выглядит просто:<br/>
<pre><code class="cs">public interface IAbstractFactory
{        
    T Create&lt;T>();

    bool IsSupported&lt;T>();
}

public class Singleton&lt;T> where T : class
{
    private static T _instance;

    private static IAbstractFactory _factory;

    protected Singleton(IAbstractFactory factory)
    {
        _factory = factory;
    }

    public static T Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = _factory.Create&lt;T>();
            }

            return _instance;
        }
    }
}

// Вариант с прямым наследованием от синглтона
public class Session : Singleton&lt;Session>
{
    protected Session()
        : base(new ConcreteFactory())
    {
    }

    // ...
}
</code></pre><br/>
Правда в варианте с аггрегацией синглтона придеться применить не совсем красивое и, немного громоздкое решение:<br/>
<pre><code class="cs">public class Session : CoreObject, ISession
{
    private class SessionSingleton : Singleton&lt;Session>
    {
        protected SessionSingleton()
            : base(new ConcreteFactory2())
        {
        }
    }

    private Session()
        : base(new CoreContext())
    {
    }

    public static Session Instance
    {
        get
        {
            return SessionSingleton.Instance;
        }             
    }

    // ...
}
</code></pre><br/>
<br/>
<h5>Сериализация</h5><br/>
Сериализация применима только к экземплярам классов. Статический класс не может иметь экзмпляров поэтому сериализовать в данном случае нечего.<br/>
<br/>
<h4>Так что же использовать Синглтон или Статический класс?</h4><br/>
В любом случае выбор решения зависит от разработчика и от специфики решаемой им задачи. Но, в любом случае, можно сделать следующие выводы: <br/>
<br/>
<b>Использование синглотона оправдано, когда:</b><br/>
<ul>
<li>Необходимо наследование классов или интерфейсов или делегаровать конструирование объектов фабрике</li>
<li>Необходимо использование экземпляров класса </li>
<li>Необходимо контролировать время жизни объекта (хоть это и очень редкая задача для синглтона)</li>
<li>Необходимо сериализовать объект (такая задача гипотетически возможна, но трудно представить себе сценарии использования) </li>
</ul><br/>
<b>Использование статических классов целесообразно тогда</b>, когда у вас нет необходимости реализовывать ни один из сценариев перечисленных для синглтона. Основное назначение статических классов все-таки в группировке логически схожих методов, констант, полей и свойств. Например: <i>System.Math</i>, <i>System.BitConverter</i>, <i>System.Buffer</i>, <i>System.Convert</i> и т.д.</div></div> <!----> <!----></div> <div class="tm-article-presenter__meta"><div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Tags:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/en/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%5D" class="tm-tags-list__link">проектирование</a></li><li class="tm-separated-list__item"><a href="/en/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BF%D0%B0%D1%82%D1%82%D0%B5%D1%80%D0%BD%D1%8B%5D" class="tm-tags-list__link">паттерны</a></li><li class="tm-separated-list__item"><a href="/en/search/?target_type=posts&amp;order=relevance&amp;q=%5B%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D1%8B%5D" class="tm-tags-list__link">классы</a></li><li class="tm-separated-list__item"><a href="/en/search/?target_type=posts&amp;order=relevance&amp;q=%5B.net%5D" class="tm-tags-list__link">.net</a></li></ul></div> <div class="tm-separated-list tm-article-presenter__meta-list"><span class="tm-separated-list__title">Hubs:</span> <ul class="tm-separated-list__list"><li class="tm-separated-list__item"><a href="/en/hub/refactoring/" class="tm-hubs-list__link">
    Designing and refactoring
  </a></li></ul></div></div></article></div> <!----></div> <div class="tm-article-sticky-panel"><div class="tm-data-icons tm-article-sticky-panel__icons"><div class="tm-article-rating tm-data-icons__item"><div class="tm-votes-meter tm-article-rating__votes-switcher"><svg height="16" width="16" class="tm-svg-img tm-votes-meter__icon tm-votes-meter__icon_medium"><title>Total votes 70: ↑58 and ↓12</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#counter-rating"></use></svg> <span title="Total votes 70: ↑58 and ↓12" class="tm-votes-meter__value tm-votes-meter__value_positive tm-votes-meter__value_medium">+46</span></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----> <span title="Views" class="tm-icon-counter tm-data-icons__item"><svg height="16" width="16" class="tm-svg-img tm-icon-counter__icon"><title>Views</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#counter-views"></use></svg> <span class="tm-icon-counter__value">167K</span></span> <button title="Add to bookmarks" type="button" class="bookmarks-button tm-data-icons__item"><span title="Add to bookmarks" class="tm-svg-icon__wrapper bookmarks-button__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Add to bookmarks</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#counter-favorite"></use></svg></span> <span title="Users added post to bookmarks" class="bookmarks-button__counter">
    242
  </span></button> <!----> <div title="Share" class="tm-sharing tm-data-icons__item"><button type="button" class="tm-sharing__button"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="tm-sharing__icon"><path fill="currentColor" d="M10.33.275l9.047 7.572a.2.2 0 010 .306l-9.048 7.572a.2.2 0 01-.328-.153V11c-8 0-9.94 6-9.94 6S-1 5 10 5V.428a.2.2 0 01.328-.153z"></path></svg></button> <!----></div> <DIV class="v-portal" style="display:none;"></DIV></div> </div></div> <!----> <!----> <div class="tm-article-presenter__footer"><div class="tm-article-blocks"><!----> <section class="tm-block tm-block_spacing-bottom"><!----> <div class="tm-block__body tm-block__body_variant-balanced"><div class="tm-article-author"> <div class="tm-user-card tm-article-author__user-card tm-user-card_variant-article"><div class="tm-user-card__info-container"><div class="tm-user-card__header"><div class="tm-user-card__header-data"><a href="/en/users/DangerT/" class="tm-user-card__userpic tm-user-card__userpic_size-40"><div class="tm-entity-image"><img alt="" src="//habrastorage.org/getpro/habr/avatars/587/56e/8ee/58756e8eeb2d7b1851d8735b860c695a.jpg" class="tm-entity-image__pic"></div></a> <div class="tm-user-card__meta"><div title=" 199 votes " class="tm-karma tm-user-card__karma"><div class="tm-karma__votes tm-karma__votes_positive">
    28
  </div> <div class="tm-karma__text">
    Karma
  </div></div> <div title="User`s rating" class="tm-rating tm-user-card__rating"><div class="tm-rating__header"> <div class="tm-rating__counter">0</div></div> <div class="tm-rating__text">
    Rating
  </div></div></div></div></div> <div class="tm-user-card__info tm-user-card__info_variant-article"><div class="tm-user-card__title tm-user-card__title_variant-article"><span class="tm-user-card__name tm-user-card__name_variant-article">Хитман</span> <a href="/en/users/DangerT/" class="tm-user-card__nickname tm-user-card__nickname_variant-article">
          @DangerT
        </a> <!----></div> <p class="tm-user-card__short-info tm-user-card__short-info_variant-article">Архитектор программных систем</p></div></div> <div class="tm-user-card__buttons tm-user-card__buttons_variant-article"><!----> <!----> <!----> <!----> <!----></div></div> <!----></div> <DIV class="v-portal" style="display:none;"></DIV></div> <!----></section> <div class="tm-article-blocks__comments"><div class="tm-article-page-comments"><div class="tm-article-comments-counter-link tm-article-comments-counter-button"><a href="/en/post/103681/comments/" class="tm-article-comments-counter-link__link tm-article-comments-counter-link__link_button-style"><svg height="16" width="16" class="tm-svg-img tm-article-comments-counter-link__icon tm-article-comments-counter-link__icon_contrasted"><title>Comments</title> <use xlink:href="/img/megazord-v24.ce74655c.svg#counter-comments"></use></svg> <span class="tm-article-comments-counter-link__value tm-article-comments-counter-link__value_contrasted">
       Comments 84 
    </span></a> <!----></div></div></div> <div class="tm-ad-banner__container tm-page-article__banner"><!----> <div id="articleBottomBanner" class="tm-ad-banner"></div></div> <!----> <!----> <!----> <!----> </div></div></div></div></div> <div class="tm-page__sidebar"><div class="tm-layout-sidebar"><div class="tm-layout-sidebar__ads tm-layout-sidebar__ads_initial"><div class="tm-ad-banner__container tm-layout-sidebar__banner"><!----> <div id="sidebarBanner" class="tm-ad-banner"></div></div></div> <div class="tm-sexy-sidebar tm-sexy-sidebar_initial" style="margin-top:0px;"><!----> <!----></div></div></div></div></div></div></main> <!----></div> <div class="tm-footer-menu"><div class="tm-page-width"><div class="tm-footer-menu__container"><div class="tm-footer-menu__block"><h3 class="tm-footer-menu__block-title">
          Your account
        </h3> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr/?back=/en/post/103681/&amp;hl=en" rel="nofollow" target="_self">
                Log in
              </a></li><li class="tm-footer-menu__list-item"><a href="/kek/v1/auth/habrahabr-register/?back=/en/post/103681/&amp;hl=en" rel="nofollow" target="_self">
                Sign up
              </a></li></ul></div></div><div class="tm-footer-menu__block"><h3 class="tm-footer-menu__block-title">
          Sections
        </h3> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="/en/" class="footer-menu__item-link router-link-active">
                Posts
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/news/" class="footer-menu__item-link">
                News
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/hubs/" class="footer-menu__item-link">
                Hubs
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/companies/" class="footer-menu__item-link">
                Companies
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/users/" class="footer-menu__item-link">
                Authors
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/sandbox/" class="footer-menu__item-link">
                Sandbox
              </a></li></ul></div></div><div class="tm-footer-menu__block"><h3 class="tm-footer-menu__block-title">
          Information
        </h3> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="/en/docs/help/" class="footer-menu__item-link">
                How it works
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/docs/authors/codex/" class="footer-menu__item-link">
                For authors
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/docs/companies/corpblogs/" class="footer-menu__item-link">
                For companies
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/docs/docs/transparency/" class="footer-menu__item-link">
                Documents
              </a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/agreement" target="_blank">
                Agreement
              </a></li><li class="tm-footer-menu__list-item"><a href="https://account.habr.com/info/confidential/" target="_blank">
                Confidential
              </a></li></ul></div></div><div class="tm-footer-menu__block"><h3 class="tm-footer-menu__block-title">
          Services
        </h3> <div class="tm-footer-menu__block-content"><ul class="tm-footer-menu__list"><li class="tm-footer-menu__list-item"><a href="https://docs.google.com/presentation/d/e/2PACX-1vQLwRfQmXibiUlWaRg-BAc38s7oM3lJiaPju7qmdJsp8ysIvZ_G-Npem0njJLMozE2bPHMpDqiI5hhy/pub?start=false&amp;loop=false&amp;delayms=60000&amp;slide=id.g91a03369cd_4_297" target="_blank">
                Ads
              </a></li><li class="tm-footer-menu__list-item"><a href="https://habrastorage.org/storage/stuff/habr/service_price.pdf" target="_blank">
                Subscription plans
              </a></li><li class="tm-footer-menu__list-item"><a href="https://docs.google.com/presentation/d/e/2PACX-1vQJJds8-Di7BQSP_guHxICN7woVYoN5NP_22ra-BIo4bqnTT9FR6fB-Ku2P0AoRpX0Ds-LRkDeAoD8F/pub?start=false&amp;loop=false&amp;delayms=60000" target="_blank">
                Content
              </a></li><li class="tm-footer-menu__list-item"><a href="https://tmtm.timepad.ru/" target="_blank">
                Seminars
              </a></li><li class="tm-footer-menu__list-item"><a href="/en/megaprojects/" class="footer-menu__item-link">
                Megaprojects
              </a></li></ul></div></div></div></div></div> <div class="tm-footer"><div class="tm-page-width"><div class="tm-footer__container"><!----> <div class="tm-footer__social"><a href="https://www.facebook.com/habr.eng" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Facebook</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-facebook"></use></svg></a><a href="https://twitter.com/habr_eng" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Twitter</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-twitter"></use></svg></a><a href="https://t.me/habr_eng" rel="nofollow noopener noreferrer" target="_blank" class="tm-svg-icon__wrapper tm-social-icons__icon"><svg height="16" width="16" class="tm-svg-img tm-svg-icon"><title>Telegram</title> <use xlink:href="/img/social-icons-sprite.svg#social-logo-telegram"></use></svg></a></div> <DIV class="v-portal" style="display:none;"></DIV> <button class="tm-footer__link"><!---->
        Language settings
      </button> <a href="/en/about" class="tm-footer__link">
        About
      </a> <a href="/en/feedback/" class="tm-footer__link">
        Support
      </a> <!----> <a href="/berserk-mode-nope" class="tm-footer__link">
        Return to old version
      </a> <div class="tm-footer-copyright"><span class="tm-copyright"><span class="tm-copyright__years">© 2006–2021 </span> <span class="tm-copyright__name">«<a href="https://company.habr.com/en/" rel="noopener" target="_blank" class="tm-copyright__link">Habr</a>»</span></span></div></div></div></div> <!----> <!----></div> <div class="vue-portal-target"></div></div>
<script>window.__INITIAL_STATE__={"adblock":{"hasAcceptableAdsFilter":false,"hasAdblock":false},"articlesList":{"articlesList":{"103681":{"id":"103681","timePublished":"2010-09-18T01:52:48+00:00","isCorporative":false,"lang":"ru","titleHtml":"Singleton (Одиночка) или статический класс?","leadData":{"textHtml":"Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать один, а когда другой?». И безусловно будет полезна для тех разработчиков, которые при слове «паттерн» впадают в уныние или просят прекратить выражаться :)\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch4\u003EЧто такое статический класс?\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\r\nДля начала вспомним что такое статический класс и для чего он нужен. В любом CLI-совместимом языке используется следующая парадигма инкапсуляции глобальных переменных: \u003Ci\u003Eглобальных перменных нет\u003C\u002Fi\u003E. Все члены, в том числе и статические, могут быть объявлены только в рамках какого-либо класса, а сами классы могут (\u003Ci\u003Eно не должны\u003C\u002Fi\u003E) быть сгруппированы в каком-либо пространстве имен. И если раньше приходилось иммитировать поведение статического класса с помощью закрытого конструктора, то в .NET Framework 2.0 была добавлена поддержка статических классов на уровне платформы. Основное отличие статического класса от обычного, нестатического, в том, что невозможно создать экземпляр этого класса с помощью оператора \u003Ci\u003Enew\u003C\u002Fi\u003E. Статические классы по сути являются некой разновидностью простанства имен — только в отличие от последних предназначены для размещения статических переменных и методов а не типов.\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n","imageUrl":null,"buttonTextHtml":"Готовимся к собеседованию дальше?","image":null},"editorVersion":"1.0","postType":"article","postLabels":[],"author":{"scoreStats":{"score":28,"votesCount":199},"rating":0,"relatedData":null,"contacts":[],"authorContacts":[],"paymentDetails":{"paymentYandexMoney":null,"paymentPayPalMe":null,"paymentWebmoney":null},"id":"52530","alias":"DangerT","fullname":"Хитман","avatarUrl":"\u002F\u002Fhabrastorage.org\u002Fgetpro\u002Fhabr\u002Favatars\u002F587\u002F56e\u002F8ee\u002F58756e8eeb2d7b1851d8735b860c695a.jpg","speciality":"Архитектор программных систем"},"statistics":{"commentsCount":84,"favoritesCount":242,"readingCount":166554,"score":46,"votesCount":70},"hubs":[{"relatedData":null,"id":"7504","alias":"refactoring","type":"collective","title":"Designing and refactoring","titleHtml":"Designing and refactoring","isProfiled":true}],"flows":[{"id":"1","alias":"develop","title":"Development"}],"relatedData":null,"textHtml":"\u003Cdiv xmlns=\"http:\u002F\u002Fwww.w3.org\u002F1999\u002Fxhtml\"\u003EСтатья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать один, а когда другой?». И безусловно будет полезна для тех разработчиков, которые при слове «паттерн» впадают в уныние или просят прекратить выражаться :)\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch4\u003EЧто такое статический класс?\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\r\nДля начала вспомним что такое статический класс и для чего он нужен. В любом CLI-совместимом языке используется следующая парадигма инкапсуляции глобальных переменных: \u003Ci\u003Eглобальных перменных нет\u003C\u002Fi\u003E. Все члены, в том числе и статические, могут быть объявлены только в рамках какого-либо класса, а сами классы могут (\u003Ci\u003Eно не должны\u003C\u002Fi\u003E) быть сгруппированы в каком-либо пространстве имен. И если раньше приходилось иммитировать поведение статического класса с помощью закрытого конструктора, то в .NET Framework 2.0 была добавлена поддержка статических классов на уровне платформы. Основное отличие статического класса от обычного, нестатического, в том, что невозможно создать экземпляр этого класса с помощью оператора \u003Ci\u003Enew\u003C\u002Fi\u003E. Статические классы по сути являются некой разновидностью простанства имен — только в отличие от последних предназначены для размещения статических переменных и методов а не типов.\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ca name=\"habracut\"\u003E\u003C\u002Fa\u003E\u003Cbr\u002F\u003E\r\n\u003Ch4\u003EЧто такое Singleton (Одиночка)?\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\r\nОдин из \u003Ci\u003Eпорождающих\u003C\u002Fi\u003E паттернов, впервые описанный \u003Ca href=\"http:\u002F\u002Fc2.com\u002Fcgi\u002Fwiki?GangOfFour\"\u003E«бандой четырех»\u003C\u002Fa\u003E (GoF). Гарантирует, что у класса есть \u003Ci\u003Eтолько один экземпляр\u003C\u002Fi\u003E, и предоставляет к нему \u003Ci\u003Eглобальную точку доступа\u003C\u002Fi\u003E. Мы не будем подробно рассматривать здесь этот паттерн, его предназначение и решаемые им задачи — в сети существует масса подробной информации о нем (например \u003Ca href=\"http:\u002F\u002Fru.wikipedia.org\u002Fwiki\u002F%D0%9E%D0%B4%D0%B8%D0%BD%D0%BE%D1%87%D0%BA%D0%B0_%28%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%29\"\u003Eздесь\u003C\u002Fa\u003E и \u003Ca href=\"http:\u002F\u002Fwww.rsdn.ru\u002Farticle\u002Fpatterns\u002Fsingleton.xml#EXH\"\u003Eздесь\u003C\u002Fa\u003E). Отмечу лишь что синглтоны бывают потокобезопасные и нет, с простой и отложенной инициализацией.\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch4\u003EА если нет разницы — зачем плодить больше?\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\r\nТак в чем же все-таки разница между этими двумя сущностями и когда следует их использовать? Думаю что лучше всего это проиллюстрировать в следующей таблице:\u003Cbr\u002F\u003E\r\n\u003Ctable\u003E\r\n\u003Ctr\u003E\r\n\u003Cth\u003E\u003C\u002Fth\u003E\r\n\u003Cth\u003ESingleton\u003Cbr\u002F\u003E\r\n\u003C\u002Fth\u003E\r\n\u003Cth\u003EStatic class\u003Cbr\u002F\u003E\r\n\u003C\u002Fth\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EКоличество точек доступа\u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EОдна (и только одна) точка доступа — статическое поле \u003Ci\u003EInstance\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EN (зависит от количества публичных членов класса и методов)\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EНаследование классов \u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EВозможно, но не всегда (об этом — ниже)\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EНевозможно — статические классы не могут быть экземплярными, поскольку нельзя создавать экземпляры объекты статических классов\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EНаследование интерфейсов\u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EВозможно, безо всяких ограничений\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EНевозможно по той же причине, по которой невозможно наследование классов\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EВозможность передачи в качестве параметров\u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EВозможно, поскольку Singleton предоставляет \u003Ci\u003Eреальный\u003C\u002Fi\u003E объект\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EОтсутствует\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EКонтроль времени жизни объекта\u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EВозможно — например, \u003Ci\u003Eотложенная инициализация\u003C\u002Fi\u003E (или \u003Ci\u003Eсоздание по требованию\u003C\u002Fi\u003E)\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EНевозможно по той же причине, по которой невозможно наследование классов\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EИспользование абстрактной фабрики для создания экземпляра класса\u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EВозможно\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EНевозможно по причине осутствия самой возможности создания экземпляра\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003Ctr\u003E\r\n\u003Ctd\u003E\u003Ci\u003E\u003Cb\u003EСериализация\u003C\u002Fb\u003E\u003C\u002Fi\u003E\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EВозможно\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003Ctd\u003EНеприменима по причине отсутствия экземпляра\u003Cbr\u002F\u003E\r\n\u003C\u002Ftd\u003E\r\n\u003C\u002Ftr\u003E\r\n\u003C\u002Ftable\u003E \u003Cbr\u002F\u003E\r\nРассмотрим подробнее перечисленные выше критерии.\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EКоличество точек доступа\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nКонечно же имеются ввиду \u003Ci\u003Eвнешние\u003C\u002Fi\u003E точки доступа, другими словами — публичный контракт взаимодействия класса и его клиентов. Это удобнее проиллюстрировать с помощью кода:\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\nSingleton в «канонической» реализации:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Session\n{\n    private static Session _instance;\n\n    \u002F\u002F Реализация паттерна ...\n\n    public static Session Instance\n    {\n        get\n        {\n            \u002F\u002F ...\n            return _instance;\n        }\n    }\n\n    public IUser GetUser()\n    {\n        \u002F\u002F ...\n    }\n\n    public bool IsSessionExpired()\n    {\n        \u002F\u002F ...\n    }\n\n    public Guid SessionID\n    {\n        get\n        {\n            \u002F\u002F ...\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\nСтатический класс:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic static class Session\n{\n    \u002F\u002F Точка доступа 1\n    public static IUser GetUser()\n    {\n        \u002F\u002F ...\n    }\n\n    \u002F\u002F Точка доступа 2\n    public static bool IsSessionExpired()\n    {\n        \u002F\u002F ...\n    }\n\n    \u002F\u002F ...\n\n    \u002F\u002F Точка доступа N\n    public static Guid SessionID\n    {\n        get\n        {\n            \u002F\u002F ...\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EНаследование классов\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nС наследованием статических классов все просто — оно просто не поддерживается на уровне языка. С Singleton все несколько сложнее. Для удобства использования многие разработчики чаще всего используют следующую реализацию паттерна:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Singleton&lt;T\u003E where T : class\n{\n    private static T _instance;\n\n    protected Singleton()\n    {\n    }\n        \n    private static T CreateInstance()\n    {            \n        ConstructorInfo cInfo = typeof(T).GetConstructor(\n            BindingFlags.Instance | BindingFlags.NonPublic,\n            null,\n            new Type[0],\n            new ParameterModifier[0]);\n\n        return (T)cInfo.Invoke(null);\n    }\n\n    public static T Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n                _instance = CreateInstance();\n            }\n\n            return _instance;\n        }\n    }\n}\n\npublic class Session : Singleton&lt;Session\u003E\n{\n    public IUser GetUser()\n    {\n        \u002F\u002F ...\n    }\n\n    public bool IsSessionExpired()\n    {\n        \u002F\u002F ...\n    }\n\n    public Guid SessionID\n    {\n        get\n        {\n            \u002F\u002F ...\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\nА поскольку множественное наследование в C# и в любом CLI-совместимом языке запрещено — это означает что мы не сможем унаследовать класс Session от любого другого \u003Ci\u003Eполезного\u003C\u002Fi\u003E класса. Выходом является делагирование синглтону управления доступом к экземпляру объекта:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Session : CoreObject\n{\n    private Session()\n    {\n    }\n\n    public static Session Instance\n    {\n        get\n        {\n            return Singleton&lt;Session\u003E.Instance;\n        }             \n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EНаследование интерфейсов\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nИспользование интерфейсов позволяет достичь большей гибкости, увеличить количество повторно используемого кода, повысить тестируемость, и, самое главное — избежать \u003Ci\u003Eсильной связности\u003C\u002Fi\u003E объектов. Статические классы не поддерживают наследования в принципе. Синглтон, напротив, наследование интерфейсов поддерживает в полной мере, поскольку это обычный класс. Но вот использовать эту возможность стоит только в том случае, если экземпляр синглтона планируется передавать в качестве входных параметров в смешанных сценариях или транслировать за границу домена. Пример смешанного сценария:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003E\u002F\u002F Этот класс является синглтоном и реализует интерфейс ISession\npublic class Session: CoreObject, ISession\n{\n    private Session()\n    {\n    }\n\n    public static Session Instance\n    {\n        get\n        {\n            return Singleton&lt;Session\u003E.Instance;\n        }             \n    }\n}\n\n\u002F\u002F Этот класс не является синглтоном и вообще может быть объявлен и реализован в другой сборке\n\u002F\u002F полностью скрывая детали реализации\npublic class VpnSession : ISession\n{\n\n}\n\npublic interface ISessionManager\n{\n    ISession GetSession(Guid sessionID);\n\n    \u002F\u002F Принимает интерфейс ISession, следуя принципам уменьшения связности\n    bool IsSessionExpired(ISession session);        \n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EВозможность передачи в качестве параметров\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nДля статических классов это не поддерживается — можно передать разве что тип, но в большинстве ситуаций это бесполезно, за исключением случаев применения механизмов отражения (\u003Ci\u003Ereflection\u003C\u002Fi\u003E). Синглтон же по сути является обычным экземпляром объекта:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003E\n\u002F\u002F ...\nISessionManager _sessionManager;\n\n\u002F\u002F ...\nbool isExpired = _sessionManager.IsSessionExpired(Session.Instance);\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EКонтроль времени жизни объекта\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nВремя жизни статического класса ограничено временем жизни домена — если мы создали этот домен вручную, то мы косвенно управляем временем жизни всех его статических типов. Временем жизни синглтона мы можем управлять по нашему желанию. Яркий пример — отложенная инициализация:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Singleton&lt;T\u003E where T : class\n{\n    \u002F\u002F ...\n\n    public static T Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n               \u002F\u002F Создание \"по требованию\"\n                _instance = CreateInstance();\n            }\n\n            return _instance;\n        }\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\nМожно также добавить операцию удаления экземпляра синглтона:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Singleton&lt;T\u003E where T : class\n{\n    \u002F\u002F ...\n\n    public static T Instance\n    {\n       \u002F\u002F ...\n    }\n\n    \u002F\u002F Очень опасная операция!\n    public void RemoveInstance()\n    {\n        _instance = null;\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\nДанная операция является крайне небезопасной, поскольку синглтон может хранить некоторое состояние и поэтому его пересоздание может иметь нежелательные последствия для его клиентов. Если все же необходимость в таком методе возникла (что скорее всего указывает на ошибки проектирования) то нужно постараться свести к минимуму возможное зло от его использования — например сделать его закрытым и вызывать внутри свойства Instance при определенных условиях:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Singleton&lt;T\u003E where T : class\n{\n    \u002F\u002F ...\n\n    public static T Instance\n    {\n        get\n        {\n            if (!IsAlive)\n            {\n               \u002F\u002F Удаление по условию\n                RemoveInstance();\n            }\n            if (_instance == null)\n            {\n               \u002F\u002F Создание \"по требованию\"\n                _instance = CreateInstance();\n            }\n\n            return _instance;\n        }\n    }\n\n    private void RemoveInstance()\n    {\n        _instance = null;\n    }\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EИспользование абстрактной фабрики для создания экземпляра класса\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nСтатический класс не поддерживает данной возможности ввиду того, что нельзя создать экземпляр статического класса. В случае с синглтоном все выглядит просто:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic interface IAbstractFactory\n{        \n    T Create&lt;T\u003E();\n\n    bool IsSupported&lt;T\u003E();\n}\n\npublic class Singleton&lt;T\u003E where T : class\n{\n    private static T _instance;\n\n    private static IAbstractFactory _factory;\n\n    protected Singleton(IAbstractFactory factory)\n    {\n        _factory = factory;\n    }\n\n    public static T Instance\n    {\n        get\n        {\n            if (_instance == null)\n            {\n                _instance = _factory.Create&lt;T\u003E();\n            }\n\n            return _instance;\n        }\n    }\n}\n\n\u002F\u002F Вариант с прямым наследованием от синглтона\npublic class Session : Singleton&lt;Session\u003E\n{\n    protected Session()\n        : base(new ConcreteFactory())\n    {\n    }\n\n    \u002F\u002F ...\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\nПравда в варианте с аггрегацией синглтона придеться применить не совсем красивое и, немного громоздкое решение:\u003Cbr\u002F\u003E\r\n\u003Cpre\u003E\u003Ccode class=\"cs\"\u003Epublic class Session : CoreObject, ISession\n{\n    private class SessionSingleton : Singleton&lt;Session\u003E\n    {\n        protected SessionSingleton()\n            : base(new ConcreteFactory2())\n        {\n        }\n    }\n\n    private Session()\n        : base(new CoreContext())\n    {\n    }\n\n    public static Session Instance\n    {\n        get\n        {\n            return SessionSingleton.Instance;\n        }             \n    }\n\n    \u002F\u002F ...\n}\n\u003C\u002Fcode\u003E\u003C\u002Fpre\u003E\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch5\u003EСериализация\u003C\u002Fh5\u003E\u003Cbr\u002F\u003E\r\nСериализация применима только к экземплярам классов. Статический класс не может иметь экзмпляров поэтому сериализовать в данном случае нечего.\u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Ch4\u003EТак что же использовать Синглтон или Статический класс?\u003C\u002Fh4\u003E\u003Cbr\u002F\u003E\r\nВ любом случае выбор решения зависит от разработчика и от специфики решаемой им задачи. Но, в любом случае, можно сделать следующие выводы: \u003Cbr\u002F\u003E\r\n\u003Cbr\u002F\u003E\r\n\u003Cb\u003EИспользование синглотона оправдано, когда:\u003C\u002Fb\u003E\u003Cbr\u002F\u003E\r\n\u003Cul\u003E\r\n\u003Cli\u003EНеобходимо наследование классов или интерфейсов или делегаровать конструирование объектов фабрике\u003C\u002Fli\u003E\r\n\u003Cli\u003EНеобходимо использование экземпляров класса \u003C\u002Fli\u003E\r\n\u003Cli\u003EНеобходимо контролировать время жизни объекта (хоть это и очень редкая задача для синглтона)\u003C\u002Fli\u003E\r\n\u003Cli\u003EНеобходимо сериализовать объект (такая задача гипотетически возможна, но трудно представить себе сценарии использования) \u003C\u002Fli\u003E\r\n\u003C\u002Ful\u003E\u003Cbr\u002F\u003E\r\n\u003Cb\u003EИспользование статических классов целесообразно тогда\u003C\u002Fb\u003E, когда у вас нет необходимости реализовывать ни один из сценариев перечисленных для синглтона. Основное назначение статических классов все-таки в группировке логически схожих методов, констант, полей и свойств. Например: \u003Ci\u003ESystem.Math\u003C\u002Fi\u003E, \u003Ci\u003ESystem.BitConverter\u003C\u002Fi\u003E, \u003Ci\u003ESystem.Buffer\u003C\u002Fi\u003E, \u003Ci\u003ESystem.Convert\u003C\u002Fi\u003E и т.д.\u003C\u002Fdiv\u003E","tags":[{"titleHtml":"проектирование"},{"titleHtml":"паттерны"},{"titleHtml":"классы"},{"titleHtml":".net"}],"metadata":{"stylesUrls":[],"scriptUrls":[],"shareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F103681\u002F74cf9278abb833c5451a5e8db52a9eb4\u002F","shareImageWidth":1200,"shareImageHeight":630,"vkShareImageUrl":"https:\u002F\u002Fhabr.com\u002Fshare\u002Fpublication\u002F103681\u002F74cf9278abb833c5451a5e8db52a9eb4\u002F?format=vk","schemaJsonLd":"{\"@context\":\"http:\\\u002F\\\u002Fschema.org\",\"@type\":\"Article\",\"mainEntityOfPage\":{\"@type\":\"WebPage\",\"@id\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fpost\\\u002F103681\\\u002F\"},\"headline\":\"Singleton (Одиночка) или статический класс?\",\"datePublished\":\"2010-09-18T05:52:48+04:00\",\"dateModified\":\"2010-09-18T05:57:18+04:00\",\"author\":{\"@type\":\"Person\",\"name\":\"Хитман\"},\"publisher\":{\"@type\":\"Organization\",\"name\":\"Habr\",\"logo\":{\"@type\":\"ImageObject\",\"url\":\"https:\\\u002F\\\u002Fhabrastorage.org\\\u002Fwebt\\\u002Fa_\\\u002Flk\\\u002F9m\\\u002Fa_lk9mjkccjox-zccjrpfolmkmq.png\"}},\"description\":\"Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос &laquo;Назовите основные отличия синглтона от статического...\",\"url\":\"https:\\\u002F\\\u002Fhabr.com\\\u002Fru\\\u002Fpost\\\u002F103681\\\u002F#post-content-body\",\"about\":[\"h_refactoring\",\"f_develop\"],\"image\":[\"https:\\\u002F\\\u002Fhabr.com\\\u002Fshare\\\u002Fpublication\\\u002F103681\\\u002F74cf9278abb833c5451a5e8db52a9eb4\\\u002F\"]}","metaDescription":"Статья будет полезна в первую очередь разработчикам, которые теряются на собеседованиях когда слышат вопрос «Назовите основные отличия синглтона от статического класса, и когда следует использовать...","mainImageUrl":null,"amp":false},"polls":[],"commentsEnabled":true,"rulesRemindEnabled":false,"votesEnabled":true,"status":"published","plannedPublishTime":null,"checked":null,"isEditorial":false}},"articlesIds":{},"isLoading":false,"pagesCount":{},"route":{},"reasonsList":null,"view":"cards","lastVisitedRoute":{},"ssrCommentsArticleIds":[""],"karma":{}},"authorContribution":{"authors":{}},"betaTest":{"currentAnnouncement":null,"announcements":{},"announcementCards":null,"announcementComments":{},"announcementCommentThreads":{},"announcementCommentingStatuses":{},"archivedList":[]},"authorStatistics":{"articleRefs":{},"articleIds":{},"pagesCount":{},"route":{},"viewsCount":[],"maxStatsCount":{}},"career":{"seoLandings":[],"hubs":""},"comments":{"articleComments":{},"searchCommentsResults":null,"previewComment":null,"pagesCount":null,"commentAccess":{},"scrollParents":{},"pageArticleComments":{"lastViewedComment":0,"postId":null,"lastCommentTimestamp":"","moderated":[],"moderatedIds":[],"commentRoute":""}},"companies":{"companyRefs":{},"companyIds":{},"companyTopIds":{},"pagesCount":{},"companyProfiles":{},"companiesCategories":[],"companiesCategoriesTotalCount":0,"companiesWidgets":{},"companiesWorkers":{},"companiesFans":{},"route":{},"isLoading":false,"companyWorkersLoading":false,"companyFansLoading":false,"vacancies":{}},"companiesContribution":{"hubs":{},"flows":{},"companyRefs":{}},"companyHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"conversation":{"messages":[],"respondent":null,"isLoadMore":false},"conversations":{"conversations":[],"unreadCount":0,"pagesCount":0,"isLoadMore":false},"desktopState":{"desktopFl":null,"desktopHl":null,"isChecked":false,"isLoginDemanded":false},"dfp":{"slotsDict":{}},"docs":{"menu":{},"articles":{},"mainMenu":[],"loading":{"main":false,"dropdown":false,"article":false}},"feature":{"isProbablyVisible":"true"},"flows":{"flows":[{"alias":"develop","id":1,"route":{"name":"FLOW_PAGE","params":{"flowName":"develop"}}},{"alias":"admin","id":6,"route":{"name":"FLOW_PAGE","params":{"flowName":"admin"}}},{"alias":"design","id":2,"route":{"name":"FLOW_PAGE","params":{"flowName":"design"}}},{"alias":"management","id":3,"route":{"name":"FLOW_PAGE","params":{"flowName":"management"}}},{"alias":"marketing","id":4,"route":{"name":"FLOW_PAGE","params":{"flowName":"marketing"}}},{"alias":"popsci","id":7,"route":{"name":"FLOW_PAGE","params":{"flowName":"popsci"}}}]},"global":{"isPwa":false,"device":"desktop","isHabrCom":true},"hubs":{"hubRefs":{},"hubIds":{},"pagesCount":{},"isLoading":false,"route":{}},"hubsBlock":{"hubRefs":{},"hubIds":{}},"i18n":{"fl":"en","hl":"en"},"info":{"infoPage":{},"isLoading":true},"location":{"urlStruct":{"protocol":null,"slashes":null,"auth":null,"host":null,"port":null,"hostname":null,"hash":null,"search":null,"query":{},"pathname":null,"path":null,"href":""},"searchQuery":null},"me":{"user":null,"ppgDemanded":false,"karmaResetInfo":{"canReincarnate":null,"wasReincarnated":null,"currentScore":null},"notes":null},"mostReadingList":{"mostReadingListIds":[],"mostReadingListRefs":null,"promoPost":null},"pinnedPost":{"pinnedPost":null},"ppa":{"articles":{},"card":null,"transactions":null,"totalTransactions":null,"isAccessible":null},"projectsBlocks":{"activeBlocks":{}},"pullRefresh":{"shouldRefresh":false},"sandbox":{"articleIds":[],"articleRefs":{},"pagesCount":null,"route":{},"lastVisitedRoute":{},"isLoading":false},"settingsOther":{"inputs":{"uiLang":{"errors":[],"ref":null,"value":""},"articlesLangEnglish":{"errors":[],"ref":null,"value":false},"articlesLangRussian":{"errors":[],"ref":null,"value":false},"agreement":{"errors":[],"ref":null,"value":false},"email":{"errors":[],"ref":null,"value":true},"digest":{"errors":[],"ref":null,"value":true}}},"similarList":{"similarListIds":[],"similarListRefs":null},"ssr":{"error":null,"isDataLoaded":false,"isDataLoading":false,"isHydrationFailed":false,"isServer":false},"userHubsContribution":{"contributionRefs":{"hubRefs":{},"hubIds":{}}},"userInvites":{"availableInvites":0,"usedInvitesIds":[],"usedInvitesRefs":{},"usedInvitesPagesCount":0,"unusedInvitesIds":[],"unusedInvitesRefs":{},"unusedInvitesPagesCount":0},"users":{"authorRefs":{},"authorIds":{},"pagesCount":{},"authorProfiles":{},"userHubs":{},"userInvitations":{},"authorFollowers":{},"authorFollowed":{},"karmaStats":[],"statistics":null,"isLoading":false,"authorFollowersLoading":false,"authorFollowedLoading":false,"userHubsLoading":false,"userInvitationsLoading":false,"route":{}},"viewport":{"prevScrollY":{},"scrollY":0,"width":0},"tracker":{"items":{},"pagesCache":{},"markedViewedSilently":{},"markedRead":{},"unreadCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null},"unviewedCounters":{"applications":null,"system":null,"mentions":null,"subscribers":null,"posts_and_comments":null}}};(function(){var s;(s=document.currentScript||document.scripts[document.scripts.length-1]).parentNode.removeChild(s);}());</script>
<script src="https://assets.habr.com/habr-web/js/chunk-vendors.881c3e9d.js" defer></script><script src="https://assets.habr.com/habr-web/js/app.fdbba7e2.js" defer></script>



    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
        m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    </script>
  
  <script type="text/javascript" >
    (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};
    m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})
    (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(24049213, "init", {
      defer:true,
      trackLinks:true,
      accurateTrackBounce:true,
      webvisor:false,
    });
  </script>
  <noscript>
    <div>
      <img src="https://mc.yandex.ru/watch/24049213" style="position:absolute; left:-9999px;" alt="" />
    </div>
  </noscript>
  
    <script type="text/javascript">
      window.addEventListener('load', function () {
        setTimeout(() => {
          const img = new Image();
          img.src = 'https://vk.com/rtrg?p=VK-RTRG-421343-57vKE';
        }, 0);
      });
    </script>
  
</body>
</html>
