<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>отладка | ABAP Blog</title>
	<atom:link href="https://abap-blog.ru/tag/otladka/feed/" rel="self" type="application/rss+xml" />
	<link>https://abap-blog.ru</link>
	<description>Все о разработке в решениях от SAP</description>
	<lastBuildDate>Tue, 02 Mar 2021 06:12:38 +0000</lastBuildDate>
	<language>ru-RU</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>
	<item>
		<title>Точки наблюдения и Field-symbols</title>
		<link>https://abap-blog.ru/osnovy-abap/tochki-nablyudeniya-i-field-symols/</link>
					<comments>https://abap-blog.ru/osnovy-abap/tochki-nablyudeniya-i-field-symols/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Wed, 23 Sep 2015 20:15:08 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[отладка]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=2610</guid>

					<description><![CDATA[<p>ABAP отладчик ограничивает использование точек наблюдения (whatchpoints) на field-symbols, однако можно обойти это ограничение путём использования точки прерывания на базе исходного кода.  Рассмотрим пример кода: [crayon-618a1f026dda2215475943/] Предположим Вы захотели остановится на итерации цикла когда значение переменной &#60;lv_test&#62; будет иметь значение &#171;3&#187;. Переходим в отладке на вкладку точек прерываний и устанавливаем её следующим образом (тут следует [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/tochki-nablyudeniya-i-field-symols/">Точки наблюдения и Field-symbols</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>ABAP отладчик ограничивает использование точек наблюдения (whatchpoints) на field-symbols, однако можно обойти это ограничение путём использования точки прерывания на базе исходного кода. <span id="more-2610"></span></p>
<p>Рассмотрим пример кода:</p><pre class="urvanov-syntax-highlighter-plain-tag">DATA: lt_test TYPE STANDARD TABLE OF i.
FIELD-SYMBOLS: &lt;lv_test&gt; TYPE i.

APPEND 1 TO lt_test.
APPEND 2 TO lt_test.
APPEND 3 TO lt_test.
LOOP AT lt_test ASSIGNING &lt;lv_test&gt;.
  sy-tabix = sy-tabix.
ENDLOOP.</pre><p>Предположим Вы захотели остановится на итерации цикла когда значение переменной &lt;lv_test&gt; будет иметь значение &#171;3&#187;. Переходим в отладке на вкладку точек прерываний и устанавливаем её следующим образом (тут следует обратить внимание что не во всех версиях SAP системы есть ограничение относительно заданного условия), при этом в качестве строки кода обозначаем либо строку начала цикла, либо строку внутри цикла:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2015/09/breakpont.png"><img loading="lazy" class="alignnone size-full wp-image-2611" src="http://abap-blog.ru/wp-content/uploads/2015/09/breakpont.png" alt="breakpont" width="648" height="364" srcset="https://abap-blog.ru/wp-content/uploads/2015/09/breakpont.png 648w, https://abap-blog.ru/wp-content/uploads/2015/09/breakpont-300x169.png 300w" sizes="(max-width: 648px) 100vw, 648px" /></a></p>
<p>Далее жмём F8 и в итоге останавливаемся в искомом месте:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2015/09/Debug.png"><img loading="lazy" class="alignnone size-full wp-image-2612" src="http://abap-blog.ru/wp-content/uploads/2015/09/Debug.png" alt="Debug" width="452" height="275" srcset="https://abap-blog.ru/wp-content/uploads/2015/09/Debug.png 452w, https://abap-blog.ru/wp-content/uploads/2015/09/Debug-300x183.png 300w" sizes="(max-width: 452px) 100vw, 452px" /></a></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/tochki-nablyudeniya-i-field-symols/">Точки наблюдения и Field-symbols</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/tochki-nablyudeniya-i-field-symols/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>6 способов найти место вызова сообщений</title>
		<link>https://abap-blog.ru/osnovy-abap/6-sposobov-vyyasnit-otkuda-bylo-vyzvano-soobshhenie/</link>
					<comments>https://abap-blog.ru/osnovy-abap/6-sposobov-vyyasnit-otkuda-bylo-vyzvano-soobshhenie/#comments</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Fri, 17 Jan 2014 12:31:35 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[SAT]]></category>
		<category><![CDATA[ST05]]></category>
		<category><![CDATA[отладка]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=1780</guid>

					<description><![CDATA[<p>Задачу определения места в программе, из которого было вызвано сообщение, можно решить несколькими способами. Ниже будут рассмотрены основные из них. В качестве простого примера рассмотрим вызов сообщения в SE38, при неправильно указанном имени программы: Способ первый. Щелкнув дважды по сообщению и открыв подробный текст в разделе технической информации, мы увидим класс сообщения и его номер: [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/6-sposobov-vyyasnit-otkuda-bylo-vyzvano-soobshhenie/">6 способов найти место вызова сообщений</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Задачу определения места в программе, из которого было вызвано сообщение, можно решить несколькими способами. Ниже будут рассмотрены основные из них.</p>
<p><span id="more-1780"></span><span style="line-height: 1.5em;">В качестве простого примера рассмотрим вызов сообщения в SE38, при неправильно указанном имени программы:</span></p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/se38.png"><img loading="lazy" class="alignnone size-full wp-image-1781" src="http://abap-blog.ru/wp-content/uploads/2014/01/se38.png" alt="se38" width="488" height="290" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/se38.png 488w, https://abap-blog.ru/wp-content/uploads/2014/01/se38-300x178.png 300w" sizes="(max-width: 488px) 100vw, 488px" /></a></p>
<p><b>Способ первый</b>. Щелкнув дважды по сообщению и открыв подробный текст в разделе технической информации, мы увидим класс сообщения и его номер:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/tech_info.png"><img loading="lazy" class="alignnone size-full wp-image-1782" src="http://abap-blog.ru/wp-content/uploads/2014/01/tech_info.png" alt="tech_info" width="495" height="287" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/tech_info.png 495w, https://abap-blog.ru/wp-content/uploads/2014/01/tech_info-300x173.png 300w" sizes="(max-width: 495px) 100vw, 495px" /></a></p>
<p>Перейдя в указанный класс сообщений (тр. SE91) можно воспользоваться командой на поиск мест, где используется указанное сообщение:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/se91.png"><img loading="lazy" class="alignnone size-full wp-image-1783" src="http://abap-blog.ru/wp-content/uploads/2014/01/se91.png" alt="se91" width="767" height="419" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/se91.png 767w, https://abap-blog.ru/wp-content/uploads/2014/01/se91-300x163.png 300w" sizes="(max-width: 767px) 100vw, 767px" /></a></p>
<p>В результате список окажется довольно большим и нам надо будет прощелкать все программы в поисках нужного вызова:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/se91result.png"><img loading="lazy" class="alignnone size-full wp-image-1784" src="http://abap-blog.ru/wp-content/uploads/2014/01/se91result.png" alt="se91result" width="758" height="347" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/se91result.png 758w, https://abap-blog.ru/wp-content/uploads/2014/01/se91result-300x137.png 300w" sizes="(max-width: 758px) 100vw, 758px" /></a></p>
<p>В случае, когда список маленький, можем поставить точки прерывания в каждом из вызовов, повторим некорректный ввод программы мы, скорее всего, попадём в нужное нам место.</p>
<p>Данный способ не совсем удобен и не дает 100% результата, т.к. сообщение может быть вызвано не из класса сообщений, а список использования его программами может быть очень большим.</p>
<p><b>Способ второй</b>. Наиболее результативными способами будут способы, которые используют отладчик. С помощью точек наблюдений в отладчике, мы можем отследить состояние системных переменных: <b>sy-</b><b>msgid</b> и <b>sy-</b><b>msgno</b>. Переходим в отладку (/h):</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/debuf.png"><img loading="lazy" class="alignnone size-full wp-image-1785" src="http://abap-blog.ru/wp-content/uploads/2014/01/debuf.png" alt="debuf" width="491" height="232" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/debuf.png 491w, https://abap-blog.ru/wp-content/uploads/2014/01/debuf-300x141.png 300w" sizes="(max-width: 491px) 100vw, 491px" /></a></p>
<p>Нажимаем F8, переходим на вкладку Watchpoints, выставляем значения, полученные из технической информации:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/wp1.png"><img loading="lazy" class="alignnone size-full wp-image-1809" src="http://abap-blog.ru/wp-content/uploads/2014/01/wp1.png" alt="wp" width="870" height="273" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/wp1.png 870w, https://abap-blog.ru/wp-content/uploads/2014/01/wp1-300x94.png 300w" sizes="(max-width: 870px) 100vw, 870px" /></a></p>
<p>Запускаем программу (F8), вываливаемся на нужном месте:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/wpres1.png"><img loading="lazy" class="alignnone size-full wp-image-1810" src="http://abap-blog.ru/wp-content/uploads/2014/01/wpres1.png" alt="wpres" width="1109" height="350" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/wpres1.png 1109w, https://abap-blog.ru/wp-content/uploads/2014/01/wpres1-300x94.png 300w, https://abap-blog.ru/wp-content/uploads/2014/01/wpres1-1024x323.png 1024w" sizes="(max-width: 1109px) 100vw, 1109px" /></a></p>
<p><b>Способ третий</b>. Таким же способом, как и ранее, попадаем в отладку, далее переходим к выставлению точек прерывания и указываем ABAP команду MESSAGE:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/msg1.png"><img loading="lazy" class="alignnone size-full wp-image-1811" src="http://abap-blog.ru/wp-content/uploads/2014/01/msg1.png" alt="msg" width="900" height="380" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/msg1.png 900w, https://abap-blog.ru/wp-content/uploads/2014/01/msg1-300x126.png 300w" sizes="(max-width: 900px) 100vw, 900px" /></a></p>
<p>Либо добавляем её через меню:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/msg_menu1.png"><img loading="lazy" class="alignnone size-full wp-image-1812" src="http://abap-blog.ru/wp-content/uploads/2014/01/msg_menu1.png" alt="msg_menu" width="900" height="373" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/msg_menu1.png 900w, https://abap-blog.ru/wp-content/uploads/2014/01/msg_menu1-300x124.png 300w" sizes="(max-width: 900px) 100vw, 900px" /></a></p>
<p>В данном случае можно будет указать еще и тип вызываемого сообщения:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/msgmenu.png"><img loading="lazy" class="alignnone size-full wp-image-1790" src="http://abap-blog.ru/wp-content/uploads/2014/01/msgmenu.png" alt="msgmenu" width="809" height="352" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/msgmenu.png 809w, https://abap-blog.ru/wp-content/uploads/2014/01/msgmenu-300x130.png 300w" sizes="(max-width: 809px) 100vw, 809px" /></a></p>
<p><b style="line-height: 1.5em;">Способ четвертый</b><span style="line-height: 1.5em;">. Найти вхождение вызова оператора MESSAGE, используя программы сканирования исходного текста. Первое что нужно сделать определится через статус системы где мы находимся и в какой программе нужно искать (По меню Система -&gt; Статус):</span></p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/status.png"><img loading="lazy" class="alignnone size-full wp-image-1791" src="http://abap-blog.ru/wp-content/uploads/2014/01/status.png" alt="status" width="264" height="166" /></a></p>
<p>Далее открываем программу сканирования исходного текста (через SE38) RPR_ABAP_SOURCE_SCAN (либо использовать транзакцию CODE_SCANNER) и заполняем искомые данные:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/scan.png"><img loading="lazy" class="alignnone size-full wp-image-1792" src="http://abap-blog.ru/wp-content/uploads/2014/01/scan.png" alt="scan" width="633" height="218" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/scan.png 633w, https://abap-blog.ru/wp-content/uploads/2014/01/scan-300x103.png 300w" sizes="(max-width: 633px) 100vw, 633px" /></a></p>
<p>Результат:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/scanres.png"><img loading="lazy" class="alignnone size-full wp-image-1793" src="http://abap-blog.ru/wp-content/uploads/2014/01/scanres.png" alt="scanres" width="515" height="171" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/scanres.png 515w, https://abap-blog.ru/wp-content/uploads/2014/01/scanres-300x99.png 300w" sizes="(max-width: 515px) 100vw, 515px" /></a></p>
<p><b>Способ пятый</b>. С помощью транзакции SAT можно проанализировать вызовы всех ABAP операторов в программе. Первым делом нужно создать вариант, в котором не будут объединяться измерения:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/sat.png"><img loading="lazy" class="alignnone size-full wp-image-1794" src="http://abap-blog.ru/wp-content/uploads/2014/01/sat.png" alt="sat" width="439" height="254" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/sat.png 439w, https://abap-blog.ru/wp-content/uploads/2014/01/sat-300x173.png 300w" sizes="(max-width: 439px) 100vw, 439px" /></a></p>
<p>Далее запускаем транзакцию SE38 через SAT с нашим вариантом:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/satvar1.png"><img loading="lazy" class="alignnone size-full wp-image-1813" src="http://abap-blog.ru/wp-content/uploads/2014/01/satvar1.png" alt="satvar" width="612" height="354" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/satvar1.png 612w, https://abap-blog.ru/wp-content/uploads/2014/01/satvar1-300x173.png 300w" sizes="(max-width: 612px) 100vw, 612px" /></a></p>
<p>После трассировки смотрим иерархию вызовов и ищем оператор MESSAGE:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/satsearch.png"><img loading="lazy" class="alignnone size-full wp-image-1796" src="http://abap-blog.ru/wp-content/uploads/2014/01/satsearch.png" alt="satsearch" width="814" height="350" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/satsearch.png 814w, https://abap-blog.ru/wp-content/uploads/2014/01/satsearch-300x128.png 300w" sizes="(max-width: 814px) 100vw, 814px" /></a></p>
<p>Результат:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/satrestult.png"><img loading="lazy" class="alignnone size-full wp-image-1797" src="http://abap-blog.ru/wp-content/uploads/2014/01/satrestult.png" alt="satrestult" width="843" height="230" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/satrestult.png 843w, https://abap-blog.ru/wp-content/uploads/2014/01/satrestult-300x81.png 300w" sizes="(max-width: 843px) 100vw, 843px" /></a></p>
<p>Щелкнув два раза по позиции, мы перейдем в нужное нам место. Данный способ не является оптимальным, т.к. в больших программах файл трассировки будет очень большим и его анализ затянется.</p>
<p><b>Способ шестой</b>. Использовать транзакцию <b>ST05</b>. Порядок действий следующий:</p>
<ul>
<li>Открыть две сессии в одной запустить ST05, во второй SE38 с неверным названием программы</li>
<li>Активируем трассировку</li>
<li>Запускаем программу в SE38</li>
<li>Деактивируем трассировку</li>
</ul>
<p>Зная, что таблица с наименованиями программы называется <b>PROGDIR</b>, мы можем перейти в то место кода программы, где вызывается считывание данной таблицы. Предполагаем, что вызов сообщения о несуществующей программе будет где-то «рядом»:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/st05.png"><img loading="lazy" class="alignnone size-full wp-image-1798" src="http://abap-blog.ru/wp-content/uploads/2014/01/st05.png" alt="st05" width="947" height="184" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/st05.png 947w, https://abap-blog.ru/wp-content/uploads/2014/01/st05-300x58.png 300w" sizes="(max-width: 947px) 100vw, 947px" /></a></p>
<p>Как видим на рисунке, наше предположение было верным:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/01/st05result.png"><img loading="lazy" class="alignnone size-full wp-image-1799" src="http://abap-blog.ru/wp-content/uploads/2014/01/st05result.png" alt="st05result" width="519" height="673" srcset="https://abap-blog.ru/wp-content/uploads/2014/01/st05result.png 519w, https://abap-blog.ru/wp-content/uploads/2014/01/st05result-231x300.png 231w" sizes="(max-width: 519px) 100vw, 519px" /></a></p>
<p>С оригиналом статьи можно ознакомиться <a href="http://scn.sap.com/community/abap/blog/2013/11/15/six-kinds-of-debugging-tips-to-find-the-source-code-where-the-message-is-raised">тут</a>.</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/6-sposobov-vyyasnit-otkuda-bylo-vyzvano-soobshhenie/">6 способов найти место вызова сообщений</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/6-sposobov-vyyasnit-otkuda-bylo-vyzvano-soobshhenie/feed/</wfw:commentRss>
			<slash:comments>1</slash:comments>
		
		
			</item>
		<item>
		<title>Введение в Debugger Scripting</title>
		<link>https://abap-blog.ru/osnovy-abap/vvedenie-v-debugger-scripting/</link>
					<comments>https://abap-blog.ru/osnovy-abap/vvedenie-v-debugger-scripting/#comments</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Tue, 29 May 2012 14:36:14 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[CL_TPDA_SCRIPT_CLASS_SUPER]]></category>
		<category><![CDATA[CL_TPDA_SCRIPT_DEBUGGER_CTRL]]></category>
		<category><![CDATA[Debugger Scripting]]></category>
		<category><![CDATA[отладка]]></category>
		<category><![CDATA[скрипты]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=850</guid>

					<description><![CDATA[<p>Скрипты необходимы чтобы автоматизировать действия, производимые в отладчике вручную. К примеру, можно совершить 1000 шагов в цикле, изменять и получать значения переменных. Кроме того данный механизм позволит вам выполнять следующие действия: Изменять ход выполнения программы (путем изменения переменных) Анализировать значения переменных и ход выполнения программы Создавать журналы выполнения программы (трассировки) Создавать точки наблюдения и остановок, [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/vvedenie-v-debugger-scripting/">Введение в Debugger Scripting</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Скрипты необходимы чтобы автоматизировать действия, производимые в отладчике вручную. К примеру, можно совершить 1000 шагов в цикле, изменять и получать значения переменных. Кроме того данный механизм позволит вам выполнять следующие действия:</p>
<ul>
<li>Изменять ход выполнения программы (путем изменения переменных)</li>
<li>Анализировать значения переменных и ход выполнения программы</li>
<li>Создавать журналы выполнения программы (трассировки)</li>
<li>Создавать точки наблюдения и остановок, в зависимости от условий</li>
</ul>
<div><span id="more-850"></span></div>
<p>Скрипты используют интерфейс отладчика и запускаются на его стороне. Они не могу непосредственно изменять код программы, но могут повлиять на ход его выполнения. Окно скриптов в отладчике:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2012/05/src1.png"><img loading="lazy" class="alignnone size-full wp-image-851" title="src1" src="http://abap-blog.ru/wp-content/uploads/2012/05/src1.png" alt="" width="1254" height="723" srcset="https://abap-blog.ru/wp-content/uploads/2012/05/src1.png 1254w, https://abap-blog.ru/wp-content/uploads/2012/05/src1-300x172.png 300w, https://abap-blog.ru/wp-content/uploads/2012/05/src1-1024x590.png 1024w" sizes="(max-width: 1254px) 100vw, 1254px" /></a></p>
<ol>
<li>Редактор скрипта, как видно скрипт представляет собой класс с методами, через которые получает доступ к отладчику.</li>
<li>Триггер – определяет событие, при котором будет вызван скрипт. Скрипт может быть вызван напрямую (Debugger Simple Step – execute directly), либо из точки наблюдения или остановки.</li>
<li>В этой области как не трудно догадаться скрипт можно сохранить (как Z программу, либо отдельным файлом)</li>
<li>С помощью кнопки Start Script происходит выполнение скрипта</li>
<li>Script Wizard предоставляет доступ к заранее подготовленным шаблонам – использующим возможности интерфейса отладчика, например с его помощью можно вставить метод чтения значений переменной.</li>
<li>Если вы создаете трассировки, то их список можно увидеть на вкладке – Traces Files. Список трассировок можно так же посмотреть отдельно в транзакции SAS, из нее можно редактировать и сохранять скрипты. Трассировки могут быть следующих видов: Statement Trace (Записывает информацию о текущей строке исходного кода, которая обрабатывается в скрипте), Trace of the Call Hierarchy (Запись иерархии вызовов), User Specific Trace (Определенный пользователем вид).</li>
</ol>
<p>Далее рассмотрим созданный локальный класс скрипта. Скрипт наследуется от глобального класса &#8212; <strong>CL_TPDA_SCRIPT_CLASS_SUPER</strong>. По умолчанию для него создаются следующие методы:</p>
<ol start="1">
<li><strong>Prologue</strong> – техническая инициализация скрипта. Когда скрипт запускается, отладчик сначала выполняет данный метод. В реализации супер класса данного метода происходит обновление информации об исходном коде программы (super-&gt;abap_source), если вам не нужна данная информация, вы можете ускорить выполнение скрипта, закомментировав вызов метода prologue супер класса.</li>
<li><strong>Init</strong> – инициализация скрипта. Вызов происходит после prologue только один раз, Вы можете использовать его для инициализации внутренних данных либо для запроса у пользователя информации необходимой для скрипта.</li>
<li><strong>Script</strong> – метод вызывающийся при каждом срабатывании триггера, или прямом выполнении скрипта. В данный метод передается параметр p_trigger – обозначающий тип триггера, который его запустил. Кроме того у него есть два исключения, <strong>cx_tpda_stop_scripting_request</strong> – вызвав данное исключение вы прекратите срабатывание скрипта по данному триггеру, <strong>cx_tpda_script_continue</strong> – продолжает выполнение работы скрипта. Для того чтобы позволить пользователю выбрать хочет он продолжать работу скрипта далее или нет используйте метод &#8212;  me-&gt;break( ).</li>
<li>End – конец выполнения скрипта. Срабатывает когда пользователь отменяет работу скрипта, либо когда он сам ее завершает.</li>
</ol>
<p>Супер класс поддерживает следующие сервисы:</p>
<ul>
<li><strong>abap_</strong><strong>source</strong> – данные об исходном коде программы, например получить имя программы можно следующим образом &#8212; currr_prog = abap_source-&gt;program( )</li>
<li><strong>bp</strong> – работа с точками остановок</li>
<li><strong>wp</strong> – работа с точками наблюдения</li>
<li><strong>debugger_</strong><strong>control</strong> – позволяет управлять отладчиком на уровне шага, перейти на шаг вперед (назад)</li>
<li><strong>dynpro</strong> – информация о экранах</li>
<li><strong>specials</strong> – прочая системная информация (Работа с памятью, вызов commit work и пр.)</li>
</ul>
<div></div>
<div>
<h3>Автоматизация рутинных действий</h3>
<p>Допустим, есть следующая программа:</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT zscripting_control.

DATA: gv_rc TYPE char1.

DO 1000 TIMES.
  PERFORM test USING gv_rc.
  IF gv_rc = abap_true.
    MESSAGE 'Error' TYPE 'E'.
  ENDIF.
ENDDO.

WRITE 'Все в порядке'.

FORM test USING lv_rc TYPE char1.
  lv_rc = abap_true.
ENDFORM.</pre><p>Как видно из кода, переменной <strong>gv_</strong><strong>rc</strong> всегда будет присваиваться значение true, таким образом, чтобы пройти весь цикл нам необходимо в каждой итерации цикла подменять значение переменной, что само по себе накладно (для 1000 итераций J). Воспользуемся скриптами. Запустите программу в отладке и перейдите на закладку Scripts. В качестве триггера выберите Breakboint Reached, создайте точку остановки для процедуры Test.</p>
</div>
<p><a href="http://abap-blog.ru/wp-content/uploads/2012/05/src2.png"><img loading="lazy" class="alignnone size-full wp-image-852" title="src2" src="http://abap-blog.ru/wp-content/uploads/2012/05/src2.png" alt="" width="405" height="126" srcset="https://abap-blog.ru/wp-content/uploads/2012/05/src2.png 405w, https://abap-blog.ru/wp-content/uploads/2012/05/src2-300x93.png 300w" sizes="(max-width: 405px) 100vw, 405px" /></a></p>
<p>В момент, когда процедура будет запущена, сработает метод <strong>Script</strong>. Нам необходимо чтобы при этом отладчик вышел из процедуры и подменил значение переменной gv_rc. Как уже упоминалось выше для контроля над процессом отладки в классе super, есть подкласс – <strong>debugger_</strong><strong>controller</strong>. С помощью его метода – <strong>debug_</strong><strong>step</strong> мы можем выполнить нужный нам шаг, в качестве команды задать &#8212; <strong>CL_TPDA_SCRIPT_DEBUGGER_CTRL</strong>=&gt;<strong>debug_step_over</strong>. Далее с помощью помощника выберем изменение значений переменной. В итоге получиться следующий код:</p><pre class="urvanov-syntax-highlighter-plain-tag">METHOD script.
    me-&gt;debugger_controller-&gt;debug_step( CL_TPDA_SCRIPT_DEBUGGER_CTRL=&gt;debug_step_over ).
    TRY.
        cl_tpda_script_data_descr=&gt;change_value(
            p_new_value = ''
            p_varname   = 'gv_rc' ).
      CATCH cx_tpda_varname .
      CATCH cx_tpda_scr_auth .
    ENDTRY.
  ENDMETHOD.                    "script</pre><p>Далее нажмите кнопку запуска скрипта, если все сделано правильно программа пройдет весь цикл, не выдав ошибочного сообщения, написав «Все в порядке».</p>
<p><strong>Интерактивные скрипты</strong></p>
<p>Допустим, необходимо чтобы при смене ABAP стека каждый раз, когда мы переходим в определенную программу, вызывался скрипт, но при этом мы хотим сделать скрипт более универсальным, т.е. имя программы необходимо задавать при его инициализации. Для запроса имени программы в методе init используем ФМ POPUP_GET_VALUES, имя программы будем хранить в глобальной переменной нашего класса. Поставим триггер на точку прерывания при смене ABAP стека.</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2012/05/src3.png"><img loading="lazy" class="alignnone size-full wp-image-853" title="src3" src="http://abap-blog.ru/wp-content/uploads/2012/05/src3.png" alt="" width="403" height="136" srcset="https://abap-blog.ru/wp-content/uploads/2012/05/src3.png 403w, https://abap-blog.ru/wp-content/uploads/2012/05/src3-300x101.png 300w" sizes="(max-width: 403px) 100vw, 403px" /></a></p>
<p>В методе script сравним имя программы в текущем контексте отладчика с именем указанным при инициализации, если оно совпало, вызовем прерывание скрипта. Изменим предыдущую программу (создадим дополнительно новую – ZTMP3 с такой же процедурой, которая описана выше):</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT zscripting_control.

DATA: gv_rc TYPE char1.

DO 1000 TIMES.
  PERFORM test(ZTMP3) USING gv_rc.
  IF gv_rc = abap_true.
    MESSAGE 'Error' TYPE 'E'.
  ENDIF.
ENDDO.

WRITE 'Все в порядке'.</pre><p>Исходный код скрипта будет выглядеть следующим образом:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_debugger_script DEFINITION INHERITING FROM  cl_tpda_script_class_super  .
  PUBLIC SECTION.
    METHODS: prologue REDEFINITION,
             init     REDEFINITION,
             script   REDEFINITION,
             end      REDEFINITION.
  PRIVATE SECTION.
    DATA PROGRAM TYPE sy-repid.
ENDCLASS.                    "lcl_debugger_script DEFINITION

CLASS lcl_debugger_script IMPLEMENTATION.
  METHOD prologue.
    super-&gt;prologue( ).
  ENDMETHOD.                    "prologue

  METHOD init.
   DATA: l_dd03p_tab TYPE TABLE OF dd03p,
         l_key       TYPE abap_keydescr,
         l_fields    TYPE TABLE OF sval,
         l_field     TYPE sval,
         l_rc(1)     TYPE C.

    l_field-tabname   = 'TPDA_DYNP_SRC_INFO'.
    l_field-fieldname = 'PROGRAM'.
    l_field-fieldtext = 'Programm'(prg).
    l_field-VALUE     = SPACE.
    l_field-field_obl = abap_true.
    APPEND l_field TO l_fields.

    CALL FUNCTION 'POPUP_GET_VALUES'
      EXPORTING
        popup_title     = 'Укажите имя программы'(hd1)
      IMPORTING
        RETURNCODE      = l_rc
      TABLES
        FIELDS          = l_fields
      EXCEPTIONS
        error_in_fields = 1
        OTHERS          = 2.

    READ TABLE l_fields INTO l_field INDEX 1.
    PROGRAM = l_field-VALUE.

  ENDMETHOD.                    "init

  METHOD script.
    IF PROGRAM = abap_source-&gt;program( ).
       me-&gt;break( ).
    ENDIF.
  ENDMETHOD.                    "script

  METHOD end.
  ENDMETHOD.                    "end
ENDCLASS.                    "lcl_debugger_script IMPLEMENTATION</pre><p>После запуска скрипта, его остановка произойдет, как только мы изменим ABAP стек, вызвав процедуру из другой программы.</p>
<h3>Динамическое создание точек прерывания и наблюдения</h3>
<p>Допустим необходимо вызвать прерывание в момент, когда программа читает внутреннюю таблицу. Сделаем это используя встроенный механизм сканирования исходного кода. Исходный код программы:</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT zscripting_control.

DATA:
  gt_mara TYPE STANDARD TABLE OF mara WITH HEADER LINE.

SELECT matnr FROM mara INTO CORRESPONDING FIELDS OF TABLE gt_mara UP TO 10 ROWS.
DELETE gt_mara INDEX 5.
READ TABLE gt_mara INDEX 3.</pre><p>Исходный код скрипта для прерывания в момент чтения внутренней таблицы можно загрузить из стандартного подготовленного SAP скрипта &#8212; RSTPDA_SCRIPT_BP_READ_TAB. Его исходный код:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_debugger_script DEFINITION INHERITING FROM  cl_tpda_script_class_super  .

  PUBLIC SECTION.
    METHODS: prologue  REDEFINITION,
             init    REDEFINITION,
             script  REDEFINITION,
             end     REDEFINITION.
  PRIVATE SECTION.

    DATA range_it TYPE tpda_range_it.
ENDCLASS.                    "lcl_debugger_script DEFINITION

CLASS lcl_debugger_script IMPLEMENTATION.
  METHOD prologue.
*** generate abap_source (source handler for ABAP)
    super-&gt;prologue( ).
  ENDMETHOD.                    "prolog

  METHOD init.

    DATA l_cancel TYPE flag.

    CALL FUNCTION 'TPDA_SCRIPT_CALL_SEL_SCREEN'
      EXPORTING
        p_screen   = if_tpda_sel_screens=&gt;c_scr_itab
      IMPORTING
        p_range_it = range_it
        p_cancel   = l_cancel.

    IF l_cancel = abap_true.
      MESSAGE s144(tpda) .
      RAISE EXCEPTION TYPE cx_tpda_stop_scripting_request.
    ELSEIF range_it IS INITIAL.
      MESSAGE s144(tpda) .
      RAISE EXCEPTION TYPE cx_tpda_stop_scripting_request.
    ENDIF.

  ENDMETHOD.                    "init
  METHOD script.
    DATA:  l_itabs_it     TYPE         cl_tpda_script_scan_itab_read=&gt;TY_IT_TABLES,
           l_itab         LIKE LINE OF l_itabs_it,
           l_scan_object  TYPE REF TO  cl_tpda_script_scan_itab_read,
           l_curr_itab    TYPE         STRING.
    TRY.

        l_scan_object ?= cl_tpda_script_scan=&gt;scan(
            p_program     = abap_source-&gt;program( )
            p_include     = abap_source-&gt;include( )
            p_line        = abap_source-&gt;line( )
               ).

        l_itabs_it = l_scan_object-&gt;IT_TABLES( ).

        LOOP AT l_itabs_it INTO l_itab.
          IF l_itab IN range_it.
            me-&gt;break( ).
          ENDIF.
        ENDLOOP.

      CATCH cx_sy_move_cast_error.
        MESSAGE s049(tpda_script).
        me-&gt;break( ).
      CATCH cx_tpda_script_scan_macro.
        MESSAGE s048(tpda_script).
        me-&gt;break( ).
      CATCH cx_tpda_script_scan.
        MESSAGE s049(tpda_script).
        me-&gt;break( ).
      CATCH cx_tpda_varname .
        MESSAGE s049(tpda_script).
        me-&gt;break( ).
      CATCH cx_tpda_script_no_simple_type .
        MESSAGE s049(tpda_script).
        me-&gt;break( ).
      CATCH CX_ROOT.
        MESSAGE s049(tpda_script).
        me-&gt;break( ).
    ENDTRY.

  ENDMETHOD.                    "script

  METHOD end.
  ENDMETHOD.                    "end
ENDCLASS.                    "lcl_debugger_script IMPLEMENTATION</pre><p>Данный скрипт по умолчанию загружает точку остановки на моменте вызова READ TABLE для внутренних таблиц.</p>
<h3>Использование трассировок</h3>
<p>Как говорилось выше можно использовать разные виды трассировок. Следующий пример покажет, как использовать &#8212; Statement Trace. Задача: найти все вызовы проверки полномочий в стандартной транзакции – ME23N (во время запуска).</p>
<p>&nbsp;</p>
<ul>
<li>Заходим в SE93, указываем ME23n, жмем – отладку (Тест – отладка).</li>
<li>Переходим на вкладку скрипт, используя заранее подготовленный скрипт загрузим &#8212; RSTPDA_SCRIPT_STATEMENT_TRACE</li>
<li>В качестве триггера создадим точку на вызов &#8212; AUTHORITY-CHECK</li>
<li>Запускаем скрипт, жмем – Continue</li>
<li>После запуска транзакции (нас интересовал только запуск) в командной строке набираем /h и жмем F3 – вылетит отладчик в котором необходимо завершить работу скрипта – EXIT SCRIPT.</li>
<li>Запускаем транзакцию SAS (либо прямо в отладчике через закладку трассировок) – смотрим трассировку.</li>
</ul>
<p>В итоге получится что-то вроде:<br />
<span style="color: #808080; font-style: italic;"><a href="http://abap-blog.ru/wp-content/uploads/2012/05/src4.png"><img loading="lazy" class="alignnone size-full wp-image-854" title="src4" src="http://abap-blog.ru/wp-content/uploads/2012/05/src4.png" alt="" width="1203" height="740" srcset="https://abap-blog.ru/wp-content/uploads/2012/05/src4.png 1203w, https://abap-blog.ru/wp-content/uploads/2012/05/src4-300x184.png 300w, https://abap-blog.ru/wp-content/uploads/2012/05/src4-1024x629.png 1024w" sizes="(max-width: 1203px) 100vw, 1203px" /></a></span></p>
<h3>Добавление в журнал трассировок своих данных (User Specific Trace).</h3>
<p>Задача: есть таблица с данными ОЗМ необходимо в журнал затащить все записи, у которых БЕИ отличается от M3. В журнале должен быть номер материала и его ЕИ. Пример программы:</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT zscripting_control.

DATA:
  gt_mara TYPE STANDARD TABLE OF mara WITH HEADER LINE,
  p_dummy TYPE C.

FIELD-SYMBOLS: &lt;fs_mara_line&gt; TYPE mara.

SELECT * FROM mara INTO CORRESPONDING FIELDS OF TABLE gt_mara UP TO 10 ROWS.

LOOP AT gt_mara.
ENDLOOP.

WRITE 'TEST'.</pre><p></p>
<ol start="1">
<li>Создаем точку наблюдения для переменной gt_mara-meins &lt;&gt; ‘M3’</li>
<li style="display: inline !important;"></li>
<li>С помощью метода подкласса trace – add_custom_info добавляем свои данные.</li>
<li>Метод script будет иметь следующий вид:</li>
</ol>
<p></p><pre class="urvanov-syntax-highlighter-plain-tag">METHOD script.
    DATA: cust_matnr  TYPE tpda_var_value,
          cust_meins  TYPE tpda_var_value,
          trace_entry TYPE tpda_trace_custom.

    trace-&gt;add_event_info( ).

    cust_matnr = cl_tpda_script_data_descr=&gt;get_simple_value(
       p_var_name  = 'GT_MARA-MATNR' ).

    cust_meins = cl_tpda_script_data_descr=&gt;get_simple_value(
       p_var_name  = 'GT_MARA-MEINS' ).

    IF cust_meins &lt;&gt; 'M3'.
      trace_entry-VALUE = 'Материал:' &amp;&amp; SPACE &amp;&amp; cust_matnr &amp;&amp; ' ЕИ:' &amp;&amp; SPACE &amp;&amp; cust_meins.
      trace-&gt;add_custom_info( p_trace_entry = trace_entry ).
    ENDIF.
  ENDMETHOD.</pre><p>После этого если у вас были такие материалы, они отобразятся в трассировке:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2012/05/src5.png"><img loading="lazy" class="alignnone size-full wp-image-855" title="src5" src="http://abap-blog.ru/wp-content/uploads/2012/05/src5.png" alt="" width="467" height="342" srcset="https://abap-blog.ru/wp-content/uploads/2012/05/src5.png 467w, https://abap-blog.ru/wp-content/uploads/2012/05/src5-300x219.png 300w" sizes="(max-width: 467px) 100vw, 467px" /></a></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/vvedenie-v-debugger-scripting/">Введение в Debugger Scripting</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/vvedenie-v-debugger-scripting/feed/</wfw:commentRss>
			<slash:comments>4</slash:comments>
		
		
			</item>
	</channel>
</rss>
