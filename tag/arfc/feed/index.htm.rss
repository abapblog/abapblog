<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>aRFC | ABAP Blog</title>
	<atom:link href="https://abap-blog.ru/tag/arfc/feed/" rel="self" type="application/rss+xml" />
	<link>https://abap-blog.ru</link>
	<description>Все о разработке в решениях от SAP</description>
	<lastBuildDate>Tue, 02 Mar 2021 05:59:12 +0000</lastBuildDate>
	<language>ru-RU</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>
	<item>
		<title>Remote Function Call</title>
		<link>https://abap-blog.ru/network/remote-function-call/</link>
					<comments>https://abap-blog.ru/network/remote-function-call/#comments</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Mon, 19 Mar 2012 11:41:39 +0000</pubDate>
				<category><![CDATA[Сетевые технологии]]></category>
		<category><![CDATA[aRFC]]></category>
		<category><![CDATA[bapi]]></category>
		<category><![CDATA[bgRFC]]></category>
		<category><![CDATA[IN BACKGROUND TASK]]></category>
		<category><![CDATA[IN UPDATE TASK]]></category>
		<category><![CDATA[qRFC]]></category>
		<category><![CDATA[Remote Function Call]]></category>
		<category><![CDATA[RFC]]></category>
		<category><![CDATA[STARTING NEW TASK]]></category>
		<category><![CDATA[tRFC]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=621</guid>

					<description><![CDATA[<p>Remote Function Call (RFC, удалённый вызов функций) – стандартный интерфейс для обмена данными между SAP и не SAP системами. Интерфейс передачи данных основан на CPI-C или TCP/IP. Стандартная справка по теме RFC или курс BC415. Особенности RFC функций Когда вы вызываете ФМ локально, он работает в том же рабочем процессе что и вызывающая программа. Если вы [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/network/remote-function-call/">Remote Function Call</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Remote Function Call (RFC, удалённый вызов функций) – стандартный интерфейс для обмена данными между SAP и не SAP системами. Интерфейс передачи данных основан на CPI-C или TCP/IP. Стандартная <a href="http://help.sap.com/saphelp_nw70/helpdata/en/6f/1bd5b6a85b11d6b28500508b5d5211/frameset.htm" target="_blank" rel="noopener">справка по теме RFC</a> или курс BC415.</p>
<p><span id="more-621"></span></p>
<h3>Особенности RFC функций</h3>
<ul>
<li>Когда вы вызываете ФМ локально, он работает в том же рабочем процессе что и вызывающая программа. Если вы вызываете ФМ удаленно, он запускается в отдельном рабочем процессе (ЛЕР – LUW, логическая единица работы) если удаленная система является R/3 системой.</li>
<li>В качестве удаленной системы могут быть R/3 система, R/2 система или другая внешняя не SAP система, для не SAP систем существует специальная RFC-SDK библиотека, с помощью которой может быть реализован клиент-сервер для RFC.</li>
<li>При вызове RFC модуля, в программе его вызывающий срабатывает неявный DB Commit (исключение tRFC, qRFC, bgRFC). Поэтому вызовы RFC не должны находиться между OpenSQL операторами.</li>
<li>В интерфейсе ФМ RFC необходимо явно определять тип для каждого параметра, ссылки (LIKE) запрещены.</li>
</ul>
<p>Настроить назначение для RFC вызова можно через транзакцию SM59 (Таблица RFCDES). Подробнее о настройке RFC соединений можно посмотреть в курсе BC415.</p>
<h3>Назначение RFC вызовов</h3>
<p>Назначение RFC вызова определяется с помощью ключевого слова DESTINATION. В качестве параметра может принимать имя удаленной системы, SPACE, NONE, BACK.</p>
<ul>
<li>SPACE – локальный вызов ФМ (по умолчанию). В случае если не указать DESTINATION в параметрах вызова RFC, функция будет выполнена локально, как обычная без создания своего LUW.</li>
</ul>
<ul>
<li>NONE – Запуск происходит так же локально, основное отличие в том, что вызов доходит до указанного в настройках шлюза и регистрируется в качестве удаленного вызова. Создается свой DB LUW.</li>
<li>BACK – используется внутри синхронных RFC функций, для запуска RFC функций в той системе которая их вызвала.</li>
</ul>
<p><strong> </strong><strong> </strong></p>
<h3>Обработка исключений при вызовах RFC</h3>
<p>При вызове RFC модуля могут возникать следующие исключения:</p>
<ul>
<li>COMMUNICATION_FAILURE – возникает в том случае, когда не настроено соединение для указанной системы в поле DESTINATION, либо когда соединение не могло быть установлено.</li>
<li>SYSTEM_FAILURE – возникает в случае, если на удаленной системе не существует вызываемого модуля, либо в случае других неполадок в RFC вызовах.</li>
<li>RESOURCE_FAILURE – возникает при вызове асинхронных RFC, в случае если нет свободных ресурсов на сервере приложений группы.</li>
</ul>
<div></div>
<h3>Типы RFC функций:</h3>
<ol start="1">
<li><strong>Синхронные </strong><strong>RFC (</strong><strong>sRFC)</strong> – при вызове sRFC рабочий процесс приостанавливает свою работу, до тех пор, пока не будет выполнен sRFC модуль. Модуль выполняется в отдельном DB LUW.</li>
</ol>
<p>В случае, когда вы вызываете несколько sRFC <strong>подряд</strong> из одной группы функций, глобальные данные группы функций будут доступны до тех пор, пока не будет вызвана последняя функция из данной группы.</p>
<p>Если в sRFC внутри себя вызывает CALL SCREEN, CALL TRANSACTION или отображение списка, вызываемые экраны будут отображены в программе запустившей sRFC, но только если в SM59 указан диалоговый удаленный доступ, иначе система выдаст исключение SYSTEM_FAILURE.</p>
<ol start="2">
<li><strong>Асинхронные </strong><strong>RFC вызовы (</strong><strong>aRFC)</strong> – удаленная функция начинает работать параллельно сразу после её вызова, при этом рабочий процесс не приостанавливает свою работу. Асинхронный вызов срабатывает при вызове ФМ с ключевыми словами: STARTING NEW TASK &lt;ИмяЗадачи&gt;. Модуль выполняется в отдельном DB LUW. aRFC можно так же использовать в фоновом выполнении.</li>
</ol>
<p>Для получения результатов работы aRFC необходимо при вызове указать на процедуру обработки результатов, задается она с помощью ключевого слова: <strong>PERFORMING</strong> &lt;ИмяПроцедуры&gt; <strong>ON END OF TASK</strong>. Процедура в качестве первого параметра должна содержать переменную, в которую будет записано имя задачи (имя данной переменной не имеет значения). Для получения данных из aRFC, внутри данной процедуры, используется <strong>обязательная </strong>команда (если ее не задать в процедуре, система выдаст исключение &#8212; COMMUNICATION_FAILURE): <strong>RECEIVE RESULTS FROM FUNCTION</strong> &lt;ИмяARFC&gt;, c параметрами IMPORTING, TABLES, EXCEPTIONS которые будут переданы из aRFC.</p>
<p>Процедура не должна иметь в своем теле операторы, прерывающие выполнение программы, такие как: CALL SCREEN, SUBMIT, COMMIT WORK, WAIT, RFC вызовы, сообщения с типами W и I.</p>
<p>Для ожидания выполнения aRFC вызовов существует ключевое слово WAIT UNTIL &lt;Условие&gt;. Если после вызова aRFC условие выполняется, программа сразу же начинает свое выполнение после WAIT UNTIL. В случае если не выполняется, программа снова проверяет условие. Данный процесс повторяется до тех пор, пока условие не будет выполнено или не будут выполнены все aRFC вызовы.</p>
<p>Пример программы запускающей 2 aRFC функции и ожидающей выполнение обоих:</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT zaRFC_demo.

DATA:
  lv_flag1, lv_flag2.

CALL FUNCTION 'Z_PAR_TEST'
  STARTING NEW TASK 'TASK1'
  PERFORMING receive_results_from_rfc ON END OF TASK
  EXPORTING
    COUNT           = 2.

CALL FUNCTION 'Z_PAR_TEST'
  STARTING NEW TASK 'TASK2'
  PERFORMING receive_results_from_rfc ON END OF TASK
  EXPORTING
    COUNT           = 2.

WAIT UNTIL lv_flag1 = abap_true AND lv_flag2 = abap_true.
IF sy-subrc = 0.
  WRITE 'Все aRFC выполнены успешно'.
ELSE.
  WRITE 'Все aRFC закончены, однако условие не выполнено'.
ENDIF.

FORM receive_results_from_rfc USING taskname.
  CASE taskname.
    WHEN 'TASK1'. lv_flag1 = abap_true.
    WHEN 'TASK2'. lv_flag2 = abap_true.
  ENDCASE.
  " Обязательно необходимо вызвать получение результата работы aRFC
  RECEIVE RESULTS FROM FUNCTION 'Z_PAR_TEST'.
ENDFORM.
FUNCTION Z_PAR_TEST.
*"----------------------------------------------------------------------
*"*"Локальный интерфейс:
*" IMPORTING
*" VALUE(COUNT) TYPE I
*" EXPORTING
*" VALUE(INDEX) TYPE I
*"----------------------------------------------------------------------

  DATA: tmp TYPE float.

  DO 5000000 TIMES.
    tmp = tmp * 2.  " Умножение 0 на 2 очень длительная операция ;)
  ENDDO.

  INDEX = tmp.

ENDFUNCTION.</pre><p>Если в качестве имени задачи в вызове aRFC указать TASK3, условия выполнены не будут.</p>
<p>aRFC вызовы могут вызываться в одной SAP системе, но на разных серверах приложений, тем самым распределяя нагрузку между ними. Для распределения aRFC вызовов между серверами приложений служат так называемые RFC группы (тр. SM59). Для определения в какой именно группе вызывать aRFC служит ключевое слово – <strong>DESTINATION IN GROUP</strong> &lt;ИмяГруппы&gt;.  Если в качестве имени группы указать DEFAULT, вызов будет происходить на любой из определенных групп, в зависимости от их загруженности, если все группы будут заняты, система выдаст исключение – RESOURCE_FAILURE.</p>
<p><a href="http://help.sap.com/saphelp_nwpi71/helpdata/en/fa/096e92543b11d1898e0000e8322d00/frameset.htm" target="_blank" rel="noopener">SAP Help на тему распараллеливания.</a></p>
<p>Пример распараллеливания вычислений с помощью групп:</p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT  ztst_call_async_rfc.

PARAMETERS: p_para TYPE char1 DEFAULT 'X' AS CHECKBOX.

TYPES: BEGIN OF t_tasklist,
         taskname(4) TYPE C,        " Задача
         RESULT      TYPE char50,   " Статус обработки
      END OF t_tasklist.

DATA:
      lv_calls TYPE I VALUE 10,               " Количество запусков функции
      lv_max_tasks TYPE I,                    " Переменная для хранения максимального числа задач
      lv_free_tasks TYPE I,                   " Переменная для хранения числа свободных задач
      lv_number_of_tasks_in_use TYPE I,       " Количество задач в работе
      lv_started_rfc_calls TYPE I VALUE 0,    " Кол-во запущенных задач
      lv_finished_rfc_calls TYPE I VALUE 0,   " Кол-во завершенных задач
      lv_exception_flag(1) TYPE C,            " Флаг ошибки запуска задачи из-за нехватки ресурсов
      lv_taskname(4) TYPE N VALUE '0001',     " Имя задачи
      lt_tasklist TYPE TABLE OF t_tasklist.   " Журнал обработки RFC вызовов.

DATA: " Для обработки времени работы
      lv_start_time TYPE timestampl,
      lv_end_time   TYPE timestampl,
      lv_diff       TYPE timestampl.

FIELD-SYMBOLS: &lt;fs_tasklist&gt; TYPE t_tasklist.

START-OF-SELECTION.
  IF p_para EQ 'X'.
    GET TIME STAMP FIELD lv_start_time.
* Получение максимального числа задач и кол-во свободных для использования задач.
    CALL FUNCTION 'SPBT_INITIALIZE'
      EXPORTING
        group_name                     = ''
      IMPORTING
        max_pbt_wps                    = lv_max_tasks
        free_pbt_wps                   = lv_free_tasks
      EXCEPTIONS
        invalid_group_name             = 1
        internal_error                 = 2
        pbt_env_already_initialized    = 3
        currently_no_resources_avail   = 4
        no_pbt_resources_found         = 5
        cant_init_different_pbt_groups = 6
        OTHERS                         = 7.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ELSE.
      WRITE : / 'Макисмальное число задач для выполнения параллельно обработки: ', 80 lv_max_tasks RIGHT-JUSTIFIED.
      WRITE : / 'Доступное кол-во задач: ', 50 lv_free_tasks RIGHT-JUSTIFIED.
      ULINE.

      DO lv_calls TIMES.
        PERFORM call_rfc. " Запуск RFC задачи
        " call_rfc - запускает на выполнение RFC функцию в отдельном задаче (асинхронно),
        " в случае если нет свободных задач, или произошла ошибка выделения задачи,
        " ожидает пока не завершаться предыдущие задачи, после завершения продолжает данный цикл.
      ENDDO.
      " Последняя задержка пока не отработают все "последние" задачи.
      WAIT UNTIL lv_finished_rfc_calls = lv_calls.

      SKIP 2.
      WRITE : / 'Журнал работы RFC функций:'.
      ULINE.
      LOOP AT lt_tasklist ASSIGNING &lt;fs_tasklist&gt;.
        WRITE : / &lt;fs_tasklist&gt;-taskname,
                  &lt;fs_tasklist&gt;-RESULT.
      ENDLOOP.

      SKIP.
      GET TIME STAMP FIELD lv_end_time.
      lv_diff = lv_end_time - lv_start_time.
      WRITE: /(50) 'Время работы', lv_diff.
    ENDIF.
  ELSE.
    GET TIME STAMP FIELD lv_start_time.
    " Запуск функции в последовательной обработке
    DO lv_calls TIMES.
      CALL FUNCTION 'Z_PAR_TEST'
        EXPORTING
          COUNT  = 2
        EXCEPTIONS
          OTHERS = 99.
    ENDDO.
    GET TIME STAMP FIELD lv_end_time.
    lv_diff = lv_end_time - lv_start_time.
    WRITE: /(50) 'Время работы', lv_diff.

  ENDIF.

*&amp;---------------------------------------------------------------------*
*&amp; Form call_rfc
*&amp;---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
FORM call_rfc.

  ADD 1 TO lv_number_of_tasks_in_use.

* Внимание: количество свободных задач для параллельной обработки делится между всеми
* пользователями, крайне не желательно использовать все (lv_free_tasks) для расчётов,
* их количество настраивается в тр. RZ12. В случае если все свободные задачи заняты кем
* то, программа выдаст сообщение об ошибке (Нехватке ресурсов ПФЗ), после вызова SPBT_INITIALIZE

  " Если количество процессов в работе будет превышать кол-во свободных задач,
  " остановим программу на ожидание освобождения задач.
  IF lv_number_of_tasks_in_use &gt; lv_free_tasks.
    WRITE : / 'Ожидаем пока завершатся предыдущие задачи'.
    WAIT UNTIL lv_number_of_tasks_in_use &lt; lv_free_tasks.
  ENDIF.
  CALL FUNCTION 'Z_PAR_TEST'
    STARTING NEW TASK lv_taskname
    "DESTINATION IN GROUP DEFAULT
    PERFORMING receive_results_from_rfc ON END OF TASK
    EXPORTING
      COUNT           = 2
* Так как используется асинхронный вызов RFC параметры импорта здесь не указываются,
* результат работы будет получаен в форме receive...
    EXCEPTIONS
      communication_failure = 1
      system_failure        = 2
      resource_failure      = 3.

* Чтобы узнать на каком сервере приложений будет запущена задача, необходимо сразу после запуска
* воспользоваться ФМ - SPBT_GET_PP_DESTINATION
* Чтобы исключить выполнение задачи на полученном сервере приложений используется ФМ: SPBT_DO_NOT_USE_SERVER
*
* Администрирование групп параллельной обработки выполняется через транзакцию - RZ12
* Мануал по этому делу тут: http://help.sap.com/saphelp_nw04/helpdata/en/fa/096e92543b11d1898e0000e8322d00/frameset.htm
* Пример обработки:
** 1 - system crash occured on the receiving side
** 2 - connection or communication problem with RFC-Destination
* CALL FUNCTION 'SPBT_GET_PP_DESTINATION'
* IMPORTING rfcdest = lf_rfcdest.
*
* CALL FUNCTION 'SPBT_DO_NOT_USE_SERVER'
* EXPORTING server_name = lf_server
* EXCEPTIONS
* invalid_server_name = 1
* no_more_resources_left = 2
* pbt_env_not_initialized_yet = 3
* OTHERS = 4.
* IF sy-subrc &lt;&gt; 0.
* cf_task_failure = chars. "e-message -&gt; missing log
* EXIT.
* ENDIF.

  CASE sy-subrc.

    WHEN 0.
      WRITE : / 'Запущена новая задача с именем: ', lv_taskname.

      APPEND INITIAL LINE TO lt_tasklist ASSIGNING &lt;fs_tasklist&gt;.
      &lt;fs_tasklist&gt;-taskname = lv_taskname.

      lv_started_rfc_calls = lv_started_rfc_calls + 1.
      ADD 1 TO lv_taskname.

    WHEN 1 OR 2.           "Communications failure
* Означает что сервер приложений не доступен; нет необходимости обрабатывать данное исключение,
    WHEN 3.                " Нет свободных задач, ожидаем.
      IF lv_exception_flag = SPACE.
        lv_exception_flag = 'X'.
        WRITE : / 'Нет доступных задач ждем пока освободятся...'.
        WAIT UNTIL lv_finished_rfc_calls &gt;= lv_started_rfc_calls.
      ELSE.
        WRITE : / 'Повторное ожидание освобождения задач...'.
        WAIT UNTIL lv_finished_rfc_calls &gt;= lv_started_rfc_calls.

        IF sy-subrc = 0.   " Ожидание было успешным
          CLEAR lv_exception_flag.
        ELSE.              " Ожидание прервано, сбой в RFC вызове, прерывание обработки
          WRITE : / 'RFC вызов прерван'.
          EXIT.
        ENDIF.
      ENDIF.
  ENDCASE.

ENDFORM.                    "call_rfc

*&amp;---------------------------------------------------------------------*
*&amp; Form receive_results_from_rfc
*&amp;---------------------------------------------------------------------*
* text
*----------------------------------------------------------------------*
* --&gt;VALUE(P_TASKNAME) text
*----------------------------------------------------------------------*
FORM receive_results_from_rfc USING VALUE(p_taskname).
  lv_number_of_tasks_in_use = lv_number_of_tasks_in_use - 1.

* Обновить статус задачи
  READ TABLE lt_tasklist WITH KEY taskname = p_taskname ASSIGNING &lt;fs_tasklist&gt;.
  IF sy-subrc = 0.
    &lt;fs_tasklist&gt;-RESULT = 'Задача успешно завершена'.
  ELSE.
    READ TABLE lt_tasklist WITH KEY taskname = lv_taskname ASSIGNING &lt;fs_tasklist&gt;.
    IF sy-subrc = 0.
      &lt;fs_tasklist&gt;-RESULT = 'Ошибка в обработке задачи'.
    ENDIF.
  ENDIF.

* Получение результатов обработки функции, в данном случае ничего не получаем
  RECEIVE RESULTS FROM FUNCTION 'Z_PAR_TEST'.

  lv_finished_rfc_calls = lv_finished_rfc_calls + 1.
ENDFORM.                    "RECEIVE_RESULTS_FROM_RFC</pre><p>aRFC вызовы так же как и sRFC могут вызывать внутри себя диалоги, но их использование в данном контексте выглядит сомнительно, более подробно рассмотрено в курсе (BC415).</p>
<ol start="1">
<li><strong>Транзакционные </strong><strong>RFC (</strong><strong>tRFC)</strong> – асинхронные и синхронные вызовы RFC отрабатывают каждый в своем DB LUW (ЛЕР), транзакционные RFC срабатывают в одном DB LUW, тем самым позволяют группировать их вызовы с возможностью отката в случае ошибок в одном из tRFC вызове. Запуск tRFC осуществляется с помощью ключевого слова IN BACKGROUND TASK. Программа, запустившая tRFC, не приостанавливает свою работу, вызов tRFC происходит тогда, когда программа вызовет COMMIT WORK. В момент вызова tRFC не происходит вызова неявного DB COMMIT. tRFC, так же как и aRFC вызываются асинхронно, однако получить результат работы этих функций как в aRFC невозможно. Для просмотра созданных tRFC-LUW служит транзакция SM58.</li>
</ol>
<p>Все tRFC вызовы сохраняются в таблицах: ARFCSSTATE и ARFCSDATA. Если вы не хотите вызывать tRFC немедленно после COMMIT WORK, вы можете вызвать ФМ START_OF_BACKGROUNDTASK (<strong>до </strong><strong>COMMIT</strong><strong>WORK</strong>) и задать время и дату запуска для накопленных tRFC вызовов.</p>
<p>После выполнения COMMIT WORK в случае успешного локального обновления (в рамках LUW основной программы),  накопленные данные создают фоновую задачу, в случае успешного выполнения этой задачи все данные из таблиц tRFC удаляются. Если задача не была выполнена, срабатывает механизм повтора или отката.</p>
<p>Так, например если связь с удаленной системой не была установлена, срабатывает автоматический повтор выполнения задания. По умолчанию количество повторов равно 30, интервал ожидания равен 15 минутам.</p>
<p>В случае если во втором из двух tRFC вызовов произошел сбой, сообщение с типом A или X или вызов исключения через RAISE после успешного выполнения первого происходит следующее:</p>
<ul>
<li>Все изменения сделанные в текущем LUW (а он один на все tRFC) откатываются</li>
<li>Происходит запись в журнал вызова tRFC (тр. SM58)</li>
</ul>
<p>Для принудительного отката всех изменений или отмены tRFC-LUW служит ФМ &#8212; RESTART_OF_BACKGROUNDTASK.</p>
<p>В случае если вызовы tRFC происходят на разных системах (DESTINATION ‘A’, DESTIONATION ‘B’), для каждой из них создается свой tRFC-LUW, вызовы tRFC группируются в зависимости от назначения.</p>
<p>Для вызова tRFC отдельно от остальных можно воспользоваться ключевым словом: AS SEPARATE UNIT.</p>
<p>Каждый tRFC-LUW имеет свой уникальный ID, для его получения можно использовать ФМ: ID_OF_BACKGROUNDTASK (вызывать перед COMMIT WORK). Используя данный ID можно определить статус для tRFC-LUW через ФМ &#8212; STATUS_OF_BACKGROUNDTASK.</p>
<ol start="2">
<li><strong>qRFC – </strong><strong>RFC функции выполняемые в порядке очереди.</strong> При использовании tRFC мы не можем контролировать порядок запуска tRFC модулей, другими словами порядок их вызова может не соответствовать порядку их запуска. qRFC в отличие от tRFC, позволяют нам контролировать порядок их запуска.</li>
</ol>
<p>Для размещения tRFC вызовов в порядке FIFO (первый пришел, первый вышел) необходимо перед каждым tRFC вызовом указывать имя очереди, делается это с помощью ФМ: TRFC_SET_QUEUE_NAME:</p><pre class="urvanov-syntax-highlighter-plain-tag">CALL FUNCTION 'TRFC_SET_QUEUE_NAME' EXPORTING  qname = 'Q1'.
CALL FUNCTION 'A1' IN BACKGROUND TASK.

CALL FUNCTION 'TRFC_SET_QUEUE_NAME' EXPORTING  qname = 'Q1'.
CALL FUNCTION 'A2' IN BACKGROUND TASK.

COMMIT WORK.

CALL FUNCTION 'TRFC_SET_QUEUE_NAME' EXPORTING  qname = 'Q1'.
CALL FUNCTION 'B1' IN BACKGROUND TASK.

CALL FUNCTION 'TRFC_SET_QUEUE_NAME' EXPORTING  qname = 'Q1'.
CALL FUNCTION 'B2' IN BACKGROUND TASK.</pre><p>Имя очереди может содержать 24 символа, исключая % и *.</p>
<p>Для администрирования qRFC вместо транзакции SM58 используется транзакция &#8212; SMQ1. Таблица, в которой хранятся данные qRFC &#8212; TRFCQOUT.</p>
<ol start="1">
<li><strong>Фоновые </strong><strong>RFC</strong><strong> (</strong><strong>bgRFC</strong><strong>). </strong>SAP рекомендует использовать их вместо tRFC и qRFC для лучшей производительности. bgRFC, в отличие от tRFC и qRFC, позволяют приложениям записывать данные полученные позже от вызванных программ. Кроме того можно организовывать зависимые последовательности вызовов, так например вызов создающий входящую поставку будет выполнен только после выполнения вызова создающего закупочный заказ. bgRFC вызываются с помощью ключевого слова IN BACKGROUND UNIT &lt;oref&gt;, где &lt;oref&gt; &#8212; ссылка на класс реализующий интерфейс IF_BGRFC_UNIT.</li>
</ol>
<p>Более подробная информация о bgRFC находится <a href="http://help.sap.com/saphelp_nw73ehp1/helpdata/EN/48/927c2caa6b17cee10000000a421937/frameset.htm" target="_blank" rel="noopener">тут</a>.</p>
<h3>Транзакции, используемые при работе с RFC</h3>
<ul>
<li>ST22 – просмотр дампов, вызываемых RFC</li>
<li>SMGW – монитор шлюза RFC подключений</li>
<li>Журналы работы: на стороне вызовов – ST05, на стороне вызываемой системы SM59, на стороне шлюза – SMGW</li>
</ul>
<h3>BAPI функции</h3>
<p>Для обмена бизнес данными, между SAP и не SAP системами, был создан так называемый Business Framework. Центральной его частью является хранилище бизнес объектов (BOR – Business Object Repository). Каждый бизнес объект обеспечивает объектно-ориентированный подход к хранению бизнес данных и работы с бизнес процессами. Например, вызывая методы бизнес объектов, мы тем самым манипулируем бизнес данными, за которые он отвечает, не заботясь о техническом вопросе (связях в таблицах и т.п.)</p>
<p>Бизнес объект состоит из следующих частей:</p>
<ul>
<li>Технические данные – внутренний номер, номер релиза SAP системы, с которой он доступен и т.п.</li>
<li>Список интерфейсов, которые поддерживает объект – интерфейс определяет поведенческую структуру объекта</li>
<li>Ключевые поля – атрибуты, которые однозначно идентифицируют объект. (Номер закупочного заказа)</li>
<li>Атрибуты – могут быть как поля из базы данных, так и рассчитываемые во время работы с объектом (виртуальные), ссылки на другие объекты (Бизнес объект «Заказ на закупку» например, может иметь ссылки на объекты входящих поставок)</li>
<li>Методы – представляют собой вызовы R/3 транзакций, функциональных модулей или другого ABAP кода. BAPI как раз и представляют собой реализацию методов бизнес объектов.</li>
<li>События – используются в основном в Workflow. Например, сделать рассылку поставщикам при создании закупочного заказа.</li>
</ul>
<p>BAPI – реализация метода бизнес объекта, представляет собой функциональный модуль RFC. BAPI могут вызываться как синхронно (COMMIT WORK <strong>AND </strong><strong>WAIT</strong>), так и асинхронно т.е. ожидая выполнения работы функции или нет.</p>
<p>BAPI могут представлять различные действия над объектом:</p>
<ul>
<li>Создание объекта</li>
<li>Запрос атрибутов объекта</li>
<li>Изменение атрибутов объекта</li>
</ul>
<p>BAPI могут вызываться из различных приложений: офисных приложений (через VBA), JAVA и С++ программ и т.п.</p>
<p>Все BAPI после своей работы возвращают результат в виде внутренней таблицы с одной из структур: BAPIRETURN, BAPIRETURN1, BAPIRET1, BAPIRET2, BAPIRET1_FIX. В связи с этим в BAPI нет обработки исключений как в стандартных ФМ. Все эти структуры содержат в себе следующие поля:</p>
<ul>
<li>TYPE – тип сообщения: S(uccess), E(rror), W(arning), I(nformation)</li>
<li>ID (класс сообщений)</li>
<li>NUMBER (номер сообщения в классе)</li>
<li>MESSAGE (текст сообщения)</li>
<li>MESSAGE_V1, MESSAGE_V2, MESSAGE_V3, MESSAGE_V4 (переменные сообщений)</li>
</ul>
<p>Если транзакция выполнена успешно, то в таблице RETURN не будет существовать записей с типом ошибки «Е». Должно присутствовать сообщение с типом ошибки «S».</p>
<p>Обновление в BAPI всегда происходит в IN UPDATE TASK (см. документацию по ключевому слову IN UPDATE TASK или курс по обновлению БД – BC414). Внутри BAPI никогда не вызывается COMMIT WORK. Для подтверждения или отката LUW всегда должны использоваться ФМ: BAPI_TRANSCATION_COMMIT, BAPI_TRANSACTION_ROLLBACK, разница между данными ФМ и COMMIT WORK (ROLLBACK WORK) в том что они чистят внутренние переменные используемые при вызовах BAPI, если этого не делать могут возникать проблемы при повторном вызове BAPI. Все BAPI вызванные в программе до вызова BAPI_TRANSCATION_COMMIT (BAPI_TRANSCATION_ROLLBACK) вызываются в одном LUW. Для просмотра всех имеющихся в системе BAPI служит транзакция BAPI (запускает BAPI EXPLORER).</p>
<p>Курс, в котором рассматривается создание собственных BAPI &#8212; BC417.</p><p>The post <a href="https://abap-blog.ru/network/remote-function-call/">Remote Function Call</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/network/remote-function-call/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
	</channel>
</rss>
