<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>UML | ABAP Blog</title>
	<atom:link href="https://abap-blog.ru/tag/uml/feed/" rel="self" type="application/rss+xml" />
	<link>https://abap-blog.ru</link>
	<description>Все о разработке в решениях от SAP</description>
	<lastBuildDate>Tue, 02 Mar 2021 06:10:38 +0000</lastBuildDate>
	<language>ru-RU</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>
	<item>
		<title>Диаграмма классов UML</title>
		<link>https://abap-blog.ru/osnovy-abap/diagramma-klassov-uml/</link>
					<comments>https://abap-blog.ru/osnovy-abap/diagramma-klassov-uml/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Mon, 12 May 2014 15:06:23 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[abap objects]]></category>
		<category><![CDATA[UML]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=1950</guid>

					<description><![CDATA[<p>При моделировании какой-либо системы, построенной с помощью ООП, широко используется унифицированный язык моделирования UML. Взаимосвязи между классами в такой системе принято отображать в виде диаграммы классов. В данной статье рассмотрены основные взаимосвязи между классами и как они отражаются в ABAP коде. Взаимосвязь — это особый тип логических отношений между сущностями, показанных на диаграммах классов и объектов. Существуют следующие виды [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/diagramma-klassov-uml/">Диаграмма классов UML</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>При моделировании какой-либо системы, построенной с помощью ООП, широко используется унифицированный язык моделирования <a href="http://ru.wikipedia.org/wiki/UML">UML</a>. Взаимосвязи между классами в такой системе принято отображать в виде диаграммы классов. В данной статье рассмотрены основные взаимосвязи между классами и как они отражаются в ABAP коде.</p>
<p>Взаимосвязь — это особый тип логических отношений между сущностями, показанных на диаграммах классов и объектов.</p>
<p>Существуют следующие виды взаимосвязей:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/relations1.png"><img loading="lazy" class="size-full wp-image-1959 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/relations1.png" alt="relations" width="673" height="473" srcset="https://abap-blog.ru/wp-content/uploads/2014/05/relations1.png 673w, https://abap-blog.ru/wp-content/uploads/2014/05/relations1-300x210.png 300w" sizes="(max-width: 673px) 100vw, 673px" /></a></p>
<p><span id="more-1950"></span></p>
<h2>1. Обобщения</h2>
<p>Отношение обобщения — это наследование. Диаграмма с отношением обобщения выглядит как показано на рисунке:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/Обобщение.png"><img loading="lazy" class="size-full wp-image-1961 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/Обобщение.png" alt="Обобщение" width="143" height="272" /></a></p>
<p>Класс lcl_person является более общим классом, от которого наследуется класс lcl_student, таким образом наследование отображается с помощью не закрашенного ромбика следующего от наследника.</p>
<p>В UML классы обозначаются в виде прямоугольников. В верхней части прямоугольника указано имя класса (для абстрактных классов и методов, имя обозначается курсивом), в средней атрибуты, в нижней его методы.</p>
<p>Для наглядности атрибуты и методы классов помечены квантором видимости, который может принимать следующие значения:</p>
<ul>
<li>«+» &#8212; общедоступный атрибут, метод. В описании ABAP класса, находится в области PUBLIC SECTION.</li>
<li>«-» &#8212; атрибут, метод с закрытой областью видимости. В описании ABAP класса, находится в области PRIVATE SECTION.</li>
<li>«#» &#8212; атрибут, метод с защищенной областью видимости. В описании ABAP класса, находится в области PROTECTED SECTION.</li>
</ul>
<p>Код для этой диаграммы:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_person DEFINITION.
  PUBLIC SECTION.
    METHODS:
      get_name RETURNING value(rv_name) TYPE string,
      set_name IMPORTING iv_name TYPE string.
  PRIVATE SECTION.
    DATA:
      gv_name TYPE string.
ENDCLASS.

CLASS lcl_person IMPLEMENTATION.
  METHOD get_name.
    rv_name = me-&gt;gv_name.
  ENDMETHOD.

  METHOD set_name.
    me-&gt;gv_name = iv_name.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_student DEFINITION INHERITING FROM lcl_person FINAL.
  PUBLIC SECTION.
    METHODS:
      get_class RETURNING value(rv_class) TYPE string,
      set_class IMPORTING iv_class TYPE string.
  PRIVATE SECTION.
    DATA:
      gv_class TYPE string.
ENDCLASS.

CLASS lcl_student IMPLEMENTATION.
  METHOD get_class.
    rv_class = me-&gt;gv_class.
  ENDMETHOD.

  METHOD set_class.
    me-&gt;gv_class = iv_class.
  ENDMETHOD.
ENDCLASS.</pre><p></p>
<h2>2. Ассоциации</h2>
<p>Ассоциации показывают, что объекты одной сущности связаны с объектами другой сущности. Если между двумя классами определена ассоциация, то можно перемещаться от объектов одного класса к объектам другого. Вполне допустимы случаи, когда оба конца ассоциации относятся к одному и тому же классу. Это означает, что с объектом некоторого класса позволительно связать другие объекты из того же класса.</p>
<h4>2.1. Бинарная и N-арная ассоциация</h4>
<p>Ассоциация, связывающая два класса, называется бинарной. Можно, хотя это редко бывает необходимым, создавать ассоциации, связывающие сразу несколько классов; они называются n-арными. Графически ассоциация изображается в виде линии (со стрелкой или без неё), соединяющей класс сам с собой или с другими классами.</p>
<p>Часто при моделировании бывает важно указать, сколько объектов может быть связано посредством одного экземпляра ассоциации. Это число называется кратностью (Multiplicity) роли ассоциации и записывается либо как выражение, значением которого является диапазон значений, либо в явном виде. Указывая кратность на одном конце ассоциации, вы тем самым говорите, что на этом конце именно столько объектов должно соответствовать каждому объекту на противоположном конце. Кратность можно задать равной единице (1), можно указать диапазон: &#171;ноль или единица&#187; (0..1), &#171;много&#187; (0..*), &#171;единица или больше&#187; (1..*). Разрешается также указывать определенное число (например, 3). С помощью списка можно задать и более сложные кратности, например 0 . . 1, 3..4, 6..*, что означает &#171;любое число объектов, кроме 2 и 5&#187;.</p>
<p>Пример бинарной ассоциации. Предположим, что у студента должен быть пропуск, пропуск обычно имеется только в одном экземпляре. Графически взаимосвязь будет выглядеть так:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/бинарная-ассоциация.png"><img loading="lazy" class="size-full wp-image-1962 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/бинарная-ассоциация.png" alt="бинарная ассоциация" width="464" height="106" srcset="https://abap-blog.ru/wp-content/uploads/2014/05/бинарная-ассоциация.png 464w, https://abap-blog.ru/wp-content/uploads/2014/05/бинарная-ассоциация-300x68.png 300w" sizes="(max-width: 464px) 100vw, 464px" /></a></p>
<p>Код диаграммы:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_pass DEFINITION.
  PUBLIC SECTION.
    METHODS:
      get_id RETURNING value(rv_id) TYPE string.
  PRIVATE SECTION.
    DATA:
      gv_id TYPE string.
ENDCLASS.

CLASS lcl_pass IMPLEMENTATION.
  METHOD get_id.
    rv_id = me-&gt;gv_id.
  ENDMETHOD.
ENDCLASS.

CLASS lcl_student DEFINITION INHERITING FROM lcl_person FINAL.
  PUBLIC SECTION.
    METHODS:
      get_class RETURNING value(rv_class) TYPE string,
      set_class IMPORTING iv_class TYPE string,
      get_pass RETURNING value(ro_pass) TYPE REF TO lcl_pass,
      set_pass IMPORTING io_pass TYPE REF TO lcl_pass.
  PRIVATE SECTION.
    DATA:
      gv_class TYPE string,
      go_pass  TYPE REF TO lcl_pass.
ENDCLASS.

CLASS lcl_student IMPLEMENTATION.
  METHOD get_class.
    rv_class = me-&gt;gv_class.
  ENDMETHOD.

  METHOD set_class.
    me-&gt;gv_class = iv_class.
  ENDMETHOD.

  METHOD get_pass.
    ro_pass = me-&gt;go_pass.
  ENDMETHOD.

  METHOD set_pass.
    CHECK io_pass IS BOUND.
    me-&gt;go_pass = io_pass.
  ENDMETHOD.
ENDCLASS.</pre><p>Класс lcl_student имеет поле go_pass, в котором содержится ссылка на объект класса lcl_pass, с помощью метода get_pass мы можем получить этот объект, соответственно взаимосвязь идет от lcl_student к  lcl_pass (направление стрелки).</p>
<h4>2.2 Агрегации</h4>
<p>Ранее рассмотренная простая ассоциация между двумя классами отражает структурное отношение между равноправными сущностями, когда оба класса находятся на одном концептуальном уровне и ни один не является более важным, чем другой.</p>
<p>Специальной формой или частным случаем отношения ассоциации является отношение агрегации, которое, в свою очередь, тоже имеет специальную форму &#8212; отношение композиции.</p>
<p>Отношение агрегации имеет место между несколькими классами в том случае, если один из классов представляет собой некоторую сущность, включающую в себя в качестве составных частей другие сущности.</p>
<p>Данное отношение имеет фундаментальное значение для описания структуры сложных систем, поскольку применяется для представления системных взаимосвязей типа «часть-целое».</p>
<p>Агрегирование является частным случаем ассоциации и изображается в виде простой ассоциации с не закрашенным ромбом со стороны &#171;целого&#187;.</p>
<p>Пример:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/агрегация2.png"><img loading="lazy" class="size-full wp-image-1965 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/агрегация2.png" alt="агрегация" width="464" height="151" srcset="https://abap-blog.ru/wp-content/uploads/2014/05/агрегация2.png 464w, https://abap-blog.ru/wp-content/uploads/2014/05/агрегация2-300x97.png 300w" sizes="(max-width: 464px) 100vw, 464px" /></a></p>
<p>Код (без реализации методов):</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_ faculty DEFINITION.
  PUBLIC SECTION.
    METHODS:
      add_student IMPORTING io_student TYPE REF TO lcl_student,
      del_student IMPORTING io_student TYPE REF TO lcl_student.
  PRIVATE SECTION.
    DATA:
      gt_sudents TYPE STANDARD TABLE OF REF TO lcl_student.
ENDCLASS.

CLASS lcl_ faculty IMPLEMENTATION.
  METHOD add_student.
    "...
  ENDMETHOD.
  METHOD del_student.
    "...
  ENDMETHOD.
ENDCLASS.</pre><p>В данном примере класс lcl_faculty содержит внутри себя внутреннюю таблицу с обучающимися на факультете студентами (и таким образом их агрегирует) и имеет методы для манипулирования её содержимым. С точки зрения структуры факультет является целым, а студенты его составной частью.</p>
<h4>2.3. Композиции</h4>
<p>Композиция — более строгий вариант агрегации. Известна также как агрегация по значению. Композиция имеет жёсткую зависимость времени существования экземпляров класса контейнера и экземпляров содержащихся классов. Если контейнер будет уничтожен, то всё его содержимое будет также уничтожено.</p>
<p>Графически представляется, как и агрегация, но с закрашенным ромбиком.</p>
<p>Допустим, у каждого студента есть запись об оценках по предмету, оценки могут храниться до тех пор, пока есть запись о студенте, иначе данные не имеют смысла, таким образом, при удалении записи студента, должны удаляться все записи о его оценках:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/Композиция.png"><img loading="lazy" class="size-full wp-image-1966 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/Композиция.png" alt="Композиция" width="518" height="223" srcset="https://abap-blog.ru/wp-content/uploads/2014/05/Композиция.png 518w, https://abap-blog.ru/wp-content/uploads/2014/05/Композиция-300x129.png 300w" sizes="(max-width: 518px) 100vw, 518px" /></a></p>
<p>При удалении студента из системы (факультета), будет вызываться метод clear_evals класса lcl_student, удаляющий все оценки по студенту, после чего состояние системы (факультета) может быть сохранено в БД.</p>
<h2>3. Реализации</h2>
<p>Реализация — отношение между двумя элементами модели, в котором один элемент (клиент) реализует поведение, заданное другим (поставщиком). Реализация — отношение целое-часть. Явное выражение реализации в ABAP это реализация классом заданного интерфейса. Графически реализация представляется так же, как и наследование, но с пунктирной линией.</p>
<p>Изменим слегка наш первый пример, класс lcl_person будет реализовывать интерфейс lif_man с методами get_name и set_name:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/Реализация.png"><img loading="lazy" class="size-full wp-image-1967 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/Реализация.png" alt="Реализация" width="453" height="96" srcset="https://abap-blog.ru/wp-content/uploads/2014/05/Реализация.png 453w, https://abap-blog.ru/wp-content/uploads/2014/05/Реализация-300x63.png 300w" sizes="(max-width: 453px) 100vw, 453px" /></a></p>
<p>Код диаграммы:</p><pre class="urvanov-syntax-highlighter-plain-tag">INTERFACE lif_man.
  METHODS:
    get_name RETURNING value(rv_name) TYPE string,
    set_name IMPORTING iv_name TYPE string.
ENDINTERFACE.

CLASS lcl_person DEFINITION.
  PUBLIC SECTION.
    INTERFACES:
      lif_man.
    ALIASES:
      get_name FOR lif_man~get_name,
      set_name FOR lif_man~set_name.
  PRIVATE SECTION.
    DATA:
      gv_name TYPE string.
ENDCLASS.

CLASS lcl_person IMPLEMENTATION.
  METHOD lif_man~get_name.
    rv_name = me-&gt;gv_name.
  ENDMETHOD.

  METHOD lif_man~set_name.
    me-&gt;gv_name = iv_name.
  ENDMETHOD.
ENDCLASS.</pre><p></p>
<h2>3. Зависимости</h2>
<p>Зависимость (dependency) — это слабая форма отношения использования, при котором изменение в спецификации одного влечёт за собой изменение другого, причём обратное не обязательно. Возникает, например, когда объект выступает в форме параметра или локальной переменной. Зависимость может быть между экземплярами, классами или экземпляром и классом.</p>
<p>Графически представляется пунктирной стрелкой, идущей от зависимого элемента к тому, от которого он зависит.</p>
<p>В качестве примера можно рассмотреть случай использования simple alv в локальном классе отчёта:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2014/05/зависимости.png"><img loading="lazy" class="size-full wp-image-1968 aligncenter" src="http://abap-blog.ru/wp-content/uploads/2014/05/зависимости.png" alt="зависимости" width="513" height="116" srcset="https://abap-blog.ru/wp-content/uploads/2014/05/зависимости.png 513w, https://abap-blog.ru/wp-content/uploads/2014/05/зависимости-300x67.png 300w" sizes="(max-width: 513px) 100vw, 513px" /></a></p>
<p>Код:</p><pre class="urvanov-syntax-highlighter-plain-tag">CLASS lcl_report DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
        show_data,
        get_data.
  PRIVATE SECTION.
    CLASS-DATA:
      gt_data      TYPE spfli_tab.  " Таблица с данными
ENDCLASS.

CLASS lcl_report IMPLEMENTATION.
  METHOD get_data.
    SELECT * FROM spfli INTO CORRESPONDING FIELDS OF TABLE gt_data.
  ENDMETHOD.

  METHOD show_data.
    DATA:
      lo_alv TYPE REF TO cl_salv_table.

    TRY.
        cl_salv_table=&gt;factory(
           IMPORTING
             r_salv_table = lo_alv
           CHANGING
             t_table = gt_data ).
      CATCH cx_salv_msg .
        MESSAGE 'Ошибка при создании ALV' TYPE 'E'.
    ENDTRY.

    lo_alv-&gt;display( ).
  ENDMETHOD.
ENDCLASS.

START-OF-SELECTION.
  lcl_report=&gt;get_data( ).
  lcl_report=&gt;show_data( ).</pre><p>Локальный класс lcl_report в методе show_data вызывает метод класса cl_salv_table, если описание метода поменяется, необходимо будет изменить так же и lcl_report.</p>
<p>Подводя итоги можно сказать, что диаграмма классов UML позволяет разработчикам лучше понимать друг друга при проектировании архитектуры системы, вне зависимости от языка программирования.</p><p>The post <a href="https://abap-blog.ru/osnovy-abap/diagramma-klassov-uml/">Диаграмма классов UML</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/diagramma-klassov-uml/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
		<item>
		<title>Программа генерации UML на основе ABAP классов</title>
		<link>https://abap-blog.ru/osnovy-abap/programma-generacii-uml-na-osnove-abap-klassov/</link>
					<comments>https://abap-blog.ru/osnovy-abap/programma-generacii-uml-na-osnove-abap-klassov/#comments</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Tue, 26 Mar 2013 15:13:21 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[abap objects]]></category>
		<category><![CDATA[UML]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=1290</guid>

					<description><![CDATA[<p>Получить UML представление классов можно воспользовавшись стандартной программой: UML_CLASS_DIAGRAM. Для того чтобы программа заработала, при установке SAP GUI необходимо установить SAP JNet ActiveX компонент: &#160; Программа в действии:</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/programma-generacii-uml-na-osnove-abap-klassov/">Программа генерации UML на основе ABAP классов</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p>Получить UML представление классов можно воспользовавшись стандартной программой: <strong>UML_CLASS_DIAGRAM</strong>. Для того чтобы программа заработала, при установке SAP GUI необходимо установить SAP JNet ActiveX компонент:</p>
<p><span id="more-1290"></span></p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2013/03/image001.png"><img loading="lazy" class="alignnone size-full wp-image-1292" src="http://abap-blog.ru/wp-content/uploads/2013/03/image001.png" alt="Установка GUI" width="654" height="501" /></a></p>
<p>&nbsp;</p>
<p>Программа в действии:</p>
<p><a href="http://abap-blog.ru/wp-content/uploads/2013/03/image002.png"><img loading="lazy" class="alignnone size-full wp-image-1293" src="http://abap-blog.ru/wp-content/uploads/2013/03/image002.png" alt="image002" width="1280" height="968" /></a></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/programma-generacii-uml-na-osnove-abap-klassov/">Программа генерации UML на основе ABAP классов</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/programma-generacii-uml-na-osnove-abap-klassov/feed/</wfw:commentRss>
			<slash:comments>6</slash:comments>
		
		
			</item>
	</channel>
</rss>
