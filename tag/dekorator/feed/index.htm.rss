<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>декоратор | ABAP Blog</title>
	<atom:link href="https://abap-blog.ru/tag/dekorator/feed/" rel="self" type="application/rss+xml" />
	<link>https://abap-blog.ru</link>
	<description>Все о разработке в решениях от SAP</description>
	<lastBuildDate>Tue, 02 Mar 2021 05:52:27 +0000</lastBuildDate>
	<language>ru-RU</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=5.8.1</generator>
	<item>
		<title>Шаблон декоратор</title>
		<link>https://abap-blog.ru/osnovy-abap/shablon-dekorator/</link>
					<comments>https://abap-blog.ru/osnovy-abap/shablon-dekorator/#respond</comments>
		
		<dc:creator><![CDATA[Astrafox]]></dc:creator>
		<pubDate>Mon, 09 Jan 2012 07:22:48 +0000</pubDate>
				<category><![CDATA[Основы ABAP]]></category>
		<category><![CDATA[декоратор]]></category>
		<category><![CDATA[шаблоны проектирования]]></category>
		<guid isPermaLink="false">http://abap-blog.ru/?p=160</guid>

					<description><![CDATA[<p>Декоратор, Decorator — структурный шаблон проектирования, предназначенный для динамического подключения дополнительного поведения к объекту. Шаблон Декоратор предоставляет гибкую альтернативу практике создания подклассов с целью расширения функциональности. Задача Объект, который предполагается использовать, выполняет основные функции (Класс lcl_alv). Однако может потребоваться добавить к нему некоторую дополнительную функциональность, которая будет выполняться до, после или даже вместо основной функциональности объекта. В примере ниже функциональность будет [&#8230;]</p>
<p>The post <a href="https://abap-blog.ru/osnovy-abap/shablon-dekorator/">Шаблон декоратор</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></description>
										<content:encoded><![CDATA[<p><strong>Декоратор</strong>, <strong>Decorator</strong> — структурный <a title="Шаблон проектирования" href="http://ru.wikipedia.org/wiki/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD_%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F">шаблон проектирования</a>, предназначенный для динамического подключения дополнительного поведения к <a title="Объект (программирование)" href="http://ru.wikipedia.org/wiki/%D0%9E%D0%B1%D1%8A%D0%B5%D0%BA%D1%82_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">объекту</a>. Шаблон Декоратор предоставляет гибкую альтернативу практике создания <a title="Класс (программирование)" href="http://ru.wikipedia.org/wiki/%D0%9A%D0%BB%D0%B0%D1%81%D1%81_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">подклассов</a> с целью расширения функциональности.</p>
<p><span id="more-160"></span></p>
<p><strong>Задача</strong></p>
<p>Объект, который предполагается использовать, выполняет основные функции (Класс <strong>lcl_alv</strong>). Однако может потребоваться добавить к нему некоторую дополнительную функциональность, которая будет выполняться до, после или даже вместо основной функциональности объекта. В примере ниже функциональность будет вызываться после основной (класс <strong>op_pdf</strong>).</p>
<p>Декоратор предназначен для динамического добавления объекту новой функциональности. Является гибкой альтернативой механизму наследования, в том числе и множественного.</p>
<p>Данный шаблон используется если необходимо:</p>
<ul>
<li>динамически и прозрачно для клиента изменять функциональность объекта;</li>
<li>(или) реализовать небольшую функциональность, которая в дальнейшем может быть исключена;</li>
<li>(или) уменьшить число классов, получающихся в результате использования наследования;</li>
<li>(или) добавить функциональность классу, от которого невозможно наследоваться;</li>
<li>(или) реализовать аналог множественного наследования, в языках его не поддерживающих.</li>
</ul>
<p><strong>Реализация ABAP:</strong></p><pre class="urvanov-syntax-highlighter-plain-tag">REPORT znp_dp_decorator.

* Абстрактный класс вывода данных
CLASS OUTPUT DEFINITION ABSTRACT.
  PUBLIC SECTION.
    METHODS:
      process_output ABSTRACT.
ENDCLASS.

* Базовый класс вывода, выводит в ALV формате..
CLASS lcl_alv DEFINITION INHERITING FROM OUTPUT.
  PUBLIC SECTION.
    METHODS: process_output REDEFINITION.
ENDCLASS.                    "op_alv DEFINITION

*
CLASS lcl_alv IMPLEMENTATION.
  METHOD process_output.
    WRITE: /(10) SPACE, 'Base class: generating ALV'.
  ENDMETHOD.                    "process_output
ENDCLASS.

* Класс для управления последовательностью вызовов
CLASS opdecorator DEFINITION INHERITING FROM OUTPUT.
  PUBLIC SECTION.
    METHODS:
      CONSTRUCTOR
        IMPORTING io_decorator TYPE REF TO OUTPUT OPTIONAL,
      process_output REDEFINITION.
  PRIVATE SECTION.
    DATA: o_decorator TYPE REF TO OUTPUT.
ENDCLASS.

CLASS opdecorator IMPLEMENTATION.
  METHOD CONSTRUCTOR.
    super-&gt;constructor( ).
    IF io_decorator IS SUPPLIED.
      me-&gt;o_decorator = io_decorator.
    ENDIF.
  ENDMETHOD.
  METHOD process_output.
    CHECK o_decorator IS BOUND.
    o_decorator-&gt;process_output( ).
  ENDMETHOD.
ENDCLASS.

* Класс-декоратор вывода в формате pdf
CLASS op_pdf DEFINITION INHERITING FROM opdecorator.
  PUBLIC SECTION.
    METHODS: process_output REDEFINITION.
ENDCLASS.

*
CLASS op_pdf IMPLEMENTATION.
  METHOD process_output.
    super-&gt;process_output( ). " Сперва вызываем предыдущий вывод.
    WRITE: /(10) SPACE, 'Generating PDF'.
  ENDMETHOD.
ENDCLASS.

* Основной класс отчёта
CLASS mainapp DEFINITION.
  PUBLIC SECTION.
    CLASS-METHODS:
      run IMPORTING
        iv_pdf   TYPE flag.
ENDCLASS.                    "mainapp DEFINITION

*
CLASS mainapp IMPLEMENTATION.
  METHOD run.
    DATA: lo_decorator TYPE REF TO OUTPUT,
          lo_pre TYPE REF TO OUTPUT.          " Helper Variable

* Создаем объект стандартного вывода в ALV
    CREATE OBJECT lo_decorator TYPE lcl_alv.
    lo_pre = lo_decorator.  " Запоминаем созданный объект, чтобы вставить в цепочку

* Создаем класс-декоратор для вывода в PDF
    IF iv_pdf IS NOT INITIAL.
      CREATE OBJECT lo_decorator TYPE op_pdf EXPORTING io_decorator = lo_pre.
      lo_pre = lo_decorator.
    ENDIF.

* Цепочка вызовов будет выглядеть так: alv output -&gt; pdf output
    lo_decorator-&gt;process_output( ).
  ENDMETHOD.                    "run
ENDCLASS.                    "mainapp IMPLEMENTATION

PARAMETERS: p_pdf AS CHECKBOX.

START-OF-SELECTION.
  mainapp=&gt;run( iv_pdf = p_pdf ).</pre><p></p><p>The post <a href="https://abap-blog.ru/osnovy-abap/shablon-dekorator/">Шаблон декоратор</a> first appeared on <a href="https://abap-blog.ru">ABAP Blog</a>.</p>]]></content:encoded>
					
					<wfw:commentRss>https://abap-blog.ru/osnovy-abap/shablon-dekorator/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
